// source: dtm.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.contrast.api.dtm.Activity', null, global);
goog.exportSymbol('proto.contrast.api.dtm.Address', null, global);
goog.exportSymbol('proto.contrast.api.dtm.AgentStartup', null, global);
goog.exportSymbol('proto.contrast.api.dtm.ApplicationCreate', null, global);
goog.exportSymbol('proto.contrast.api.dtm.ApplicationUpdate', null, global);
goog.exportSymbol('proto.contrast.api.dtm.ArchitectureComponent', null, global);
goog.exportSymbol('proto.contrast.api.dtm.AttackResult', null, global);
goog.exportSymbol('proto.contrast.api.dtm.AttackResult.ResponseType', null, global);
goog.exportSymbol('proto.contrast.api.dtm.BotBlockerDetails', null, global);
goog.exportSymbol('proto.contrast.api.dtm.BruteForceDetails', null, global);
goog.exportSymbol('proto.contrast.api.dtm.CmdInjectionDetails', null, global);
goog.exportSymbol('proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails', null, global);
goog.exportSymbol('proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails.Finding', null, global);
goog.exportSymbol('proto.contrast.api.dtm.CmdiSinkRequest', null, global);
goog.exportSymbol('proto.contrast.api.dtm.CmdiSinkResponse', null, global);
goog.exportSymbol('proto.contrast.api.dtm.CsrfDetails', null, global);
goog.exportSymbol('proto.contrast.api.dtm.Cve20170898Details', null, global);
goog.exportSymbol('proto.contrast.api.dtm.Cve201714033Details', null, global);
goog.exportSymbol('proto.contrast.api.dtm.Cve201714064Details', null, global);
goog.exportSymbol('proto.contrast.api.dtm.Cve201717405Details', null, global);
goog.exportSymbol('proto.contrast.api.dtm.CveDetails', null, global);
goog.exportSymbol('proto.contrast.api.dtm.DynamicSource', null, global);
goog.exportSymbol('proto.contrast.api.dtm.ElInjectionDetails', null, global);
goog.exportSymbol('proto.contrast.api.dtm.EndpointBanDetails', null, global);
goog.exportSymbol('proto.contrast.api.dtm.Finding', null, global);
goog.exportSymbol('proto.contrast.api.dtm.HttpMethodTamperingDetails', null, global);
goog.exportSymbol('proto.contrast.api.dtm.HttpRequest', null, global);
goog.exportSymbol('proto.contrast.api.dtm.HttpRequest.Authentication', null, global);
goog.exportSymbol('proto.contrast.api.dtm.HttpRequest.DocumentType', null, global);
goog.exportSymbol('proto.contrast.api.dtm.HttpResponse', null, global);
goog.exportSymbol('proto.contrast.api.dtm.IpBlacklistDetails', null, global);
goog.exportSymbol('proto.contrast.api.dtm.Library', null, global);
goog.exportSymbol('proto.contrast.api.dtm.LibraryUsageUpdate', null, global);
goog.exportSymbol('proto.contrast.api.dtm.MarkOfTheBeastDetails', null, global);
goog.exportSymbol('proto.contrast.api.dtm.Message', null, global);
goog.exportSymbol('proto.contrast.api.dtm.Message.EventCase', null, global);
goog.exportSymbol('proto.contrast.api.dtm.ModSecurityDetails', null, global);
goog.exportSymbol('proto.contrast.api.dtm.ModSecurityLog', null, global);
goog.exportSymbol('proto.contrast.api.dtm.NoSqlInjectionDetails', null, global);
goog.exportSymbol('proto.contrast.api.dtm.Noop', null, global);
goog.exportSymbol('proto.contrast.api.dtm.ObservedRoute', null, global);
goog.exportSymbol('proto.contrast.api.dtm.PaddingOracleDetails', null, global);
goog.exportSymbol('proto.contrast.api.dtm.Pair', null, global);
goog.exportSymbol('proto.contrast.api.dtm.ParentObjectId', null, global);
goog.exportSymbol('proto.contrast.api.dtm.PathTraversalDetails', null, global);
goog.exportSymbol('proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails', null, global);
goog.exportSymbol('proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails.Finding', null, global);
goog.exportSymbol('proto.contrast.api.dtm.Platform', null, global);
goog.exportSymbol('proto.contrast.api.dtm.Poll', null, global);
goog.exportSymbol('proto.contrast.api.dtm.PossibleSecurityControl', null, global);
goog.exportSymbol('proto.contrast.api.dtm.PtSinkRequest', null, global);
goog.exportSymbol('proto.contrast.api.dtm.PtSinkResponse', null, global);
goog.exportSymbol('proto.contrast.api.dtm.RaspRuleSample', null, global);
goog.exportSymbol('proto.contrast.api.dtm.RaspRuleSample.DetailsCase', null, global);
goog.exportSymbol('proto.contrast.api.dtm.RawRequest', null, global);
goog.exportSymbol('proto.contrast.api.dtm.RawResponse', null, global);
goog.exportSymbol('proto.contrast.api.dtm.ReDosDetails', null, global);
goog.exportSymbol('proto.contrast.api.dtm.RouteCoverage', null, global);
goog.exportSymbol('proto.contrast.api.dtm.RpcStatus', null, global);
goog.exportSymbol('proto.contrast.api.dtm.RpcStatus.Code', null, global);
goog.exportSymbol('proto.contrast.api.dtm.ServerActivity', null, global);
goog.exportSymbol('proto.contrast.api.dtm.SimplePair', null, global);
goog.exportSymbol('proto.contrast.api.dtm.SqlInjectionDetails', null, global);
goog.exportSymbol('proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails', null, global);
goog.exportSymbol('proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails.Finding', null, global);
goog.exportSymbol('proto.contrast.api.dtm.SqliSinkRequest', null, global);
goog.exportSymbol('proto.contrast.api.dtm.SqliSinkRequest.Dialect', null, global);
goog.exportSymbol('proto.contrast.api.dtm.SqliSinkResponse', null, global);
goog.exportSymbol('proto.contrast.api.dtm.SqliSinkResponse.FindingCase', null, global);
goog.exportSymbol('proto.contrast.api.dtm.SsjsInjectionDetails', null, global);
goog.exportSymbol('proto.contrast.api.dtm.SsrfDetails', null, global);
goog.exportSymbol('proto.contrast.api.dtm.StackTraceElement', null, global);
goog.exportSymbol('proto.contrast.api.dtm.TraceEvent', null, global);
goog.exportSymbol('proto.contrast.api.dtm.TraceEvent.Action', null, global);
goog.exportSymbol('proto.contrast.api.dtm.TraceEvent.EventType', null, global);
goog.exportSymbol('proto.contrast.api.dtm.TraceEventObject', null, global);
goog.exportSymbol('proto.contrast.api.dtm.TraceEventSignature', null, global);
goog.exportSymbol('proto.contrast.api.dtm.TraceEventSource', null, global);
goog.exportSymbol('proto.contrast.api.dtm.TraceStack', null, global);
goog.exportSymbol('proto.contrast.api.dtm.TraceTaintRange', null, global);
goog.exportSymbol('proto.contrast.api.dtm.UntrustedDeserializationDetails', null, global);
goog.exportSymbol('proto.contrast.api.dtm.UserInput', null, global);
goog.exportSymbol('proto.contrast.api.dtm.UserInput.InputType', null, global);
goog.exportSymbol('proto.contrast.api.dtm.View', null, global);
goog.exportSymbol('proto.contrast.api.dtm.VirtualPatchDetails', null, global);
goog.exportSymbol('proto.contrast.api.dtm.XssDetails', null, global);
goog.exportSymbol('proto.contrast.api.dtm.XssMatch', null, global);
goog.exportSymbol('proto.contrast.api.dtm.XxeDetails', null, global);
goog.exportSymbol('proto.contrast.api.dtm.XxeMatch', null, global);
goog.exportSymbol('proto.contrast.api.dtm.XxeWrapper', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.contrast.api.dtm.Message.oneofGroups_);
};
goog.inherits(proto.contrast.api.dtm.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.Message.displayName = 'proto.contrast.api.dtm.Message';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.Poll = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.Poll, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.Poll.displayName = 'proto.contrast.api.dtm.Poll';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.Noop = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.Noop, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.Noop.displayName = 'proto.contrast.api.dtm.Noop';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.ServerActivity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.ServerActivity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.ServerActivity.displayName = 'proto.contrast.api.dtm.ServerActivity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.AgentStartup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.AgentStartup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.AgentStartup.displayName = 'proto.contrast.api.dtm.AgentStartup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.ApplicationCreate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.ApplicationCreate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.ApplicationCreate.displayName = 'proto.contrast.api.dtm.ApplicationCreate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.ApplicationUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contrast.api.dtm.ApplicationUpdate.repeatedFields_, null);
};
goog.inherits(proto.contrast.api.dtm.ApplicationUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.ApplicationUpdate.displayName = 'proto.contrast.api.dtm.ApplicationUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.Activity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contrast.api.dtm.Activity.repeatedFields_, null);
};
goog.inherits(proto.contrast.api.dtm.Activity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.Activity.displayName = 'proto.contrast.api.dtm.Activity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.Finding = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contrast.api.dtm.Finding.repeatedFields_, null);
};
goog.inherits(proto.contrast.api.dtm.Finding, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.Finding.displayName = 'proto.contrast.api.dtm.Finding';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.DynamicSource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contrast.api.dtm.DynamicSource.repeatedFields_, null);
};
goog.inherits(proto.contrast.api.dtm.DynamicSource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.DynamicSource.displayName = 'proto.contrast.api.dtm.DynamicSource';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.PossibleSecurityControl = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.PossibleSecurityControl, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.PossibleSecurityControl.displayName = 'proto.contrast.api.dtm.PossibleSecurityControl';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.View = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.View, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.View.displayName = 'proto.contrast.api.dtm.View';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.Platform = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contrast.api.dtm.Platform.repeatedFields_, null);
};
goog.inherits(proto.contrast.api.dtm.Platform, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.Platform.displayName = 'proto.contrast.api.dtm.Platform';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.ArchitectureComponent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.ArchitectureComponent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.ArchitectureComponent.displayName = 'proto.contrast.api.dtm.ArchitectureComponent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.Library = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.Library, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.Library.displayName = 'proto.contrast.api.dtm.Library';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.LibraryUsageUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.LibraryUsageUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.LibraryUsageUpdate.displayName = 'proto.contrast.api.dtm.LibraryUsageUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.Address = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.Address, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.Address.displayName = 'proto.contrast.api.dtm.Address';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.RawRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contrast.api.dtm.RawRequest.repeatedFields_, null);
};
goog.inherits(proto.contrast.api.dtm.RawRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.RawRequest.displayName = 'proto.contrast.api.dtm.RawRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.RawResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contrast.api.dtm.RawResponse.repeatedFields_, null);
};
goog.inherits(proto.contrast.api.dtm.RawResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.RawResponse.displayName = 'proto.contrast.api.dtm.RawResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.HttpRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contrast.api.dtm.HttpRequest.repeatedFields_, null);
};
goog.inherits(proto.contrast.api.dtm.HttpRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.HttpRequest.displayName = 'proto.contrast.api.dtm.HttpRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.RpcStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.RpcStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.RpcStatus.displayName = 'proto.contrast.api.dtm.RpcStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.SqliSinkRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.SqliSinkRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.SqliSinkRequest.displayName = 'proto.contrast.api.dtm.SqliSinkRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.SqliSinkResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.contrast.api.dtm.SqliSinkResponse.oneofGroups_);
};
goog.inherits(proto.contrast.api.dtm.SqliSinkResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.SqliSinkResponse.displayName = 'proto.contrast.api.dtm.SqliSinkResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.HttpResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.HttpResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.HttpResponse.displayName = 'proto.contrast.api.dtm.HttpResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.SimplePair = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.SimplePair, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.SimplePair.displayName = 'proto.contrast.api.dtm.SimplePair';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.Pair = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contrast.api.dtm.Pair.repeatedFields_, null);
};
goog.inherits(proto.contrast.api.dtm.Pair, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.Pair.displayName = 'proto.contrast.api.dtm.Pair';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.AttackResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contrast.api.dtm.AttackResult.repeatedFields_, null);
};
goog.inherits(proto.contrast.api.dtm.AttackResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.AttackResult.displayName = 'proto.contrast.api.dtm.AttackResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.RaspRuleSample = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contrast.api.dtm.RaspRuleSample.repeatedFields_, proto.contrast.api.dtm.RaspRuleSample.oneofGroups_);
};
goog.inherits(proto.contrast.api.dtm.RaspRuleSample, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.RaspRuleSample.displayName = 'proto.contrast.api.dtm.RaspRuleSample';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.EndpointBanDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.EndpointBanDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.EndpointBanDetails.displayName = 'proto.contrast.api.dtm.EndpointBanDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.ModSecurityDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contrast.api.dtm.ModSecurityDetails.repeatedFields_, null);
};
goog.inherits(proto.contrast.api.dtm.ModSecurityDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.ModSecurityDetails.displayName = 'proto.contrast.api.dtm.ModSecurityDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.ModSecurityLog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.ModSecurityLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.ModSecurityLog.displayName = 'proto.contrast.api.dtm.ModSecurityLog';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.BruteForceDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.BruteForceDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.BruteForceDetails.displayName = 'proto.contrast.api.dtm.BruteForceDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.BotBlockerDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.BotBlockerDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.BotBlockerDetails.displayName = 'proto.contrast.api.dtm.BotBlockerDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.CmdInjectionDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.CmdInjectionDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.CmdInjectionDetails.displayName = 'proto.contrast.api.dtm.CmdInjectionDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails.repeatedFields_, null);
};
goog.inherits(proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails.displayName = 'proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.CsrfDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.CsrfDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.CsrfDetails.displayName = 'proto.contrast.api.dtm.CsrfDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.CveDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.CveDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.CveDetails.displayName = 'proto.contrast.api.dtm.CveDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.Cve20170898Details = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.Cve20170898Details, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.Cve20170898Details.displayName = 'proto.contrast.api.dtm.Cve20170898Details';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.Cve201714033Details = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.Cve201714033Details, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.Cve201714033Details.displayName = 'proto.contrast.api.dtm.Cve201714033Details';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.Cve201714064Details = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.Cve201714064Details, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.Cve201714064Details.displayName = 'proto.contrast.api.dtm.Cve201714064Details';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.Cve201717405Details = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.Cve201717405Details, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.Cve201717405Details.displayName = 'proto.contrast.api.dtm.Cve201717405Details';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.HttpMethodTamperingDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.HttpMethodTamperingDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.HttpMethodTamperingDetails.displayName = 'proto.contrast.api.dtm.HttpMethodTamperingDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.UntrustedDeserializationDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.UntrustedDeserializationDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.UntrustedDeserializationDetails.displayName = 'proto.contrast.api.dtm.UntrustedDeserializationDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.ElInjectionDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.ElInjectionDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.ElInjectionDetails.displayName = 'proto.contrast.api.dtm.ElInjectionDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.IpBlacklistDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.IpBlacklistDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.IpBlacklistDetails.displayName = 'proto.contrast.api.dtm.IpBlacklistDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.MarkOfTheBeastDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.MarkOfTheBeastDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.MarkOfTheBeastDetails.displayName = 'proto.contrast.api.dtm.MarkOfTheBeastDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.PaddingOracleDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.PaddingOracleDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.PaddingOracleDetails.displayName = 'proto.contrast.api.dtm.PaddingOracleDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.PathTraversalDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.PathTraversalDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.PathTraversalDetails.displayName = 'proto.contrast.api.dtm.PathTraversalDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails.repeatedFields_, null);
};
goog.inherits(proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails.displayName = 'proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.ReDosDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.ReDosDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.ReDosDetails.displayName = 'proto.contrast.api.dtm.ReDosDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.SsjsInjectionDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.SsjsInjectionDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.SsjsInjectionDetails.displayName = 'proto.contrast.api.dtm.SsjsInjectionDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.SqlInjectionDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.SqlInjectionDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.SqlInjectionDetails.displayName = 'proto.contrast.api.dtm.SqlInjectionDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails.displayName = 'proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.NoSqlInjectionDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.NoSqlInjectionDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.NoSqlInjectionDetails.displayName = 'proto.contrast.api.dtm.NoSqlInjectionDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.SsrfDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.SsrfDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.SsrfDetails.displayName = 'proto.contrast.api.dtm.SsrfDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.VirtualPatchDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.VirtualPatchDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.VirtualPatchDetails.displayName = 'proto.contrast.api.dtm.VirtualPatchDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.XssDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contrast.api.dtm.XssDetails.repeatedFields_, null);
};
goog.inherits(proto.contrast.api.dtm.XssDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.XssDetails.displayName = 'proto.contrast.api.dtm.XssDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.XssMatch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.XssMatch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.XssMatch.displayName = 'proto.contrast.api.dtm.XssMatch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.XxeDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contrast.api.dtm.XxeDetails.repeatedFields_, null);
};
goog.inherits(proto.contrast.api.dtm.XxeDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.XxeDetails.displayName = 'proto.contrast.api.dtm.XxeDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.XxeMatch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.XxeMatch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.XxeMatch.displayName = 'proto.contrast.api.dtm.XxeMatch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.XxeWrapper = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.XxeWrapper, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.XxeWrapper.displayName = 'proto.contrast.api.dtm.XxeWrapper';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.UserInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contrast.api.dtm.UserInput.repeatedFields_, null);
};
goog.inherits(proto.contrast.api.dtm.UserInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.UserInput.displayName = 'proto.contrast.api.dtm.UserInput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.StackTraceElement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.StackTraceElement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.StackTraceElement.displayName = 'proto.contrast.api.dtm.StackTraceElement';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.TraceEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contrast.api.dtm.TraceEvent.repeatedFields_, null);
};
goog.inherits(proto.contrast.api.dtm.TraceEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.TraceEvent.displayName = 'proto.contrast.api.dtm.TraceEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.TraceEventSignature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contrast.api.dtm.TraceEventSignature.repeatedFields_, null);
};
goog.inherits(proto.contrast.api.dtm.TraceEventSignature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.TraceEventSignature.displayName = 'proto.contrast.api.dtm.TraceEventSignature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.TraceEventSource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.TraceEventSource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.TraceEventSource.displayName = 'proto.contrast.api.dtm.TraceEventSource';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.TraceEventObject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contrast.api.dtm.TraceEventObject.repeatedFields_, null);
};
goog.inherits(proto.contrast.api.dtm.TraceEventObject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.TraceEventObject.displayName = 'proto.contrast.api.dtm.TraceEventObject';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.TraceTaintRange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.TraceTaintRange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.TraceTaintRange.displayName = 'proto.contrast.api.dtm.TraceTaintRange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.ParentObjectId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.ParentObjectId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.ParentObjectId.displayName = 'proto.contrast.api.dtm.ParentObjectId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.TraceStack = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.TraceStack, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.TraceStack.displayName = 'proto.contrast.api.dtm.TraceStack';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.RouteCoverage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.RouteCoverage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.RouteCoverage.displayName = 'proto.contrast.api.dtm.RouteCoverage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.ObservedRoute = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contrast.api.dtm.ObservedRoute.repeatedFields_, null);
};
goog.inherits(proto.contrast.api.dtm.ObservedRoute, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.ObservedRoute.displayName = 'proto.contrast.api.dtm.ObservedRoute';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.CmdiSinkRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.CmdiSinkRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.CmdiSinkRequest.displayName = 'proto.contrast.api.dtm.CmdiSinkRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.CmdiSinkResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.CmdiSinkResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.CmdiSinkResponse.displayName = 'proto.contrast.api.dtm.CmdiSinkResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.PtSinkRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.PtSinkRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.PtSinkRequest.displayName = 'proto.contrast.api.dtm.PtSinkRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.dtm.PtSinkResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.dtm.PtSinkResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.dtm.PtSinkResponse.displayName = 'proto.contrast.api.dtm.PtSinkResponse';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.contrast.api.dtm.Message.oneofGroups_ = [[11,12,10,13,14,26,19,20,22,23,25,27,24]];

/**
 * @enum {number}
 */
proto.contrast.api.dtm.Message.EventCase = {
  EVENT_NOT_SET: 0,
  AGENT_STARTUP: 11,
  APPLICATION_CREATE: 12,
  SERVER_ACTIVITY: 10,
  APPLICATION_UPDATE: 13,
  ACTIVITY: 14,
  OBSERVED_ROUTE: 26,
  REQUEST: 19,
  PREFILTER: 20,
  POSTFILTER: 22,
  RESPONSE: 23,
  SQLI_SINK: 25,
  POLL: 27,
  NOOP: 24
};

/**
 * @return {proto.contrast.api.dtm.Message.EventCase}
 */
proto.contrast.api.dtm.Message.prototype.getEventCase = function() {
  return /** @type {proto.contrast.api.dtm.Message.EventCase} */(jspb.Message.computeOneofCase(this, proto.contrast.api.dtm.Message.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clientNumber: jspb.Message.getFieldWithDefault(msg, 2, 0),
    clientTotal: jspb.Message.getFieldWithDefault(msg, 3, 0),
    pid: jspb.Message.getFieldWithDefault(msg, 8, 0),
    ppid: jspb.Message.getFieldWithDefault(msg, 9, 0),
    messageCount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    timestampMs: jspb.Message.getFieldWithDefault(msg, 5, 0),
    appName: jspb.Message.getFieldWithDefault(msg, 6, ""),
    appLanguage: jspb.Message.getFieldWithDefault(msg, 7, ""),
    appPath: jspb.Message.getFieldWithDefault(msg, 28, ""),
    agentStartup: (f = msg.getAgentStartup()) && proto.contrast.api.dtm.AgentStartup.toObject(includeInstance, f),
    applicationCreate: (f = msg.getApplicationCreate()) && proto.contrast.api.dtm.ApplicationCreate.toObject(includeInstance, f),
    serverActivity: (f = msg.getServerActivity()) && proto.contrast.api.dtm.ServerActivity.toObject(includeInstance, f),
    applicationUpdate: (f = msg.getApplicationUpdate()) && proto.contrast.api.dtm.ApplicationUpdate.toObject(includeInstance, f),
    activity: (f = msg.getActivity()) && proto.contrast.api.dtm.Activity.toObject(includeInstance, f),
    observedRoute: (f = msg.getObservedRoute()) && proto.contrast.api.dtm.ObservedRoute.toObject(includeInstance, f),
    request: (f = msg.getRequest()) && proto.contrast.api.dtm.RawRequest.toObject(includeInstance, f),
    prefilter: (f = msg.getPrefilter()) && proto.contrast.api.dtm.HttpRequest.toObject(includeInstance, f),
    postfilter: (f = msg.getPostfilter()) && proto.contrast.api.dtm.HttpResponse.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.contrast.api.dtm.RawResponse.toObject(includeInstance, f),
    sqliSink: (f = msg.getSqliSink()) && proto.contrast.api.dtm.SqliSinkRequest.toObject(includeInstance, f),
    poll: (f = msg.getPoll()) && proto.contrast.api.dtm.Poll.toObject(includeInstance, f),
    noop: (f = msg.getNoop()) && proto.contrast.api.dtm.Noop.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.Message}
 */
proto.contrast.api.dtm.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.Message;
  return proto.contrast.api.dtm.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.Message}
 */
proto.contrast.api.dtm.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setClientNumber(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setClientTotal(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPid(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPpid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMessageCount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestampMs(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppName(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppLanguage(value);
      break;
    case 28:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppPath(value);
      break;
    case 11:
      var value = new proto.contrast.api.dtm.AgentStartup;
      reader.readMessage(value,proto.contrast.api.dtm.AgentStartup.deserializeBinaryFromReader);
      msg.setAgentStartup(value);
      break;
    case 12:
      var value = new proto.contrast.api.dtm.ApplicationCreate;
      reader.readMessage(value,proto.contrast.api.dtm.ApplicationCreate.deserializeBinaryFromReader);
      msg.setApplicationCreate(value);
      break;
    case 10:
      var value = new proto.contrast.api.dtm.ServerActivity;
      reader.readMessage(value,proto.contrast.api.dtm.ServerActivity.deserializeBinaryFromReader);
      msg.setServerActivity(value);
      break;
    case 13:
      var value = new proto.contrast.api.dtm.ApplicationUpdate;
      reader.readMessage(value,proto.contrast.api.dtm.ApplicationUpdate.deserializeBinaryFromReader);
      msg.setApplicationUpdate(value);
      break;
    case 14:
      var value = new proto.contrast.api.dtm.Activity;
      reader.readMessage(value,proto.contrast.api.dtm.Activity.deserializeBinaryFromReader);
      msg.setActivity(value);
      break;
    case 26:
      var value = new proto.contrast.api.dtm.ObservedRoute;
      reader.readMessage(value,proto.contrast.api.dtm.ObservedRoute.deserializeBinaryFromReader);
      msg.setObservedRoute(value);
      break;
    case 19:
      var value = new proto.contrast.api.dtm.RawRequest;
      reader.readMessage(value,proto.contrast.api.dtm.RawRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 20:
      var value = new proto.contrast.api.dtm.HttpRequest;
      reader.readMessage(value,proto.contrast.api.dtm.HttpRequest.deserializeBinaryFromReader);
      msg.setPrefilter(value);
      break;
    case 22:
      var value = new proto.contrast.api.dtm.HttpResponse;
      reader.readMessage(value,proto.contrast.api.dtm.HttpResponse.deserializeBinaryFromReader);
      msg.setPostfilter(value);
      break;
    case 23:
      var value = new proto.contrast.api.dtm.RawResponse;
      reader.readMessage(value,proto.contrast.api.dtm.RawResponse.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    case 25:
      var value = new proto.contrast.api.dtm.SqliSinkRequest;
      reader.readMessage(value,proto.contrast.api.dtm.SqliSinkRequest.deserializeBinaryFromReader);
      msg.setSqliSink(value);
      break;
    case 27:
      var value = new proto.contrast.api.dtm.Poll;
      reader.readMessage(value,proto.contrast.api.dtm.Poll.deserializeBinaryFromReader);
      msg.setPoll(value);
      break;
    case 24:
      var value = new proto.contrast.api.dtm.Noop;
      reader.readMessage(value,proto.contrast.api.dtm.Noop.deserializeBinaryFromReader);
      msg.setNoop(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClientNumber();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getClientTotal();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getPid();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getPpid();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getMessageCount();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getTimestampMs();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getAppName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getAppLanguage();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getAppPath();
  if (f.length > 0) {
    writer.writeString(
      28,
      f
    );
  }
  f = message.getAgentStartup();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.contrast.api.dtm.AgentStartup.serializeBinaryToWriter
    );
  }
  f = message.getApplicationCreate();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.contrast.api.dtm.ApplicationCreate.serializeBinaryToWriter
    );
  }
  f = message.getServerActivity();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.contrast.api.dtm.ServerActivity.serializeBinaryToWriter
    );
  }
  f = message.getApplicationUpdate();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.contrast.api.dtm.ApplicationUpdate.serializeBinaryToWriter
    );
  }
  f = message.getActivity();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.contrast.api.dtm.Activity.serializeBinaryToWriter
    );
  }
  f = message.getObservedRoute();
  if (f != null) {
    writer.writeMessage(
      26,
      f,
      proto.contrast.api.dtm.ObservedRoute.serializeBinaryToWriter
    );
  }
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.contrast.api.dtm.RawRequest.serializeBinaryToWriter
    );
  }
  f = message.getPrefilter();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.contrast.api.dtm.HttpRequest.serializeBinaryToWriter
    );
  }
  f = message.getPostfilter();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.contrast.api.dtm.HttpResponse.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.contrast.api.dtm.RawResponse.serializeBinaryToWriter
    );
  }
  f = message.getSqliSink();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      proto.contrast.api.dtm.SqliSinkRequest.serializeBinaryToWriter
    );
  }
  f = message.getPoll();
  if (f != null) {
    writer.writeMessage(
      27,
      f,
      proto.contrast.api.dtm.Poll.serializeBinaryToWriter
    );
  }
  f = message.getNoop();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.contrast.api.dtm.Noop.serializeBinaryToWriter
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.contrast.api.dtm.Message.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Message} returns this
 */
proto.contrast.api.dtm.Message.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 client_number = 2;
 * @return {number}
 */
proto.contrast.api.dtm.Message.prototype.getClientNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.Message} returns this
 */
proto.contrast.api.dtm.Message.prototype.setClientNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 client_total = 3;
 * @return {number}
 */
proto.contrast.api.dtm.Message.prototype.getClientTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.Message} returns this
 */
proto.contrast.api.dtm.Message.prototype.setClientTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 pid = 8;
 * @return {number}
 */
proto.contrast.api.dtm.Message.prototype.getPid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.Message} returns this
 */
proto.contrast.api.dtm.Message.prototype.setPid = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 ppid = 9;
 * @return {number}
 */
proto.contrast.api.dtm.Message.prototype.getPpid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.Message} returns this
 */
proto.contrast.api.dtm.Message.prototype.setPpid = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 message_count = 4;
 * @return {number}
 */
proto.contrast.api.dtm.Message.prototype.getMessageCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.Message} returns this
 */
proto.contrast.api.dtm.Message.prototype.setMessageCount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 timestamp_ms = 5;
 * @return {number}
 */
proto.contrast.api.dtm.Message.prototype.getTimestampMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.Message} returns this
 */
proto.contrast.api.dtm.Message.prototype.setTimestampMs = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string app_name = 6;
 * @return {string}
 */
proto.contrast.api.dtm.Message.prototype.getAppName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Message} returns this
 */
proto.contrast.api.dtm.Message.prototype.setAppName = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string app_language = 7;
 * @return {string}
 */
proto.contrast.api.dtm.Message.prototype.getAppLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Message} returns this
 */
proto.contrast.api.dtm.Message.prototype.setAppLanguage = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string app_path = 28;
 * @return {string}
 */
proto.contrast.api.dtm.Message.prototype.getAppPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 28, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Message} returns this
 */
proto.contrast.api.dtm.Message.prototype.setAppPath = function(value) {
  return jspb.Message.setProto3StringField(this, 28, value);
};


/**
 * optional AgentStartup agent_startup = 11;
 * @return {?proto.contrast.api.dtm.AgentStartup}
 */
proto.contrast.api.dtm.Message.prototype.getAgentStartup = function() {
  return /** @type{?proto.contrast.api.dtm.AgentStartup} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.AgentStartup, 11));
};


/**
 * @param {?proto.contrast.api.dtm.AgentStartup|undefined} value
 * @return {!proto.contrast.api.dtm.Message} returns this
*/
proto.contrast.api.dtm.Message.prototype.setAgentStartup = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.contrast.api.dtm.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.Message} returns this
 */
proto.contrast.api.dtm.Message.prototype.clearAgentStartup = function() {
  return this.setAgentStartup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.Message.prototype.hasAgentStartup = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional ApplicationCreate application_create = 12;
 * @return {?proto.contrast.api.dtm.ApplicationCreate}
 */
proto.contrast.api.dtm.Message.prototype.getApplicationCreate = function() {
  return /** @type{?proto.contrast.api.dtm.ApplicationCreate} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.ApplicationCreate, 12));
};


/**
 * @param {?proto.contrast.api.dtm.ApplicationCreate|undefined} value
 * @return {!proto.contrast.api.dtm.Message} returns this
*/
proto.contrast.api.dtm.Message.prototype.setApplicationCreate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.contrast.api.dtm.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.Message} returns this
 */
proto.contrast.api.dtm.Message.prototype.clearApplicationCreate = function() {
  return this.setApplicationCreate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.Message.prototype.hasApplicationCreate = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional ServerActivity server_activity = 10;
 * @return {?proto.contrast.api.dtm.ServerActivity}
 */
proto.contrast.api.dtm.Message.prototype.getServerActivity = function() {
  return /** @type{?proto.contrast.api.dtm.ServerActivity} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.ServerActivity, 10));
};


/**
 * @param {?proto.contrast.api.dtm.ServerActivity|undefined} value
 * @return {!proto.contrast.api.dtm.Message} returns this
*/
proto.contrast.api.dtm.Message.prototype.setServerActivity = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.contrast.api.dtm.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.Message} returns this
 */
proto.contrast.api.dtm.Message.prototype.clearServerActivity = function() {
  return this.setServerActivity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.Message.prototype.hasServerActivity = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional ApplicationUpdate application_update = 13;
 * @return {?proto.contrast.api.dtm.ApplicationUpdate}
 */
proto.contrast.api.dtm.Message.prototype.getApplicationUpdate = function() {
  return /** @type{?proto.contrast.api.dtm.ApplicationUpdate} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.ApplicationUpdate, 13));
};


/**
 * @param {?proto.contrast.api.dtm.ApplicationUpdate|undefined} value
 * @return {!proto.contrast.api.dtm.Message} returns this
*/
proto.contrast.api.dtm.Message.prototype.setApplicationUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.contrast.api.dtm.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.Message} returns this
 */
proto.contrast.api.dtm.Message.prototype.clearApplicationUpdate = function() {
  return this.setApplicationUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.Message.prototype.hasApplicationUpdate = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional Activity activity = 14;
 * @return {?proto.contrast.api.dtm.Activity}
 */
proto.contrast.api.dtm.Message.prototype.getActivity = function() {
  return /** @type{?proto.contrast.api.dtm.Activity} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.Activity, 14));
};


/**
 * @param {?proto.contrast.api.dtm.Activity|undefined} value
 * @return {!proto.contrast.api.dtm.Message} returns this
*/
proto.contrast.api.dtm.Message.prototype.setActivity = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.contrast.api.dtm.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.Message} returns this
 */
proto.contrast.api.dtm.Message.prototype.clearActivity = function() {
  return this.setActivity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.Message.prototype.hasActivity = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional ObservedRoute observed_route = 26;
 * @return {?proto.contrast.api.dtm.ObservedRoute}
 */
proto.contrast.api.dtm.Message.prototype.getObservedRoute = function() {
  return /** @type{?proto.contrast.api.dtm.ObservedRoute} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.ObservedRoute, 26));
};


/**
 * @param {?proto.contrast.api.dtm.ObservedRoute|undefined} value
 * @return {!proto.contrast.api.dtm.Message} returns this
*/
proto.contrast.api.dtm.Message.prototype.setObservedRoute = function(value) {
  return jspb.Message.setOneofWrapperField(this, 26, proto.contrast.api.dtm.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.Message} returns this
 */
proto.contrast.api.dtm.Message.prototype.clearObservedRoute = function() {
  return this.setObservedRoute(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.Message.prototype.hasObservedRoute = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional RawRequest request = 19;
 * @return {?proto.contrast.api.dtm.RawRequest}
 */
proto.contrast.api.dtm.Message.prototype.getRequest = function() {
  return /** @type{?proto.contrast.api.dtm.RawRequest} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.RawRequest, 19));
};


/**
 * @param {?proto.contrast.api.dtm.RawRequest|undefined} value
 * @return {!proto.contrast.api.dtm.Message} returns this
*/
proto.contrast.api.dtm.Message.prototype.setRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 19, proto.contrast.api.dtm.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.Message} returns this
 */
proto.contrast.api.dtm.Message.prototype.clearRequest = function() {
  return this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.Message.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional HttpRequest prefilter = 20;
 * @return {?proto.contrast.api.dtm.HttpRequest}
 */
proto.contrast.api.dtm.Message.prototype.getPrefilter = function() {
  return /** @type{?proto.contrast.api.dtm.HttpRequest} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.HttpRequest, 20));
};


/**
 * @param {?proto.contrast.api.dtm.HttpRequest|undefined} value
 * @return {!proto.contrast.api.dtm.Message} returns this
*/
proto.contrast.api.dtm.Message.prototype.setPrefilter = function(value) {
  return jspb.Message.setOneofWrapperField(this, 20, proto.contrast.api.dtm.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.Message} returns this
 */
proto.contrast.api.dtm.Message.prototype.clearPrefilter = function() {
  return this.setPrefilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.Message.prototype.hasPrefilter = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional HttpResponse postfilter = 22;
 * @return {?proto.contrast.api.dtm.HttpResponse}
 */
proto.contrast.api.dtm.Message.prototype.getPostfilter = function() {
  return /** @type{?proto.contrast.api.dtm.HttpResponse} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.HttpResponse, 22));
};


/**
 * @param {?proto.contrast.api.dtm.HttpResponse|undefined} value
 * @return {!proto.contrast.api.dtm.Message} returns this
*/
proto.contrast.api.dtm.Message.prototype.setPostfilter = function(value) {
  return jspb.Message.setOneofWrapperField(this, 22, proto.contrast.api.dtm.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.Message} returns this
 */
proto.contrast.api.dtm.Message.prototype.clearPostfilter = function() {
  return this.setPostfilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.Message.prototype.hasPostfilter = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional RawResponse response = 23;
 * @return {?proto.contrast.api.dtm.RawResponse}
 */
proto.contrast.api.dtm.Message.prototype.getResponse = function() {
  return /** @type{?proto.contrast.api.dtm.RawResponse} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.RawResponse, 23));
};


/**
 * @param {?proto.contrast.api.dtm.RawResponse|undefined} value
 * @return {!proto.contrast.api.dtm.Message} returns this
*/
proto.contrast.api.dtm.Message.prototype.setResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 23, proto.contrast.api.dtm.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.Message} returns this
 */
proto.contrast.api.dtm.Message.prototype.clearResponse = function() {
  return this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.Message.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional SqliSinkRequest sqli_sink = 25;
 * @return {?proto.contrast.api.dtm.SqliSinkRequest}
 */
proto.contrast.api.dtm.Message.prototype.getSqliSink = function() {
  return /** @type{?proto.contrast.api.dtm.SqliSinkRequest} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.SqliSinkRequest, 25));
};


/**
 * @param {?proto.contrast.api.dtm.SqliSinkRequest|undefined} value
 * @return {!proto.contrast.api.dtm.Message} returns this
*/
proto.contrast.api.dtm.Message.prototype.setSqliSink = function(value) {
  return jspb.Message.setOneofWrapperField(this, 25, proto.contrast.api.dtm.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.Message} returns this
 */
proto.contrast.api.dtm.Message.prototype.clearSqliSink = function() {
  return this.setSqliSink(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.Message.prototype.hasSqliSink = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional Poll poll = 27;
 * @return {?proto.contrast.api.dtm.Poll}
 */
proto.contrast.api.dtm.Message.prototype.getPoll = function() {
  return /** @type{?proto.contrast.api.dtm.Poll} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.Poll, 27));
};


/**
 * @param {?proto.contrast.api.dtm.Poll|undefined} value
 * @return {!proto.contrast.api.dtm.Message} returns this
*/
proto.contrast.api.dtm.Message.prototype.setPoll = function(value) {
  return jspb.Message.setOneofWrapperField(this, 27, proto.contrast.api.dtm.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.Message} returns this
 */
proto.contrast.api.dtm.Message.prototype.clearPoll = function() {
  return this.setPoll(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.Message.prototype.hasPoll = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional Noop noop = 24;
 * @return {?proto.contrast.api.dtm.Noop}
 */
proto.contrast.api.dtm.Message.prototype.getNoop = function() {
  return /** @type{?proto.contrast.api.dtm.Noop} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.Noop, 24));
};


/**
 * @param {?proto.contrast.api.dtm.Noop|undefined} value
 * @return {!proto.contrast.api.dtm.Message} returns this
*/
proto.contrast.api.dtm.Message.prototype.setNoop = function(value) {
  return jspb.Message.setOneofWrapperField(this, 24, proto.contrast.api.dtm.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.Message} returns this
 */
proto.contrast.api.dtm.Message.prototype.clearNoop = function() {
  return this.setNoop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.Message.prototype.hasNoop = function() {
  return jspb.Message.getField(this, 24) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.Poll.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.Poll.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.Poll} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.Poll.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.Poll}
 */
proto.contrast.api.dtm.Poll.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.Poll;
  return proto.contrast.api.dtm.Poll.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.Poll} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.Poll}
 */
proto.contrast.api.dtm.Poll.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.Poll.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.Poll.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.Poll} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.Poll.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.Noop.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.Noop.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.Noop} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.Noop.toObject = function(includeInstance, msg) {
  var f, obj = {
    flag: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.Noop}
 */
proto.contrast.api.dtm.Noop.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.Noop;
  return proto.contrast.api.dtm.Noop.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.Noop} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.Noop}
 */
proto.contrast.api.dtm.Noop.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFlag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.Noop.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.Noop.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.Noop} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.Noop.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlag();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 flag = 1;
 * @return {number}
 */
proto.contrast.api.dtm.Noop.prototype.getFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.Noop} returns this
 */
proto.contrast.api.dtm.Noop.prototype.setFlag = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.ServerActivity.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.ServerActivity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.ServerActivity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.ServerActivity.toObject = function(includeInstance, msg) {
  var f, obj = {
    logEnhancersMap: (f = msg.getLogEnhancersMap()) ? f.toObject(includeInstance, undefined) : [],
    ipBlacklistsMap: (f = msg.getIpBlacklistsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.ServerActivity}
 */
proto.contrast.api.dtm.ServerActivity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.ServerActivity;
  return proto.contrast.api.dtm.ServerActivity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.ServerActivity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.ServerActivity}
 */
proto.contrast.api.dtm.ServerActivity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 16:
      var value = msg.getLogEnhancersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt32, null, "", 0);
         });
      break;
    case 17:
      var value = msg.getIpBlacklistsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt32, null, "", 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.ServerActivity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.ServerActivity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.ServerActivity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.ServerActivity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLogEnhancersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(16, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt32);
  }
  f = message.getIpBlacklistsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(17, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt32);
  }
};


/**
 * map<string, int32> log_enhancers = 16;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.contrast.api.dtm.ServerActivity.prototype.getLogEnhancersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 16, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.contrast.api.dtm.ServerActivity} returns this
 */
proto.contrast.api.dtm.ServerActivity.prototype.clearLogEnhancersMap = function() {
  this.getLogEnhancersMap().clear();
  return this;};


/**
 * map<string, int32> ip_blacklists = 17;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.contrast.api.dtm.ServerActivity.prototype.getIpBlacklistsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 17, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.contrast.api.dtm.ServerActivity} returns this
 */
proto.contrast.api.dtm.ServerActivity.prototype.clearIpBlacklistsMap = function() {
  this.getIpBlacklistsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.AgentStartup.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.AgentStartup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.AgentStartup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.AgentStartup.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 2, ""),
    environment: jspb.Message.getFieldWithDefault(msg, 3, ""),
    tags: jspb.Message.getFieldWithDefault(msg, 4, ""),
    serverName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    serverPath: jspb.Message.getFieldWithDefault(msg, 6, ""),
    serverType: jspb.Message.getFieldWithDefault(msg, 7, ""),
    serverVersion: jspb.Message.getFieldWithDefault(msg, 8, ""),
    heartbeatMs: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.AgentStartup}
 */
proto.contrast.api.dtm.AgentStartup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.AgentStartup;
  return proto.contrast.api.dtm.AgentStartup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.AgentStartup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.AgentStartup}
 */
proto.contrast.api.dtm.AgentStartup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnvironment(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTags(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerPath(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerType(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerVersion(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeartbeatMs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.AgentStartup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.AgentStartup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.AgentStartup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.AgentStartup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEnvironment();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTags();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getServerName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getServerPath();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getServerType();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getServerVersion();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getHeartbeatMs();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.contrast.api.dtm.AgentStartup.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.AgentStartup} returns this
 */
proto.contrast.api.dtm.AgentStartup.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string environment = 3;
 * @return {string}
 */
proto.contrast.api.dtm.AgentStartup.prototype.getEnvironment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.AgentStartup} returns this
 */
proto.contrast.api.dtm.AgentStartup.prototype.setEnvironment = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string tags = 4;
 * @return {string}
 */
proto.contrast.api.dtm.AgentStartup.prototype.getTags = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.AgentStartup} returns this
 */
proto.contrast.api.dtm.AgentStartup.prototype.setTags = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string server_name = 5;
 * @return {string}
 */
proto.contrast.api.dtm.AgentStartup.prototype.getServerName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.AgentStartup} returns this
 */
proto.contrast.api.dtm.AgentStartup.prototype.setServerName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string server_path = 6;
 * @return {string}
 */
proto.contrast.api.dtm.AgentStartup.prototype.getServerPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.AgentStartup} returns this
 */
proto.contrast.api.dtm.AgentStartup.prototype.setServerPath = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string server_type = 7;
 * @return {string}
 */
proto.contrast.api.dtm.AgentStartup.prototype.getServerType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.AgentStartup} returns this
 */
proto.contrast.api.dtm.AgentStartup.prototype.setServerType = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string server_version = 8;
 * @return {string}
 */
proto.contrast.api.dtm.AgentStartup.prototype.getServerVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.AgentStartup} returns this
 */
proto.contrast.api.dtm.AgentStartup.prototype.setServerVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int32 heartbeat_ms = 9;
 * @return {number}
 */
proto.contrast.api.dtm.AgentStartup.prototype.getHeartbeatMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.AgentStartup} returns this
 */
proto.contrast.api.dtm.AgentStartup.prototype.setHeartbeatMs = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.ApplicationCreate.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.ApplicationCreate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.ApplicationCreate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.ApplicationCreate.toObject = function(includeInstance, msg) {
  var f, obj = {
    group: jspb.Message.getFieldWithDefault(msg, 1, ""),
    appVersion: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tags: jspb.Message.getFieldWithDefault(msg, 3, ""),
    code: jspb.Message.getFieldWithDefault(msg, 4, ""),
    metadata: jspb.Message.getFieldWithDefault(msg, 5, ""),
    sessionId: jspb.Message.getFieldWithDefault(msg, 6, ""),
    sessionMetadata: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.ApplicationCreate}
 */
proto.contrast.api.dtm.ApplicationCreate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.ApplicationCreate;
  return proto.contrast.api.dtm.ApplicationCreate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.ApplicationCreate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.ApplicationCreate}
 */
proto.contrast.api.dtm.ApplicationCreate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroup(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTags(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMetadata(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.ApplicationCreate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.ApplicationCreate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.ApplicationCreate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.ApplicationCreate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroup();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAppVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTags();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMetadata();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSessionMetadata();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string group = 1;
 * @return {string}
 */
proto.contrast.api.dtm.ApplicationCreate.prototype.getGroup = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.ApplicationCreate} returns this
 */
proto.contrast.api.dtm.ApplicationCreate.prototype.setGroup = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string app_version = 2;
 * @return {string}
 */
proto.contrast.api.dtm.ApplicationCreate.prototype.getAppVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.ApplicationCreate} returns this
 */
proto.contrast.api.dtm.ApplicationCreate.prototype.setAppVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string tags = 3;
 * @return {string}
 */
proto.contrast.api.dtm.ApplicationCreate.prototype.getTags = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.ApplicationCreate} returns this
 */
proto.contrast.api.dtm.ApplicationCreate.prototype.setTags = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string code = 4;
 * @return {string}
 */
proto.contrast.api.dtm.ApplicationCreate.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.ApplicationCreate} returns this
 */
proto.contrast.api.dtm.ApplicationCreate.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string metadata = 5;
 * @return {string}
 */
proto.contrast.api.dtm.ApplicationCreate.prototype.getMetadata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.ApplicationCreate} returns this
 */
proto.contrast.api.dtm.ApplicationCreate.prototype.setMetadata = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string session_id = 6;
 * @return {string}
 */
proto.contrast.api.dtm.ApplicationCreate.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.ApplicationCreate} returns this
 */
proto.contrast.api.dtm.ApplicationCreate.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string session_metadata = 7;
 * @return {string}
 */
proto.contrast.api.dtm.ApplicationCreate.prototype.getSessionMetadata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.ApplicationCreate} returns this
 */
proto.contrast.api.dtm.ApplicationCreate.prototype.setSessionMetadata = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contrast.api.dtm.ApplicationUpdate.repeatedFields_ = [7,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.ApplicationUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.ApplicationUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.ApplicationUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.ApplicationUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    coverageLoc: jspb.Message.getFieldWithDefault(msg, 2, 0),
    platform: (f = msg.getPlatform()) && proto.contrast.api.dtm.Platform.toObject(includeInstance, f),
    view: (f = msg.getView()) && proto.contrast.api.dtm.View.toObject(includeInstance, f),
    technologiesMap: (f = msg.getTechnologiesMap()) ? f.toObject(includeInstance, undefined) : [],
    componentsList: jspb.Message.toObjectList(msg.getComponentsList(),
    proto.contrast.api.dtm.ArchitectureComponent.toObject, includeInstance),
    librariesMap: (f = msg.getLibrariesMap()) ? f.toObject(includeInstance, proto.contrast.api.dtm.Library.toObject) : [],
    routesList: jspb.Message.toObjectList(msg.getRoutesList(),
    proto.contrast.api.dtm.RouteCoverage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.ApplicationUpdate}
 */
proto.contrast.api.dtm.ApplicationUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.ApplicationUpdate;
  return proto.contrast.api.dtm.ApplicationUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.ApplicationUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.ApplicationUpdate}
 */
proto.contrast.api.dtm.ApplicationUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCoverageLoc(value);
      break;
    case 4:
      var value = new proto.contrast.api.dtm.Platform;
      reader.readMessage(value,proto.contrast.api.dtm.Platform.deserializeBinaryFromReader);
      msg.setPlatform(value);
      break;
    case 5:
      var value = new proto.contrast.api.dtm.View;
      reader.readMessage(value,proto.contrast.api.dtm.View.deserializeBinaryFromReader);
      msg.setView(value);
      break;
    case 6:
      var value = msg.getTechnologiesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBool, null, "", false);
         });
      break;
    case 7:
      var value = new proto.contrast.api.dtm.ArchitectureComponent;
      reader.readMessage(value,proto.contrast.api.dtm.ArchitectureComponent.deserializeBinaryFromReader);
      msg.addComponents(value);
      break;
    case 8:
      var value = msg.getLibrariesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.contrast.api.dtm.Library.deserializeBinaryFromReader, "", new proto.contrast.api.dtm.Library());
         });
      break;
    case 9:
      var value = new proto.contrast.api.dtm.RouteCoverage;
      reader.readMessage(value,proto.contrast.api.dtm.RouteCoverage.deserializeBinaryFromReader);
      msg.addRoutes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.ApplicationUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.ApplicationUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.ApplicationUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.ApplicationUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoverageLoc();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPlatform();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.contrast.api.dtm.Platform.serializeBinaryToWriter
    );
  }
  f = message.getView();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.contrast.api.dtm.View.serializeBinaryToWriter
    );
  }
  f = message.getTechnologiesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBool);
  }
  f = message.getComponentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.contrast.api.dtm.ArchitectureComponent.serializeBinaryToWriter
    );
  }
  f = message.getLibrariesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(8, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.contrast.api.dtm.Library.serializeBinaryToWriter);
  }
  f = message.getRoutesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.contrast.api.dtm.RouteCoverage.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 coverage_loc = 2;
 * @return {number}
 */
proto.contrast.api.dtm.ApplicationUpdate.prototype.getCoverageLoc = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.ApplicationUpdate} returns this
 */
proto.contrast.api.dtm.ApplicationUpdate.prototype.setCoverageLoc = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Platform platform = 4;
 * @return {?proto.contrast.api.dtm.Platform}
 */
proto.contrast.api.dtm.ApplicationUpdate.prototype.getPlatform = function() {
  return /** @type{?proto.contrast.api.dtm.Platform} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.Platform, 4));
};


/**
 * @param {?proto.contrast.api.dtm.Platform|undefined} value
 * @return {!proto.contrast.api.dtm.ApplicationUpdate} returns this
*/
proto.contrast.api.dtm.ApplicationUpdate.prototype.setPlatform = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.ApplicationUpdate} returns this
 */
proto.contrast.api.dtm.ApplicationUpdate.prototype.clearPlatform = function() {
  return this.setPlatform(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.ApplicationUpdate.prototype.hasPlatform = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional View view = 5;
 * @return {?proto.contrast.api.dtm.View}
 */
proto.contrast.api.dtm.ApplicationUpdate.prototype.getView = function() {
  return /** @type{?proto.contrast.api.dtm.View} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.View, 5));
};


/**
 * @param {?proto.contrast.api.dtm.View|undefined} value
 * @return {!proto.contrast.api.dtm.ApplicationUpdate} returns this
*/
proto.contrast.api.dtm.ApplicationUpdate.prototype.setView = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.ApplicationUpdate} returns this
 */
proto.contrast.api.dtm.ApplicationUpdate.prototype.clearView = function() {
  return this.setView(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.ApplicationUpdate.prototype.hasView = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * map<string, bool> technologies = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,boolean>}
 */
proto.contrast.api.dtm.ApplicationUpdate.prototype.getTechnologiesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,boolean>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.contrast.api.dtm.ApplicationUpdate} returns this
 */
proto.contrast.api.dtm.ApplicationUpdate.prototype.clearTechnologiesMap = function() {
  this.getTechnologiesMap().clear();
  return this;};


/**
 * repeated ArchitectureComponent components = 7;
 * @return {!Array<!proto.contrast.api.dtm.ArchitectureComponent>}
 */
proto.contrast.api.dtm.ApplicationUpdate.prototype.getComponentsList = function() {
  return /** @type{!Array<!proto.contrast.api.dtm.ArchitectureComponent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.dtm.ArchitectureComponent, 7));
};


/**
 * @param {!Array<!proto.contrast.api.dtm.ArchitectureComponent>} value
 * @return {!proto.contrast.api.dtm.ApplicationUpdate} returns this
*/
proto.contrast.api.dtm.ApplicationUpdate.prototype.setComponentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.contrast.api.dtm.ArchitectureComponent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.dtm.ArchitectureComponent}
 */
proto.contrast.api.dtm.ApplicationUpdate.prototype.addComponents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.contrast.api.dtm.ArchitectureComponent, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.dtm.ApplicationUpdate} returns this
 */
proto.contrast.api.dtm.ApplicationUpdate.prototype.clearComponentsList = function() {
  return this.setComponentsList([]);
};


/**
 * map<string, Library> libraries = 8;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.contrast.api.dtm.Library>}
 */
proto.contrast.api.dtm.ApplicationUpdate.prototype.getLibrariesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.contrast.api.dtm.Library>} */ (
      jspb.Message.getMapField(this, 8, opt_noLazyCreate,
      proto.contrast.api.dtm.Library));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.contrast.api.dtm.ApplicationUpdate} returns this
 */
proto.contrast.api.dtm.ApplicationUpdate.prototype.clearLibrariesMap = function() {
  this.getLibrariesMap().clear();
  return this;};


/**
 * repeated RouteCoverage routes = 9;
 * @return {!Array<!proto.contrast.api.dtm.RouteCoverage>}
 */
proto.contrast.api.dtm.ApplicationUpdate.prototype.getRoutesList = function() {
  return /** @type{!Array<!proto.contrast.api.dtm.RouteCoverage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.dtm.RouteCoverage, 9));
};


/**
 * @param {!Array<!proto.contrast.api.dtm.RouteCoverage>} value
 * @return {!proto.contrast.api.dtm.ApplicationUpdate} returns this
*/
proto.contrast.api.dtm.ApplicationUpdate.prototype.setRoutesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.contrast.api.dtm.RouteCoverage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.dtm.RouteCoverage}
 */
proto.contrast.api.dtm.ApplicationUpdate.prototype.addRoutes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.contrast.api.dtm.RouteCoverage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.dtm.ApplicationUpdate} returns this
 */
proto.contrast.api.dtm.ApplicationUpdate.prototype.clearRoutesList = function() {
  return this.setRoutesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contrast.api.dtm.Activity.repeatedFields_ = [9,12,15,16,19];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.Activity.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.Activity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.Activity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.Activity.toObject = function(includeInstance, msg) {
  var f, obj = {
    httpRequest: (f = msg.getHttpRequest()) && proto.contrast.api.dtm.HttpRequest.toObject(includeInstance, f),
    httpResponse: (f = msg.getHttpResponse()) && proto.contrast.api.dtm.HttpResponse.toObject(includeInstance, f),
    durationMs: jspb.Message.getFieldWithDefault(msg, 3, 0),
    queryCount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    technologiesMap: (f = msg.getTechnologiesMap()) ? f.toObject(includeInstance, undefined) : [],
    libraryUsagesMap: (f = msg.getLibraryUsagesMap()) ? f.toObject(includeInstance, proto.contrast.api.dtm.LibraryUsageUpdate.toObject) : [],
    architecturesList: jspb.Message.toObjectList(msg.getArchitecturesList(),
    proto.contrast.api.dtm.ArchitectureComponent.toObject, includeInstance),
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.contrast.api.dtm.AttackResult.toObject, includeInstance),
    findingsList: jspb.Message.toObjectList(msg.getFindingsList(),
    proto.contrast.api.dtm.Finding.toObject, includeInstance),
    controlsList: jspb.Message.toObjectList(msg.getControlsList(),
    proto.contrast.api.dtm.PossibleSecurityControl.toObject, includeInstance),
    findingTags: jspb.Message.getFieldWithDefault(msg, 17, ""),
    dynamicSourcesMap: (f = msg.getDynamicSourcesMap()) ? f.toObject(includeInstance, proto.contrast.api.dtm.DynamicSource.toObject) : [],
    routesList: jspb.Message.toObjectList(msg.getRoutesList(),
    proto.contrast.api.dtm.RouteCoverage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.Activity}
 */
proto.contrast.api.dtm.Activity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.Activity;
  return proto.contrast.api.dtm.Activity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.Activity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.Activity}
 */
proto.contrast.api.dtm.Activity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.contrast.api.dtm.HttpRequest;
      reader.readMessage(value,proto.contrast.api.dtm.HttpRequest.deserializeBinaryFromReader);
      msg.setHttpRequest(value);
      break;
    case 2:
      var value = new proto.contrast.api.dtm.HttpResponse;
      reader.readMessage(value,proto.contrast.api.dtm.HttpResponse.deserializeBinaryFromReader);
      msg.setHttpResponse(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDurationMs(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setQueryCount(value);
      break;
    case 7:
      var value = msg.getTechnologiesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBool, null, "", false);
         });
      break;
    case 8:
      var value = msg.getLibraryUsagesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.contrast.api.dtm.LibraryUsageUpdate.deserializeBinaryFromReader, "", new proto.contrast.api.dtm.LibraryUsageUpdate());
         });
      break;
    case 9:
      var value = new proto.contrast.api.dtm.ArchitectureComponent;
      reader.readMessage(value,proto.contrast.api.dtm.ArchitectureComponent.deserializeBinaryFromReader);
      msg.addArchitectures(value);
      break;
    case 12:
      var value = new proto.contrast.api.dtm.AttackResult;
      reader.readMessage(value,proto.contrast.api.dtm.AttackResult.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    case 15:
      var value = new proto.contrast.api.dtm.Finding;
      reader.readMessage(value,proto.contrast.api.dtm.Finding.deserializeBinaryFromReader);
      msg.addFindings(value);
      break;
    case 16:
      var value = new proto.contrast.api.dtm.PossibleSecurityControl;
      reader.readMessage(value,proto.contrast.api.dtm.PossibleSecurityControl.deserializeBinaryFromReader);
      msg.addControls(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setFindingTags(value);
      break;
    case 18:
      var value = msg.getDynamicSourcesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.contrast.api.dtm.DynamicSource.deserializeBinaryFromReader, "", new proto.contrast.api.dtm.DynamicSource());
         });
      break;
    case 19:
      var value = new proto.contrast.api.dtm.RouteCoverage;
      reader.readMessage(value,proto.contrast.api.dtm.RouteCoverage.deserializeBinaryFromReader);
      msg.addRoutes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.Activity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.Activity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.Activity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.Activity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHttpRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.contrast.api.dtm.HttpRequest.serializeBinaryToWriter
    );
  }
  f = message.getHttpResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.contrast.api.dtm.HttpResponse.serializeBinaryToWriter
    );
  }
  f = message.getDurationMs();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getQueryCount();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getTechnologiesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBool);
  }
  f = message.getLibraryUsagesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(8, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.contrast.api.dtm.LibraryUsageUpdate.serializeBinaryToWriter);
  }
  f = message.getArchitecturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.contrast.api.dtm.ArchitectureComponent.serializeBinaryToWriter
    );
  }
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.contrast.api.dtm.AttackResult.serializeBinaryToWriter
    );
  }
  f = message.getFindingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      proto.contrast.api.dtm.Finding.serializeBinaryToWriter
    );
  }
  f = message.getControlsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      16,
      f,
      proto.contrast.api.dtm.PossibleSecurityControl.serializeBinaryToWriter
    );
  }
  f = message.getFindingTags();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getDynamicSourcesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(18, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.contrast.api.dtm.DynamicSource.serializeBinaryToWriter);
  }
  f = message.getRoutesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      19,
      f,
      proto.contrast.api.dtm.RouteCoverage.serializeBinaryToWriter
    );
  }
};


/**
 * optional HttpRequest http_request = 1;
 * @return {?proto.contrast.api.dtm.HttpRequest}
 */
proto.contrast.api.dtm.Activity.prototype.getHttpRequest = function() {
  return /** @type{?proto.contrast.api.dtm.HttpRequest} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.HttpRequest, 1));
};


/**
 * @param {?proto.contrast.api.dtm.HttpRequest|undefined} value
 * @return {!proto.contrast.api.dtm.Activity} returns this
*/
proto.contrast.api.dtm.Activity.prototype.setHttpRequest = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.Activity} returns this
 */
proto.contrast.api.dtm.Activity.prototype.clearHttpRequest = function() {
  return this.setHttpRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.Activity.prototype.hasHttpRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional HttpResponse http_response = 2;
 * @return {?proto.contrast.api.dtm.HttpResponse}
 */
proto.contrast.api.dtm.Activity.prototype.getHttpResponse = function() {
  return /** @type{?proto.contrast.api.dtm.HttpResponse} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.HttpResponse, 2));
};


/**
 * @param {?proto.contrast.api.dtm.HttpResponse|undefined} value
 * @return {!proto.contrast.api.dtm.Activity} returns this
*/
proto.contrast.api.dtm.Activity.prototype.setHttpResponse = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.Activity} returns this
 */
proto.contrast.api.dtm.Activity.prototype.clearHttpResponse = function() {
  return this.setHttpResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.Activity.prototype.hasHttpResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 duration_ms = 3;
 * @return {number}
 */
proto.contrast.api.dtm.Activity.prototype.getDurationMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.Activity} returns this
 */
proto.contrast.api.dtm.Activity.prototype.setDurationMs = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 query_count = 5;
 * @return {number}
 */
proto.contrast.api.dtm.Activity.prototype.getQueryCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.Activity} returns this
 */
proto.contrast.api.dtm.Activity.prototype.setQueryCount = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * map<string, bool> technologies = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,boolean>}
 */
proto.contrast.api.dtm.Activity.prototype.getTechnologiesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,boolean>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.contrast.api.dtm.Activity} returns this
 */
proto.contrast.api.dtm.Activity.prototype.clearTechnologiesMap = function() {
  this.getTechnologiesMap().clear();
  return this;};


/**
 * map<string, LibraryUsageUpdate> library_usages = 8;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.contrast.api.dtm.LibraryUsageUpdate>}
 */
proto.contrast.api.dtm.Activity.prototype.getLibraryUsagesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.contrast.api.dtm.LibraryUsageUpdate>} */ (
      jspb.Message.getMapField(this, 8, opt_noLazyCreate,
      proto.contrast.api.dtm.LibraryUsageUpdate));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.contrast.api.dtm.Activity} returns this
 */
proto.contrast.api.dtm.Activity.prototype.clearLibraryUsagesMap = function() {
  this.getLibraryUsagesMap().clear();
  return this;};


/**
 * repeated ArchitectureComponent architectures = 9;
 * @return {!Array<!proto.contrast.api.dtm.ArchitectureComponent>}
 */
proto.contrast.api.dtm.Activity.prototype.getArchitecturesList = function() {
  return /** @type{!Array<!proto.contrast.api.dtm.ArchitectureComponent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.dtm.ArchitectureComponent, 9));
};


/**
 * @param {!Array<!proto.contrast.api.dtm.ArchitectureComponent>} value
 * @return {!proto.contrast.api.dtm.Activity} returns this
*/
proto.contrast.api.dtm.Activity.prototype.setArchitecturesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.contrast.api.dtm.ArchitectureComponent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.dtm.ArchitectureComponent}
 */
proto.contrast.api.dtm.Activity.prototype.addArchitectures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.contrast.api.dtm.ArchitectureComponent, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.dtm.Activity} returns this
 */
proto.contrast.api.dtm.Activity.prototype.clearArchitecturesList = function() {
  return this.setArchitecturesList([]);
};


/**
 * repeated AttackResult results = 12;
 * @return {!Array<!proto.contrast.api.dtm.AttackResult>}
 */
proto.contrast.api.dtm.Activity.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.contrast.api.dtm.AttackResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.dtm.AttackResult, 12));
};


/**
 * @param {!Array<!proto.contrast.api.dtm.AttackResult>} value
 * @return {!proto.contrast.api.dtm.Activity} returns this
*/
proto.contrast.api.dtm.Activity.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.contrast.api.dtm.AttackResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.dtm.AttackResult}
 */
proto.contrast.api.dtm.Activity.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.contrast.api.dtm.AttackResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.dtm.Activity} returns this
 */
proto.contrast.api.dtm.Activity.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};


/**
 * repeated Finding findings = 15;
 * @return {!Array<!proto.contrast.api.dtm.Finding>}
 */
proto.contrast.api.dtm.Activity.prototype.getFindingsList = function() {
  return /** @type{!Array<!proto.contrast.api.dtm.Finding>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.dtm.Finding, 15));
};


/**
 * @param {!Array<!proto.contrast.api.dtm.Finding>} value
 * @return {!proto.contrast.api.dtm.Activity} returns this
*/
proto.contrast.api.dtm.Activity.prototype.setFindingsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 15, value);
};


/**
 * @param {!proto.contrast.api.dtm.Finding=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.dtm.Finding}
 */
proto.contrast.api.dtm.Activity.prototype.addFindings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 15, opt_value, proto.contrast.api.dtm.Finding, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.dtm.Activity} returns this
 */
proto.contrast.api.dtm.Activity.prototype.clearFindingsList = function() {
  return this.setFindingsList([]);
};


/**
 * repeated PossibleSecurityControl controls = 16;
 * @return {!Array<!proto.contrast.api.dtm.PossibleSecurityControl>}
 */
proto.contrast.api.dtm.Activity.prototype.getControlsList = function() {
  return /** @type{!Array<!proto.contrast.api.dtm.PossibleSecurityControl>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.dtm.PossibleSecurityControl, 16));
};


/**
 * @param {!Array<!proto.contrast.api.dtm.PossibleSecurityControl>} value
 * @return {!proto.contrast.api.dtm.Activity} returns this
*/
proto.contrast.api.dtm.Activity.prototype.setControlsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 16, value);
};


/**
 * @param {!proto.contrast.api.dtm.PossibleSecurityControl=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.dtm.PossibleSecurityControl}
 */
proto.contrast.api.dtm.Activity.prototype.addControls = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.contrast.api.dtm.PossibleSecurityControl, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.dtm.Activity} returns this
 */
proto.contrast.api.dtm.Activity.prototype.clearControlsList = function() {
  return this.setControlsList([]);
};


/**
 * optional string finding_tags = 17;
 * @return {string}
 */
proto.contrast.api.dtm.Activity.prototype.getFindingTags = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Activity} returns this
 */
proto.contrast.api.dtm.Activity.prototype.setFindingTags = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * map<string, DynamicSource> dynamic_sources = 18;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.contrast.api.dtm.DynamicSource>}
 */
proto.contrast.api.dtm.Activity.prototype.getDynamicSourcesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.contrast.api.dtm.DynamicSource>} */ (
      jspb.Message.getMapField(this, 18, opt_noLazyCreate,
      proto.contrast.api.dtm.DynamicSource));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.contrast.api.dtm.Activity} returns this
 */
proto.contrast.api.dtm.Activity.prototype.clearDynamicSourcesMap = function() {
  this.getDynamicSourcesMap().clear();
  return this;};


/**
 * repeated RouteCoverage routes = 19;
 * @return {!Array<!proto.contrast.api.dtm.RouteCoverage>}
 */
proto.contrast.api.dtm.Activity.prototype.getRoutesList = function() {
  return /** @type{!Array<!proto.contrast.api.dtm.RouteCoverage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.dtm.RouteCoverage, 19));
};


/**
 * @param {!Array<!proto.contrast.api.dtm.RouteCoverage>} value
 * @return {!proto.contrast.api.dtm.Activity} returns this
*/
proto.contrast.api.dtm.Activity.prototype.setRoutesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 19, value);
};


/**
 * @param {!proto.contrast.api.dtm.RouteCoverage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.dtm.RouteCoverage}
 */
proto.contrast.api.dtm.Activity.prototype.addRoutes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 19, opt_value, proto.contrast.api.dtm.RouteCoverage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.dtm.Activity} returns this
 */
proto.contrast.api.dtm.Activity.prototype.clearRoutesList = function() {
  return this.setRoutesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contrast.api.dtm.Finding.repeatedFields_ = [7,11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.Finding.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.Finding.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.Finding} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.Finding.toObject = function(includeInstance, msg) {
  var f, obj = {
    hashCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    platform: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ruleId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    evidence: jspb.Message.getFieldWithDefault(msg, 4, ""),
    propertiesMap: (f = msg.getPropertiesMap()) ? f.toObject(includeInstance, undefined) : [],
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.contrast.api.dtm.TraceEvent.toObject, includeInstance),
    preflight: jspb.Message.getFieldWithDefault(msg, 8, ""),
    tags: jspb.Message.getFieldWithDefault(msg, 9, ""),
    version: jspb.Message.getFieldWithDefault(msg, 10, 0),
    routesList: jspb.Message.toObjectList(msg.getRoutesList(),
    proto.contrast.api.dtm.RouteCoverage.toObject, includeInstance),
    sessionId: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.Finding}
 */
proto.contrast.api.dtm.Finding.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.Finding;
  return proto.contrast.api.dtm.Finding.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.Finding} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.Finding}
 */
proto.contrast.api.dtm.Finding.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHashCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlatform(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRuleId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEvidence(value);
      break;
    case 6:
      var value = msg.getPropertiesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 7:
      var value = new proto.contrast.api.dtm.TraceEvent;
      reader.readMessage(value,proto.contrast.api.dtm.TraceEvent.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreflight(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setTags(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVersion(value);
      break;
    case 11:
      var value = new proto.contrast.api.dtm.RouteCoverage;
      reader.readMessage(value,proto.contrast.api.dtm.RouteCoverage.deserializeBinaryFromReader);
      msg.addRoutes(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.Finding.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.Finding.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.Finding} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.Finding.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHashCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlatform();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRuleId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEvidence();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPropertiesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.contrast.api.dtm.TraceEvent.serializeBinaryToWriter
    );
  }
  f = message.getPreflight();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getTags();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getRoutesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.contrast.api.dtm.RouteCoverage.serializeBinaryToWriter
    );
  }
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional string hash_code = 1;
 * @return {string}
 */
proto.contrast.api.dtm.Finding.prototype.getHashCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Finding} returns this
 */
proto.contrast.api.dtm.Finding.prototype.setHashCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string platform = 2;
 * @return {string}
 */
proto.contrast.api.dtm.Finding.prototype.getPlatform = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Finding} returns this
 */
proto.contrast.api.dtm.Finding.prototype.setPlatform = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string rule_id = 3;
 * @return {string}
 */
proto.contrast.api.dtm.Finding.prototype.getRuleId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Finding} returns this
 */
proto.contrast.api.dtm.Finding.prototype.setRuleId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string evidence = 4;
 * @return {string}
 */
proto.contrast.api.dtm.Finding.prototype.getEvidence = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Finding} returns this
 */
proto.contrast.api.dtm.Finding.prototype.setEvidence = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * map<string, string> properties = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.contrast.api.dtm.Finding.prototype.getPropertiesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.contrast.api.dtm.Finding} returns this
 */
proto.contrast.api.dtm.Finding.prototype.clearPropertiesMap = function() {
  this.getPropertiesMap().clear();
  return this;};


/**
 * repeated TraceEvent events = 7;
 * @return {!Array<!proto.contrast.api.dtm.TraceEvent>}
 */
proto.contrast.api.dtm.Finding.prototype.getEventsList = function() {
  return /** @type{!Array<!proto.contrast.api.dtm.TraceEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.dtm.TraceEvent, 7));
};


/**
 * @param {!Array<!proto.contrast.api.dtm.TraceEvent>} value
 * @return {!proto.contrast.api.dtm.Finding} returns this
*/
proto.contrast.api.dtm.Finding.prototype.setEventsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.contrast.api.dtm.TraceEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.dtm.TraceEvent}
 */
proto.contrast.api.dtm.Finding.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.contrast.api.dtm.TraceEvent, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.dtm.Finding} returns this
 */
proto.contrast.api.dtm.Finding.prototype.clearEventsList = function() {
  return this.setEventsList([]);
};


/**
 * optional string preflight = 8;
 * @return {string}
 */
proto.contrast.api.dtm.Finding.prototype.getPreflight = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Finding} returns this
 */
proto.contrast.api.dtm.Finding.prototype.setPreflight = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string tags = 9;
 * @return {string}
 */
proto.contrast.api.dtm.Finding.prototype.getTags = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Finding} returns this
 */
proto.contrast.api.dtm.Finding.prototype.setTags = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional int64 version = 10;
 * @return {number}
 */
proto.contrast.api.dtm.Finding.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.Finding} returns this
 */
proto.contrast.api.dtm.Finding.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * repeated RouteCoverage routes = 11;
 * @return {!Array<!proto.contrast.api.dtm.RouteCoverage>}
 */
proto.contrast.api.dtm.Finding.prototype.getRoutesList = function() {
  return /** @type{!Array<!proto.contrast.api.dtm.RouteCoverage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.dtm.RouteCoverage, 11));
};


/**
 * @param {!Array<!proto.contrast.api.dtm.RouteCoverage>} value
 * @return {!proto.contrast.api.dtm.Finding} returns this
*/
proto.contrast.api.dtm.Finding.prototype.setRoutesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.contrast.api.dtm.RouteCoverage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.dtm.RouteCoverage}
 */
proto.contrast.api.dtm.Finding.prototype.addRoutes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.contrast.api.dtm.RouteCoverage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.dtm.Finding} returns this
 */
proto.contrast.api.dtm.Finding.prototype.clearRoutesList = function() {
  return this.setRoutesList([]);
};


/**
 * optional string session_id = 12;
 * @return {string}
 */
proto.contrast.api.dtm.Finding.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Finding} returns this
 */
proto.contrast.api.dtm.Finding.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contrast.api.dtm.DynamicSource.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.DynamicSource.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.DynamicSource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.DynamicSource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.DynamicSource.toObject = function(includeInstance, msg) {
  var f, obj = {
    className: jspb.Message.getFieldWithDefault(msg, 1, ""),
    methodName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    instanceMethod: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    target: jspb.Message.getFieldWithDefault(msg, 4, ""),
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.contrast.api.dtm.TraceEvent.toObject, includeInstance),
    propertiesMap: (f = msg.getPropertiesMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.DynamicSource}
 */
proto.contrast.api.dtm.DynamicSource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.DynamicSource;
  return proto.contrast.api.dtm.DynamicSource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.DynamicSource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.DynamicSource}
 */
proto.contrast.api.dtm.DynamicSource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethodName(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInstanceMethod(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTarget(value);
      break;
    case 5:
      var value = new proto.contrast.api.dtm.TraceEvent;
      reader.readMessage(value,proto.contrast.api.dtm.TraceEvent.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    case 6:
      var value = msg.getPropertiesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.DynamicSource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.DynamicSource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.DynamicSource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.DynamicSource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClassName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMethodName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInstanceMethod();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getTarget();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.contrast.api.dtm.TraceEvent.serializeBinaryToWriter
    );
  }
  f = message.getPropertiesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string class_name = 1;
 * @return {string}
 */
proto.contrast.api.dtm.DynamicSource.prototype.getClassName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.DynamicSource} returns this
 */
proto.contrast.api.dtm.DynamicSource.prototype.setClassName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string method_name = 2;
 * @return {string}
 */
proto.contrast.api.dtm.DynamicSource.prototype.getMethodName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.DynamicSource} returns this
 */
proto.contrast.api.dtm.DynamicSource.prototype.setMethodName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool instance_method = 3;
 * @return {boolean}
 */
proto.contrast.api.dtm.DynamicSource.prototype.getInstanceMethod = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.dtm.DynamicSource} returns this
 */
proto.contrast.api.dtm.DynamicSource.prototype.setInstanceMethod = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string target = 4;
 * @return {string}
 */
proto.contrast.api.dtm.DynamicSource.prototype.getTarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.DynamicSource} returns this
 */
proto.contrast.api.dtm.DynamicSource.prototype.setTarget = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated TraceEvent events = 5;
 * @return {!Array<!proto.contrast.api.dtm.TraceEvent>}
 */
proto.contrast.api.dtm.DynamicSource.prototype.getEventsList = function() {
  return /** @type{!Array<!proto.contrast.api.dtm.TraceEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.dtm.TraceEvent, 5));
};


/**
 * @param {!Array<!proto.contrast.api.dtm.TraceEvent>} value
 * @return {!proto.contrast.api.dtm.DynamicSource} returns this
*/
proto.contrast.api.dtm.DynamicSource.prototype.setEventsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.contrast.api.dtm.TraceEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.dtm.TraceEvent}
 */
proto.contrast.api.dtm.DynamicSource.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.contrast.api.dtm.TraceEvent, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.dtm.DynamicSource} returns this
 */
proto.contrast.api.dtm.DynamicSource.prototype.clearEventsList = function() {
  return this.setEventsList([]);
};


/**
 * map<string, string> properties = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.contrast.api.dtm.DynamicSource.prototype.getPropertiesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.contrast.api.dtm.DynamicSource} returns this
 */
proto.contrast.api.dtm.DynamicSource.prototype.clearPropertiesMap = function() {
  this.getPropertiesMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.PossibleSecurityControl.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.PossibleSecurityControl.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.PossibleSecurityControl} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.PossibleSecurityControl.toObject = function(includeInstance, msg) {
  var f, obj = {
    api: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, ""),
    traits: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.PossibleSecurityControl}
 */
proto.contrast.api.dtm.PossibleSecurityControl.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.PossibleSecurityControl;
  return proto.contrast.api.dtm.PossibleSecurityControl.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.PossibleSecurityControl} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.PossibleSecurityControl}
 */
proto.contrast.api.dtm.PossibleSecurityControl.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setApi(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTraits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.PossibleSecurityControl.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.PossibleSecurityControl.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.PossibleSecurityControl} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.PossibleSecurityControl.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApi();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTraits();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string api = 1;
 * @return {string}
 */
proto.contrast.api.dtm.PossibleSecurityControl.prototype.getApi = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.PossibleSecurityControl} returns this
 */
proto.contrast.api.dtm.PossibleSecurityControl.prototype.setApi = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.contrast.api.dtm.PossibleSecurityControl.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.PossibleSecurityControl} returns this
 */
proto.contrast.api.dtm.PossibleSecurityControl.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 traits = 3;
 * @return {number}
 */
proto.contrast.api.dtm.PossibleSecurityControl.prototype.getTraits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.PossibleSecurityControl} returns this
 */
proto.contrast.api.dtm.PossibleSecurityControl.prototype.setTraits = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.View.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.View.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.View} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.View.toObject = function(includeInstance, msg) {
  var f, obj = {
    accessible: jspb.Message.getFieldWithDefault(msg, 1, 0),
    totalViewFields: jspb.Message.getFieldWithDefault(msg, 2, 0),
    lineCount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.View}
 */
proto.contrast.api.dtm.View.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.View;
  return proto.contrast.api.dtm.View.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.View} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.View}
 */
proto.contrast.api.dtm.View.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAccessible(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalViewFields(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLineCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.View.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.View.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.View} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.View.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccessible();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTotalViewFields();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getLineCount();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 accessible = 1;
 * @return {number}
 */
proto.contrast.api.dtm.View.prototype.getAccessible = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.View} returns this
 */
proto.contrast.api.dtm.View.prototype.setAccessible = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 total_view_fields = 2;
 * @return {number}
 */
proto.contrast.api.dtm.View.prototype.getTotalViewFields = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.View} returns this
 */
proto.contrast.api.dtm.View.prototype.setTotalViewFields = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 line_count = 3;
 * @return {number}
 */
proto.contrast.api.dtm.View.prototype.getLineCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.View} returns this
 */
proto.contrast.api.dtm.View.prototype.setLineCount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contrast.api.dtm.Platform.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.Platform.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.Platform.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.Platform} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.Platform.toObject = function(includeInstance, msg) {
  var f, obj = {
    major: jspb.Message.getFieldWithDefault(msg, 1, ""),
    minor: jspb.Message.getFieldWithDefault(msg, 2, ""),
    build: jspb.Message.getFieldWithDefault(msg, 3, ""),
    servicePack: jspb.Message.getFieldWithDefault(msg, 4, ""),
    updatesList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.Platform}
 */
proto.contrast.api.dtm.Platform.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.Platform;
  return proto.contrast.api.dtm.Platform.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.Platform} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.Platform}
 */
proto.contrast.api.dtm.Platform.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMajor(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMinor(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBuild(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setServicePack(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addUpdates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.Platform.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.Platform.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.Platform} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.Platform.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMajor();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMinor();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBuild();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getServicePack();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUpdatesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * optional string major = 1;
 * @return {string}
 */
proto.contrast.api.dtm.Platform.prototype.getMajor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Platform} returns this
 */
proto.contrast.api.dtm.Platform.prototype.setMajor = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string minor = 2;
 * @return {string}
 */
proto.contrast.api.dtm.Platform.prototype.getMinor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Platform} returns this
 */
proto.contrast.api.dtm.Platform.prototype.setMinor = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string build = 3;
 * @return {string}
 */
proto.contrast.api.dtm.Platform.prototype.getBuild = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Platform} returns this
 */
proto.contrast.api.dtm.Platform.prototype.setBuild = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string service_pack = 4;
 * @return {string}
 */
proto.contrast.api.dtm.Platform.prototype.getServicePack = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Platform} returns this
 */
proto.contrast.api.dtm.Platform.prototype.setServicePack = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated string updates = 5;
 * @return {!Array<string>}
 */
proto.contrast.api.dtm.Platform.prototype.getUpdatesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.contrast.api.dtm.Platform} returns this
 */
proto.contrast.api.dtm.Platform.prototype.setUpdatesList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.dtm.Platform} returns this
 */
proto.contrast.api.dtm.Platform.prototype.addUpdates = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.dtm.Platform} returns this
 */
proto.contrast.api.dtm.Platform.prototype.clearUpdatesList = function() {
  return this.setUpdatesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.ArchitectureComponent.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.ArchitectureComponent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.ArchitectureComponent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.ArchitectureComponent.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    vendor: jspb.Message.getFieldWithDefault(msg, 2, ""),
    url: jspb.Message.getFieldWithDefault(msg, 3, ""),
    remoteHost: jspb.Message.getFieldWithDefault(msg, 4, ""),
    remotePort: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.ArchitectureComponent}
 */
proto.contrast.api.dtm.ArchitectureComponent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.ArchitectureComponent;
  return proto.contrast.api.dtm.ArchitectureComponent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.ArchitectureComponent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.ArchitectureComponent}
 */
proto.contrast.api.dtm.ArchitectureComponent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVendor(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteHost(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRemotePort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.ArchitectureComponent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.ArchitectureComponent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.ArchitectureComponent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.ArchitectureComponent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVendor();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRemoteHost();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRemotePort();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.contrast.api.dtm.ArchitectureComponent.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.ArchitectureComponent} returns this
 */
proto.contrast.api.dtm.ArchitectureComponent.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string vendor = 2;
 * @return {string}
 */
proto.contrast.api.dtm.ArchitectureComponent.prototype.getVendor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.ArchitectureComponent} returns this
 */
proto.contrast.api.dtm.ArchitectureComponent.prototype.setVendor = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string url = 3;
 * @return {string}
 */
proto.contrast.api.dtm.ArchitectureComponent.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.ArchitectureComponent} returns this
 */
proto.contrast.api.dtm.ArchitectureComponent.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string remote_host = 4;
 * @return {string}
 */
proto.contrast.api.dtm.ArchitectureComponent.prototype.getRemoteHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.ArchitectureComponent} returns this
 */
proto.contrast.api.dtm.ArchitectureComponent.prototype.setRemoteHost = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 remote_port = 5;
 * @return {number}
 */
proto.contrast.api.dtm.ArchitectureComponent.prototype.getRemotePort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.ArchitectureComponent} returns this
 */
proto.contrast.api.dtm.ArchitectureComponent.prototype.setRemotePort = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.Library.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.Library.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.Library} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.Library.toObject = function(includeInstance, msg) {
  var f, obj = {
    hashCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    filePath: jspb.Message.getFieldWithDefault(msg, 2, ""),
    url: jspb.Message.getFieldWithDefault(msg, 3, ""),
    version: jspb.Message.getFieldWithDefault(msg, 4, ""),
    tloc: jspb.Message.getFieldWithDefault(msg, 5, 0),
    classCount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    usedClassCount: jspb.Message.getFieldWithDefault(msg, 7, 0),
    internalMs: jspb.Message.getFieldWithDefault(msg, 8, 0),
    externalMs: jspb.Message.getFieldWithDefault(msg, 9, 0),
    manifest: jspb.Message.getFieldWithDefault(msg, 10, ""),
    tags: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.Library}
 */
proto.contrast.api.dtm.Library.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.Library;
  return proto.contrast.api.dtm.Library.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.Library} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.Library}
 */
proto.contrast.api.dtm.Library.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHashCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilePath(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTloc(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setClassCount(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUsedClassCount(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInternalMs(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExternalMs(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setManifest(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.Library.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.Library.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.Library} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.Library.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHashCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFilePath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTloc();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getClassCount();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getUsedClassCount();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getInternalMs();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getExternalMs();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getManifest();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getTags();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional string hash_code = 1;
 * @return {string}
 */
proto.contrast.api.dtm.Library.prototype.getHashCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Library} returns this
 */
proto.contrast.api.dtm.Library.prototype.setHashCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string file_path = 2;
 * @return {string}
 */
proto.contrast.api.dtm.Library.prototype.getFilePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Library} returns this
 */
proto.contrast.api.dtm.Library.prototype.setFilePath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string url = 3;
 * @return {string}
 */
proto.contrast.api.dtm.Library.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Library} returns this
 */
proto.contrast.api.dtm.Library.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string version = 4;
 * @return {string}
 */
proto.contrast.api.dtm.Library.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Library} returns this
 */
proto.contrast.api.dtm.Library.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 tloc = 5;
 * @return {number}
 */
proto.contrast.api.dtm.Library.prototype.getTloc = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.Library} returns this
 */
proto.contrast.api.dtm.Library.prototype.setTloc = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 class_count = 6;
 * @return {number}
 */
proto.contrast.api.dtm.Library.prototype.getClassCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.Library} returns this
 */
proto.contrast.api.dtm.Library.prototype.setClassCount = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 used_class_count = 7;
 * @return {number}
 */
proto.contrast.api.dtm.Library.prototype.getUsedClassCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.Library} returns this
 */
proto.contrast.api.dtm.Library.prototype.setUsedClassCount = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 internal_ms = 8;
 * @return {number}
 */
proto.contrast.api.dtm.Library.prototype.getInternalMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.Library} returns this
 */
proto.contrast.api.dtm.Library.prototype.setInternalMs = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 external_ms = 9;
 * @return {number}
 */
proto.contrast.api.dtm.Library.prototype.getExternalMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.Library} returns this
 */
proto.contrast.api.dtm.Library.prototype.setExternalMs = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string manifest = 10;
 * @return {string}
 */
proto.contrast.api.dtm.Library.prototype.getManifest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Library} returns this
 */
proto.contrast.api.dtm.Library.prototype.setManifest = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string tags = 11;
 * @return {string}
 */
proto.contrast.api.dtm.Library.prototype.getTags = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Library} returns this
 */
proto.contrast.api.dtm.Library.prototype.setTags = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.LibraryUsageUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.LibraryUsageUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.LibraryUsageUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.LibraryUsageUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    count: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hashCode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    classNamesMap: (f = msg.getClassNamesMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.LibraryUsageUpdate}
 */
proto.contrast.api.dtm.LibraryUsageUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.LibraryUsageUpdate;
  return proto.contrast.api.dtm.LibraryUsageUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.LibraryUsageUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.LibraryUsageUpdate}
 */
proto.contrast.api.dtm.LibraryUsageUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHashCode(value);
      break;
    case 3:
      var value = msg.getClassNamesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBool, null, "", false);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.LibraryUsageUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.LibraryUsageUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.LibraryUsageUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.LibraryUsageUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getHashCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getClassNamesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBool);
  }
};


/**
 * optional int32 count = 1;
 * @return {number}
 */
proto.contrast.api.dtm.LibraryUsageUpdate.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.LibraryUsageUpdate} returns this
 */
proto.contrast.api.dtm.LibraryUsageUpdate.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string hash_code = 2;
 * @return {string}
 */
proto.contrast.api.dtm.LibraryUsageUpdate.prototype.getHashCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.LibraryUsageUpdate} returns this
 */
proto.contrast.api.dtm.LibraryUsageUpdate.prototype.setHashCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, bool> class_names = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,boolean>}
 */
proto.contrast.api.dtm.LibraryUsageUpdate.prototype.getClassNamesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,boolean>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.contrast.api.dtm.LibraryUsageUpdate} returns this
 */
proto.contrast.api.dtm.LibraryUsageUpdate.prototype.clearClassNamesMap = function() {
  this.getClassNamesMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.Address.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.Address.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.Address} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.Address.toObject = function(includeInstance, msg) {
  var f, obj = {
    ip: jspb.Message.getFieldWithDefault(msg, 1, ""),
    host: jspb.Message.getFieldWithDefault(msg, 2, ""),
    port: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.Address}
 */
proto.contrast.api.dtm.Address.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.Address;
  return proto.contrast.api.dtm.Address.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.Address} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.Address}
 */
proto.contrast.api.dtm.Address.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.Address.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.Address.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.Address} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.Address.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string ip = 1;
 * @return {string}
 */
proto.contrast.api.dtm.Address.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Address} returns this
 */
proto.contrast.api.dtm.Address.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string host = 2;
 * @return {string}
 */
proto.contrast.api.dtm.Address.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Address} returns this
 */
proto.contrast.api.dtm.Address.prototype.setHost = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 port = 3;
 * @return {number}
 */
proto.contrast.api.dtm.Address.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.Address} returns this
 */
proto.contrast.api.dtm.Address.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contrast.api.dtm.RawRequest.repeatedFields_ = [14,17];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.RawRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.RawRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.RawRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.RawRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timestampMs: jspb.Message.getFieldWithDefault(msg, 2, 0),
    requestLine: jspb.Message.getFieldWithDefault(msg, 4, ""),
    normalizedUri: jspb.Message.getFieldWithDefault(msg, 5, ""),
    clientIp: jspb.Message.getFieldWithDefault(msg, 6, ""),
    clientIpVersion: jspb.Message.getFieldWithDefault(msg, 7, 0),
    clientPort: jspb.Message.getFieldWithDefault(msg, 8, 0),
    serverIp: jspb.Message.getFieldWithDefault(msg, 10, ""),
    serverIpVersion: jspb.Message.getFieldWithDefault(msg, 11, 0),
    serverPort: jspb.Message.getFieldWithDefault(msg, 12, 0),
    requestHeadersList: jspb.Message.toObjectList(msg.getRequestHeadersList(),
    proto.contrast.api.dtm.SimplePair.toObject, includeInstance),
    multipartHeadersList: jspb.Message.toObjectList(msg.getMultipartHeadersList(),
    proto.contrast.api.dtm.SimplePair.toObject, includeInstance),
    requestBody: msg.getRequestBody_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.RawRequest}
 */
proto.contrast.api.dtm.RawRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.RawRequest;
  return proto.contrast.api.dtm.RawRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.RawRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.RawRequest}
 */
proto.contrast.api.dtm.RawRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestampMs(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestLine(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNormalizedUri(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientIp(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setClientIpVersion(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setClientPort(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerIp(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServerIpVersion(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServerPort(value);
      break;
    case 14:
      var value = new proto.contrast.api.dtm.SimplePair;
      reader.readMessage(value,proto.contrast.api.dtm.SimplePair.deserializeBinaryFromReader);
      msg.addRequestHeaders(value);
      break;
    case 17:
      var value = new proto.contrast.api.dtm.SimplePair;
      reader.readMessage(value,proto.contrast.api.dtm.SimplePair.deserializeBinaryFromReader);
      msg.addMultipartHeaders(value);
      break;
    case 16:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.RawRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.RawRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.RawRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.RawRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimestampMs();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getRequestLine();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getNormalizedUri();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getClientIp();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getClientIpVersion();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getClientPort();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getServerIp();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getServerIpVersion();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getServerPort();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getRequestHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.contrast.api.dtm.SimplePair.serializeBinaryToWriter
    );
  }
  f = message.getMultipartHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      17,
      f,
      proto.contrast.api.dtm.SimplePair.serializeBinaryToWriter
    );
  }
  f = message.getRequestBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      16,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.contrast.api.dtm.RawRequest.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.RawRequest} returns this
 */
proto.contrast.api.dtm.RawRequest.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 timestamp_ms = 2;
 * @return {number}
 */
proto.contrast.api.dtm.RawRequest.prototype.getTimestampMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.RawRequest} returns this
 */
proto.contrast.api.dtm.RawRequest.prototype.setTimestampMs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string request_line = 4;
 * @return {string}
 */
proto.contrast.api.dtm.RawRequest.prototype.getRequestLine = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.RawRequest} returns this
 */
proto.contrast.api.dtm.RawRequest.prototype.setRequestLine = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string normalized_uri = 5;
 * @return {string}
 */
proto.contrast.api.dtm.RawRequest.prototype.getNormalizedUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.RawRequest} returns this
 */
proto.contrast.api.dtm.RawRequest.prototype.setNormalizedUri = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string client_ip = 6;
 * @return {string}
 */
proto.contrast.api.dtm.RawRequest.prototype.getClientIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.RawRequest} returns this
 */
proto.contrast.api.dtm.RawRequest.prototype.setClientIp = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int32 client_ip_version = 7;
 * @return {number}
 */
proto.contrast.api.dtm.RawRequest.prototype.getClientIpVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.RawRequest} returns this
 */
proto.contrast.api.dtm.RawRequest.prototype.setClientIpVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 client_port = 8;
 * @return {number}
 */
proto.contrast.api.dtm.RawRequest.prototype.getClientPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.RawRequest} returns this
 */
proto.contrast.api.dtm.RawRequest.prototype.setClientPort = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string server_ip = 10;
 * @return {string}
 */
proto.contrast.api.dtm.RawRequest.prototype.getServerIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.RawRequest} returns this
 */
proto.contrast.api.dtm.RawRequest.prototype.setServerIp = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional int32 server_ip_version = 11;
 * @return {number}
 */
proto.contrast.api.dtm.RawRequest.prototype.getServerIpVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.RawRequest} returns this
 */
proto.contrast.api.dtm.RawRequest.prototype.setServerIpVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 server_port = 12;
 * @return {number}
 */
proto.contrast.api.dtm.RawRequest.prototype.getServerPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.RawRequest} returns this
 */
proto.contrast.api.dtm.RawRequest.prototype.setServerPort = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * repeated SimplePair request_headers = 14;
 * @return {!Array<!proto.contrast.api.dtm.SimplePair>}
 */
proto.contrast.api.dtm.RawRequest.prototype.getRequestHeadersList = function() {
  return /** @type{!Array<!proto.contrast.api.dtm.SimplePair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.dtm.SimplePair, 14));
};


/**
 * @param {!Array<!proto.contrast.api.dtm.SimplePair>} value
 * @return {!proto.contrast.api.dtm.RawRequest} returns this
*/
proto.contrast.api.dtm.RawRequest.prototype.setRequestHeadersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.contrast.api.dtm.SimplePair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.dtm.SimplePair}
 */
proto.contrast.api.dtm.RawRequest.prototype.addRequestHeaders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.contrast.api.dtm.SimplePair, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.dtm.RawRequest} returns this
 */
proto.contrast.api.dtm.RawRequest.prototype.clearRequestHeadersList = function() {
  return this.setRequestHeadersList([]);
};


/**
 * repeated SimplePair multipart_headers = 17;
 * @return {!Array<!proto.contrast.api.dtm.SimplePair>}
 */
proto.contrast.api.dtm.RawRequest.prototype.getMultipartHeadersList = function() {
  return /** @type{!Array<!proto.contrast.api.dtm.SimplePair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.dtm.SimplePair, 17));
};


/**
 * @param {!Array<!proto.contrast.api.dtm.SimplePair>} value
 * @return {!proto.contrast.api.dtm.RawRequest} returns this
*/
proto.contrast.api.dtm.RawRequest.prototype.setMultipartHeadersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 17, value);
};


/**
 * @param {!proto.contrast.api.dtm.SimplePair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.dtm.SimplePair}
 */
proto.contrast.api.dtm.RawRequest.prototype.addMultipartHeaders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 17, opt_value, proto.contrast.api.dtm.SimplePair, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.dtm.RawRequest} returns this
 */
proto.contrast.api.dtm.RawRequest.prototype.clearMultipartHeadersList = function() {
  return this.setMultipartHeadersList([]);
};


/**
 * optional bytes request_body = 16;
 * @return {string}
 */
proto.contrast.api.dtm.RawRequest.prototype.getRequestBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * optional bytes request_body = 16;
 * This is a type-conversion wrapper around `getRequestBody()`
 * @return {string}
 */
proto.contrast.api.dtm.RawRequest.prototype.getRequestBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestBody()));
};


/**
 * optional bytes request_body = 16;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestBody()`
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.RawRequest.prototype.getRequestBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestBody()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.contrast.api.dtm.RawRequest} returns this
 */
proto.contrast.api.dtm.RawRequest.prototype.setRequestBody = function(value) {
  return jspb.Message.setProto3BytesField(this, 16, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contrast.api.dtm.RawResponse.repeatedFields_ = [14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.RawResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.RawResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.RawResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.RawResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timestampMs: jspb.Message.getFieldWithDefault(msg, 2, 0),
    responseCode: jspb.Message.getFieldWithDefault(msg, 3, 0),
    responseHeadersList: jspb.Message.toObjectList(msg.getResponseHeadersList(),
    proto.contrast.api.dtm.SimplePair.toObject, includeInstance),
    responseBody: msg.getResponseBody_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.RawResponse}
 */
proto.contrast.api.dtm.RawResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.RawResponse;
  return proto.contrast.api.dtm.RawResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.RawResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.RawResponse}
 */
proto.contrast.api.dtm.RawResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestampMs(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResponseCode(value);
      break;
    case 14:
      var value = new proto.contrast.api.dtm.SimplePair;
      reader.readMessage(value,proto.contrast.api.dtm.SimplePair.deserializeBinaryFromReader);
      msg.addResponseHeaders(value);
      break;
    case 16:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setResponseBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.RawResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.RawResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.RawResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.RawResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimestampMs();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getResponseCode();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getResponseHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.contrast.api.dtm.SimplePair.serializeBinaryToWriter
    );
  }
  f = message.getResponseBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      16,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.contrast.api.dtm.RawResponse.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.RawResponse} returns this
 */
proto.contrast.api.dtm.RawResponse.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 timestamp_ms = 2;
 * @return {number}
 */
proto.contrast.api.dtm.RawResponse.prototype.getTimestampMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.RawResponse} returns this
 */
proto.contrast.api.dtm.RawResponse.prototype.setTimestampMs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 response_code = 3;
 * @return {number}
 */
proto.contrast.api.dtm.RawResponse.prototype.getResponseCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.RawResponse} returns this
 */
proto.contrast.api.dtm.RawResponse.prototype.setResponseCode = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated SimplePair response_headers = 14;
 * @return {!Array<!proto.contrast.api.dtm.SimplePair>}
 */
proto.contrast.api.dtm.RawResponse.prototype.getResponseHeadersList = function() {
  return /** @type{!Array<!proto.contrast.api.dtm.SimplePair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.dtm.SimplePair, 14));
};


/**
 * @param {!Array<!proto.contrast.api.dtm.SimplePair>} value
 * @return {!proto.contrast.api.dtm.RawResponse} returns this
*/
proto.contrast.api.dtm.RawResponse.prototype.setResponseHeadersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.contrast.api.dtm.SimplePair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.dtm.SimplePair}
 */
proto.contrast.api.dtm.RawResponse.prototype.addResponseHeaders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.contrast.api.dtm.SimplePair, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.dtm.RawResponse} returns this
 */
proto.contrast.api.dtm.RawResponse.prototype.clearResponseHeadersList = function() {
  return this.setResponseHeadersList([]);
};


/**
 * optional bytes response_body = 16;
 * @return {string}
 */
proto.contrast.api.dtm.RawResponse.prototype.getResponseBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * optional bytes response_body = 16;
 * This is a type-conversion wrapper around `getResponseBody()`
 * @return {string}
 */
proto.contrast.api.dtm.RawResponse.prototype.getResponseBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getResponseBody()));
};


/**
 * optional bytes response_body = 16;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getResponseBody()`
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.RawResponse.prototype.getResponseBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getResponseBody()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.contrast.api.dtm.RawResponse} returns this
 */
proto.contrast.api.dtm.RawResponse.prototype.setResponseBody = function(value) {
  return jspb.Message.setProto3BytesField(this, 16, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contrast.api.dtm.HttpRequest.repeatedFields_ = [51];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.HttpRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.HttpRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.HttpRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.HttpRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timestampMs: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sender: (f = msg.getSender()) && proto.contrast.api.dtm.Address.toObject(includeInstance, f),
    receiver: (f = msg.getReceiver()) && proto.contrast.api.dtm.Address.toObject(includeInstance, f),
    protocol: jspb.Message.getFieldWithDefault(msg, 5, ""),
    version: jspb.Message.getFieldWithDefault(msg, 6, ""),
    method: jspb.Message.getFieldWithDefault(msg, 7, ""),
    raw: jspb.Message.getFieldWithDefault(msg, 8, ""),
    parsedConnection: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    uri: jspb.Message.getFieldWithDefault(msg, 10, ""),
    normalizedUri: jspb.Message.getFieldWithDefault(msg, 11, ""),
    context: jspb.Message.getFieldWithDefault(msg, 12, ""),
    path: jspb.Message.getFieldWithDefault(msg, 13, ""),
    queryString: jspb.Message.getFieldWithDefault(msg, 14, ""),
    normalizedRequestParamsMap: (f = msg.getNormalizedRequestParamsMap()) ? f.toObject(includeInstance, proto.contrast.api.dtm.Pair.toObject) : [],
    multipartHeadersList: jspb.Message.toObjectList(msg.getMultipartHeadersList(),
    proto.contrast.api.dtm.SimplePair.toObject, includeInstance),
    requestHeadersMap: (f = msg.getRequestHeadersMap()) ? f.toObject(includeInstance, undefined) : [],
    parsedRequestHeaders: jspb.Message.getBooleanFieldWithDefault(msg, 21, false),
    normalizedRequestHeadersMap: (f = msg.getNormalizedRequestHeadersMap()) ? f.toObject(includeInstance, proto.contrast.api.dtm.Pair.toObject) : [],
    normalizedCookiesMap: (f = msg.getNormalizedCookiesMap()) ? f.toObject(includeInstance, proto.contrast.api.dtm.Pair.toObject) : [],
    requestBody: jspb.Message.getFieldWithDefault(msg, 30, ""),
    parsedRequestBody: jspb.Message.getBooleanFieldWithDefault(msg, 31, false),
    documentType: jspb.Message.getFieldWithDefault(msg, 32, 0),
    requestBodyBinary: msg.getRequestBodyBinary_asB64(),
    authentication: jspb.Message.getFieldWithDefault(msg, 40, 0),
    principal: jspb.Message.getFieldWithDefault(msg, 41, ""),
    serverInfo: jspb.Message.getFieldWithDefault(msg, 50, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.HttpRequest}
 */
proto.contrast.api.dtm.HttpRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.HttpRequest;
  return proto.contrast.api.dtm.HttpRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.HttpRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.HttpRequest}
 */
proto.contrast.api.dtm.HttpRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestampMs(value);
      break;
    case 3:
      var value = new proto.contrast.api.dtm.Address;
      reader.readMessage(value,proto.contrast.api.dtm.Address.deserializeBinaryFromReader);
      msg.setSender(value);
      break;
    case 4:
      var value = new proto.contrast.api.dtm.Address;
      reader.readMessage(value,proto.contrast.api.dtm.Address.deserializeBinaryFromReader);
      msg.setReceiver(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setProtocol(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setRaw(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setParsedConnection(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setUri(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setNormalizedUri(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setContext(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setQueryString(value);
      break;
    case 16:
      var value = msg.getNormalizedRequestParamsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.contrast.api.dtm.Pair.deserializeBinaryFromReader, "", new proto.contrast.api.dtm.Pair());
         });
      break;
    case 51:
      var value = new proto.contrast.api.dtm.SimplePair;
      reader.readMessage(value,proto.contrast.api.dtm.SimplePair.deserializeBinaryFromReader);
      msg.addMultipartHeaders(value);
      break;
    case 20:
      var value = msg.getRequestHeadersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 21:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setParsedRequestHeaders(value);
      break;
    case 22:
      var value = msg.getNormalizedRequestHeadersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.contrast.api.dtm.Pair.deserializeBinaryFromReader, "", new proto.contrast.api.dtm.Pair());
         });
      break;
    case 23:
      var value = msg.getNormalizedCookiesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.contrast.api.dtm.Pair.deserializeBinaryFromReader, "", new proto.contrast.api.dtm.Pair());
         });
      break;
    case 30:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestBody(value);
      break;
    case 31:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setParsedRequestBody(value);
      break;
    case 32:
      var value = /** @type {!proto.contrast.api.dtm.HttpRequest.DocumentType} */ (reader.readEnum());
      msg.setDocumentType(value);
      break;
    case 33:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestBodyBinary(value);
      break;
    case 40:
      var value = /** @type {!proto.contrast.api.dtm.HttpRequest.Authentication} */ (reader.readEnum());
      msg.setAuthentication(value);
      break;
    case 41:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrincipal(value);
      break;
    case 50:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.HttpRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.HttpRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.HttpRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.HttpRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimestampMs();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getSender();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.contrast.api.dtm.Address.serializeBinaryToWriter
    );
  }
  f = message.getReceiver();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.contrast.api.dtm.Address.serializeBinaryToWriter
    );
  }
  f = message.getProtocol();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getRaw();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getParsedConnection();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getUri();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getNormalizedUri();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getContext();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getQueryString();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getNormalizedRequestParamsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(16, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.contrast.api.dtm.Pair.serializeBinaryToWriter);
  }
  f = message.getMultipartHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      51,
      f,
      proto.contrast.api.dtm.SimplePair.serializeBinaryToWriter
    );
  }
  f = message.getRequestHeadersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(20, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getParsedRequestHeaders();
  if (f) {
    writer.writeBool(
      21,
      f
    );
  }
  f = message.getNormalizedRequestHeadersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(22, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.contrast.api.dtm.Pair.serializeBinaryToWriter);
  }
  f = message.getNormalizedCookiesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(23, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.contrast.api.dtm.Pair.serializeBinaryToWriter);
  }
  f = message.getRequestBody();
  if (f.length > 0) {
    writer.writeString(
      30,
      f
    );
  }
  f = message.getParsedRequestBody();
  if (f) {
    writer.writeBool(
      31,
      f
    );
  }
  f = message.getDocumentType();
  if (f !== 0.0) {
    writer.writeEnum(
      32,
      f
    );
  }
  f = message.getRequestBodyBinary_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      33,
      f
    );
  }
  f = message.getAuthentication();
  if (f !== 0.0) {
    writer.writeEnum(
      40,
      f
    );
  }
  f = message.getPrincipal();
  if (f.length > 0) {
    writer.writeString(
      41,
      f
    );
  }
  f = message.getServerInfo();
  if (f.length > 0) {
    writer.writeString(
      50,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.contrast.api.dtm.HttpRequest.Authentication = {
  UNAUTHENTICATED: 0,
  AUTHENTICATED: 1,
  LOGIN_FAIL: 2,
  LOGIN_SUCCESS: 3,
  LOGIN_UNKNOWN: 4
};

/**
 * @enum {number}
 */
proto.contrast.api.dtm.HttpRequest.DocumentType = {
  NORMAL: 0,
  JSON: 1,
  XML: 2
};

/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.contrast.api.dtm.HttpRequest.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.HttpRequest} returns this
 */
proto.contrast.api.dtm.HttpRequest.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 timestamp_ms = 2;
 * @return {number}
 */
proto.contrast.api.dtm.HttpRequest.prototype.getTimestampMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.HttpRequest} returns this
 */
proto.contrast.api.dtm.HttpRequest.prototype.setTimestampMs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Address sender = 3;
 * @return {?proto.contrast.api.dtm.Address}
 */
proto.contrast.api.dtm.HttpRequest.prototype.getSender = function() {
  return /** @type{?proto.contrast.api.dtm.Address} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.Address, 3));
};


/**
 * @param {?proto.contrast.api.dtm.Address|undefined} value
 * @return {!proto.contrast.api.dtm.HttpRequest} returns this
*/
proto.contrast.api.dtm.HttpRequest.prototype.setSender = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.HttpRequest} returns this
 */
proto.contrast.api.dtm.HttpRequest.prototype.clearSender = function() {
  return this.setSender(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.HttpRequest.prototype.hasSender = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Address receiver = 4;
 * @return {?proto.contrast.api.dtm.Address}
 */
proto.contrast.api.dtm.HttpRequest.prototype.getReceiver = function() {
  return /** @type{?proto.contrast.api.dtm.Address} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.Address, 4));
};


/**
 * @param {?proto.contrast.api.dtm.Address|undefined} value
 * @return {!proto.contrast.api.dtm.HttpRequest} returns this
*/
proto.contrast.api.dtm.HttpRequest.prototype.setReceiver = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.HttpRequest} returns this
 */
proto.contrast.api.dtm.HttpRequest.prototype.clearReceiver = function() {
  return this.setReceiver(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.HttpRequest.prototype.hasReceiver = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string protocol = 5;
 * @return {string}
 */
proto.contrast.api.dtm.HttpRequest.prototype.getProtocol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.HttpRequest} returns this
 */
proto.contrast.api.dtm.HttpRequest.prototype.setProtocol = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string version = 6;
 * @return {string}
 */
proto.contrast.api.dtm.HttpRequest.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.HttpRequest} returns this
 */
proto.contrast.api.dtm.HttpRequest.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string method = 7;
 * @return {string}
 */
proto.contrast.api.dtm.HttpRequest.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.HttpRequest} returns this
 */
proto.contrast.api.dtm.HttpRequest.prototype.setMethod = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string raw = 8;
 * @return {string}
 */
proto.contrast.api.dtm.HttpRequest.prototype.getRaw = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.HttpRequest} returns this
 */
proto.contrast.api.dtm.HttpRequest.prototype.setRaw = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional bool parsed_connection = 9;
 * @return {boolean}
 */
proto.contrast.api.dtm.HttpRequest.prototype.getParsedConnection = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.dtm.HttpRequest} returns this
 */
proto.contrast.api.dtm.HttpRequest.prototype.setParsedConnection = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional string uri = 10;
 * @return {string}
 */
proto.contrast.api.dtm.HttpRequest.prototype.getUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.HttpRequest} returns this
 */
proto.contrast.api.dtm.HttpRequest.prototype.setUri = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string normalized_uri = 11;
 * @return {string}
 */
proto.contrast.api.dtm.HttpRequest.prototype.getNormalizedUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.HttpRequest} returns this
 */
proto.contrast.api.dtm.HttpRequest.prototype.setNormalizedUri = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string context = 12;
 * @return {string}
 */
proto.contrast.api.dtm.HttpRequest.prototype.getContext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.HttpRequest} returns this
 */
proto.contrast.api.dtm.HttpRequest.prototype.setContext = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string path = 13;
 * @return {string}
 */
proto.contrast.api.dtm.HttpRequest.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.HttpRequest} returns this
 */
proto.contrast.api.dtm.HttpRequest.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string query_string = 14;
 * @return {string}
 */
proto.contrast.api.dtm.HttpRequest.prototype.getQueryString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.HttpRequest} returns this
 */
proto.contrast.api.dtm.HttpRequest.prototype.setQueryString = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * map<string, Pair> normalized_request_params = 16;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.contrast.api.dtm.Pair>}
 */
proto.contrast.api.dtm.HttpRequest.prototype.getNormalizedRequestParamsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.contrast.api.dtm.Pair>} */ (
      jspb.Message.getMapField(this, 16, opt_noLazyCreate,
      proto.contrast.api.dtm.Pair));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.contrast.api.dtm.HttpRequest} returns this
 */
proto.contrast.api.dtm.HttpRequest.prototype.clearNormalizedRequestParamsMap = function() {
  this.getNormalizedRequestParamsMap().clear();
  return this;};


/**
 * repeated SimplePair multipart_headers = 51;
 * @return {!Array<!proto.contrast.api.dtm.SimplePair>}
 */
proto.contrast.api.dtm.HttpRequest.prototype.getMultipartHeadersList = function() {
  return /** @type{!Array<!proto.contrast.api.dtm.SimplePair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.dtm.SimplePair, 51));
};


/**
 * @param {!Array<!proto.contrast.api.dtm.SimplePair>} value
 * @return {!proto.contrast.api.dtm.HttpRequest} returns this
*/
proto.contrast.api.dtm.HttpRequest.prototype.setMultipartHeadersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 51, value);
};


/**
 * @param {!proto.contrast.api.dtm.SimplePair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.dtm.SimplePair}
 */
proto.contrast.api.dtm.HttpRequest.prototype.addMultipartHeaders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 51, opt_value, proto.contrast.api.dtm.SimplePair, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.dtm.HttpRequest} returns this
 */
proto.contrast.api.dtm.HttpRequest.prototype.clearMultipartHeadersList = function() {
  return this.setMultipartHeadersList([]);
};


/**
 * map<string, string> request_headers = 20;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.contrast.api.dtm.HttpRequest.prototype.getRequestHeadersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 20, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.contrast.api.dtm.HttpRequest} returns this
 */
proto.contrast.api.dtm.HttpRequest.prototype.clearRequestHeadersMap = function() {
  this.getRequestHeadersMap().clear();
  return this;};


/**
 * optional bool parsed_request_headers = 21;
 * @return {boolean}
 */
proto.contrast.api.dtm.HttpRequest.prototype.getParsedRequestHeaders = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 21, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.dtm.HttpRequest} returns this
 */
proto.contrast.api.dtm.HttpRequest.prototype.setParsedRequestHeaders = function(value) {
  return jspb.Message.setProto3BooleanField(this, 21, value);
};


/**
 * map<string, Pair> normalized_request_headers = 22;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.contrast.api.dtm.Pair>}
 */
proto.contrast.api.dtm.HttpRequest.prototype.getNormalizedRequestHeadersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.contrast.api.dtm.Pair>} */ (
      jspb.Message.getMapField(this, 22, opt_noLazyCreate,
      proto.contrast.api.dtm.Pair));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.contrast.api.dtm.HttpRequest} returns this
 */
proto.contrast.api.dtm.HttpRequest.prototype.clearNormalizedRequestHeadersMap = function() {
  this.getNormalizedRequestHeadersMap().clear();
  return this;};


/**
 * map<string, Pair> normalized_cookies = 23;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.contrast.api.dtm.Pair>}
 */
proto.contrast.api.dtm.HttpRequest.prototype.getNormalizedCookiesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.contrast.api.dtm.Pair>} */ (
      jspb.Message.getMapField(this, 23, opt_noLazyCreate,
      proto.contrast.api.dtm.Pair));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.contrast.api.dtm.HttpRequest} returns this
 */
proto.contrast.api.dtm.HttpRequest.prototype.clearNormalizedCookiesMap = function() {
  this.getNormalizedCookiesMap().clear();
  return this;};


/**
 * optional string request_body = 30;
 * @return {string}
 */
proto.contrast.api.dtm.HttpRequest.prototype.getRequestBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 30, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.HttpRequest} returns this
 */
proto.contrast.api.dtm.HttpRequest.prototype.setRequestBody = function(value) {
  return jspb.Message.setProto3StringField(this, 30, value);
};


/**
 * optional bool parsed_request_body = 31;
 * @return {boolean}
 */
proto.contrast.api.dtm.HttpRequest.prototype.getParsedRequestBody = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 31, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.dtm.HttpRequest} returns this
 */
proto.contrast.api.dtm.HttpRequest.prototype.setParsedRequestBody = function(value) {
  return jspb.Message.setProto3BooleanField(this, 31, value);
};


/**
 * optional DocumentType document_type = 32;
 * @return {!proto.contrast.api.dtm.HttpRequest.DocumentType}
 */
proto.contrast.api.dtm.HttpRequest.prototype.getDocumentType = function() {
  return /** @type {!proto.contrast.api.dtm.HttpRequest.DocumentType} */ (jspb.Message.getFieldWithDefault(this, 32, 0));
};


/**
 * @param {!proto.contrast.api.dtm.HttpRequest.DocumentType} value
 * @return {!proto.contrast.api.dtm.HttpRequest} returns this
 */
proto.contrast.api.dtm.HttpRequest.prototype.setDocumentType = function(value) {
  return jspb.Message.setProto3EnumField(this, 32, value);
};


/**
 * optional bytes request_body_binary = 33;
 * @return {string}
 */
proto.contrast.api.dtm.HttpRequest.prototype.getRequestBodyBinary = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 33, ""));
};


/**
 * optional bytes request_body_binary = 33;
 * This is a type-conversion wrapper around `getRequestBodyBinary()`
 * @return {string}
 */
proto.contrast.api.dtm.HttpRequest.prototype.getRequestBodyBinary_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestBodyBinary()));
};


/**
 * optional bytes request_body_binary = 33;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestBodyBinary()`
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.HttpRequest.prototype.getRequestBodyBinary_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestBodyBinary()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.contrast.api.dtm.HttpRequest} returns this
 */
proto.contrast.api.dtm.HttpRequest.prototype.setRequestBodyBinary = function(value) {
  return jspb.Message.setProto3BytesField(this, 33, value);
};


/**
 * optional Authentication authentication = 40;
 * @return {!proto.contrast.api.dtm.HttpRequest.Authentication}
 */
proto.contrast.api.dtm.HttpRequest.prototype.getAuthentication = function() {
  return /** @type {!proto.contrast.api.dtm.HttpRequest.Authentication} */ (jspb.Message.getFieldWithDefault(this, 40, 0));
};


/**
 * @param {!proto.contrast.api.dtm.HttpRequest.Authentication} value
 * @return {!proto.contrast.api.dtm.HttpRequest} returns this
 */
proto.contrast.api.dtm.HttpRequest.prototype.setAuthentication = function(value) {
  return jspb.Message.setProto3EnumField(this, 40, value);
};


/**
 * optional string principal = 41;
 * @return {string}
 */
proto.contrast.api.dtm.HttpRequest.prototype.getPrincipal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 41, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.HttpRequest} returns this
 */
proto.contrast.api.dtm.HttpRequest.prototype.setPrincipal = function(value) {
  return jspb.Message.setProto3StringField(this, 41, value);
};


/**
 * optional string server_info = 50;
 * @return {string}
 */
proto.contrast.api.dtm.HttpRequest.prototype.getServerInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 50, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.HttpRequest} returns this
 */
proto.contrast.api.dtm.HttpRequest.prototype.setServerInfo = function(value) {
  return jspb.Message.setProto3StringField(this, 50, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.RpcStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.RpcStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.RpcStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.RpcStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    msg: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.RpcStatus}
 */
proto.contrast.api.dtm.RpcStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.RpcStatus;
  return proto.contrast.api.dtm.RpcStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.RpcStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.RpcStatus}
 */
proto.contrast.api.dtm.RpcStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.contrast.api.dtm.RpcStatus.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.RpcStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.RpcStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.RpcStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.RpcStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.contrast.api.dtm.RpcStatus.Code = {
  OK: 0,
  UNKNOWN: 1
};

/**
 * optional Code code = 1;
 * @return {!proto.contrast.api.dtm.RpcStatus.Code}
 */
proto.contrast.api.dtm.RpcStatus.prototype.getCode = function() {
  return /** @type {!proto.contrast.api.dtm.RpcStatus.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.contrast.api.dtm.RpcStatus.Code} value
 * @return {!proto.contrast.api.dtm.RpcStatus} returns this
 */
proto.contrast.api.dtm.RpcStatus.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string msg = 2;
 * @return {string}
 */
proto.contrast.api.dtm.RpcStatus.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.RpcStatus} returns this
 */
proto.contrast.api.dtm.RpcStatus.prototype.setMsg = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.SqliSinkRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.SqliSinkRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.SqliSinkRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.SqliSinkRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dialect: jspb.Message.getFieldWithDefault(msg, 2, 0),
    query: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.SqliSinkRequest}
 */
proto.contrast.api.dtm.SqliSinkRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.SqliSinkRequest;
  return proto.contrast.api.dtm.SqliSinkRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.SqliSinkRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.SqliSinkRequest}
 */
proto.contrast.api.dtm.SqliSinkRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {!proto.contrast.api.dtm.SqliSinkRequest.Dialect} */ (reader.readEnum());
      msg.setDialect(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.SqliSinkRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.SqliSinkRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.SqliSinkRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.SqliSinkRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDialect();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.contrast.api.dtm.SqliSinkRequest.Dialect = {
  MYSQL: 0,
  POSTGRESQL: 1,
  UNKNOWN: 99
};

/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.contrast.api.dtm.SqliSinkRequest.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.SqliSinkRequest} returns this
 */
proto.contrast.api.dtm.SqliSinkRequest.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Dialect dialect = 2;
 * @return {!proto.contrast.api.dtm.SqliSinkRequest.Dialect}
 */
proto.contrast.api.dtm.SqliSinkRequest.prototype.getDialect = function() {
  return /** @type {!proto.contrast.api.dtm.SqliSinkRequest.Dialect} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.contrast.api.dtm.SqliSinkRequest.Dialect} value
 * @return {!proto.contrast.api.dtm.SqliSinkRequest} returns this
 */
proto.contrast.api.dtm.SqliSinkRequest.prototype.setDialect = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string query = 3;
 * @return {string}
 */
proto.contrast.api.dtm.SqliSinkRequest.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.SqliSinkRequest} returns this
 */
proto.contrast.api.dtm.SqliSinkRequest.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.contrast.api.dtm.SqliSinkResponse.oneofGroups_ = [[10,11]];

/**
 * @enum {number}
 */
proto.contrast.api.dtm.SqliSinkResponse.FindingCase = {
  FINDING_NOT_SET: 0,
  SQLI: 10,
  SQLI_SEMANTIC: 11
};

/**
 * @return {proto.contrast.api.dtm.SqliSinkResponse.FindingCase}
 */
proto.contrast.api.dtm.SqliSinkResponse.prototype.getFindingCase = function() {
  return /** @type {proto.contrast.api.dtm.SqliSinkResponse.FindingCase} */(jspb.Message.computeOneofCase(this, proto.contrast.api.dtm.SqliSinkResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.SqliSinkResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.SqliSinkResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.SqliSinkResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.SqliSinkResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.contrast.api.dtm.RpcStatus.toObject(includeInstance, f),
    userInput: (f = msg.getUserInput()) && proto.contrast.api.dtm.UserInput.toObject(includeInstance, f),
    sqli: (f = msg.getSqli()) && proto.contrast.api.dtm.SqlInjectionDetails.toObject(includeInstance, f),
    sqliSemantic: (f = msg.getSqliSemantic()) && proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.SqliSinkResponse}
 */
proto.contrast.api.dtm.SqliSinkResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.SqliSinkResponse;
  return proto.contrast.api.dtm.SqliSinkResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.SqliSinkResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.SqliSinkResponse}
 */
proto.contrast.api.dtm.SqliSinkResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.contrast.api.dtm.RpcStatus;
      reader.readMessage(value,proto.contrast.api.dtm.RpcStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 3:
      var value = new proto.contrast.api.dtm.UserInput;
      reader.readMessage(value,proto.contrast.api.dtm.UserInput.deserializeBinaryFromReader);
      msg.setUserInput(value);
      break;
    case 10:
      var value = new proto.contrast.api.dtm.SqlInjectionDetails;
      reader.readMessage(value,proto.contrast.api.dtm.SqlInjectionDetails.deserializeBinaryFromReader);
      msg.setSqli(value);
      break;
    case 11:
      var value = new proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails;
      reader.readMessage(value,proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails.deserializeBinaryFromReader);
      msg.setSqliSemantic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.SqliSinkResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.SqliSinkResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.SqliSinkResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.SqliSinkResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.contrast.api.dtm.RpcStatus.serializeBinaryToWriter
    );
  }
  f = message.getUserInput();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.contrast.api.dtm.UserInput.serializeBinaryToWriter
    );
  }
  f = message.getSqli();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.contrast.api.dtm.SqlInjectionDetails.serializeBinaryToWriter
    );
  }
  f = message.getSqliSemantic();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails.serializeBinaryToWriter
    );
  }
};


/**
 * optional RpcStatus status = 1;
 * @return {?proto.contrast.api.dtm.RpcStatus}
 */
proto.contrast.api.dtm.SqliSinkResponse.prototype.getStatus = function() {
  return /** @type{?proto.contrast.api.dtm.RpcStatus} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.RpcStatus, 1));
};


/**
 * @param {?proto.contrast.api.dtm.RpcStatus|undefined} value
 * @return {!proto.contrast.api.dtm.SqliSinkResponse} returns this
*/
proto.contrast.api.dtm.SqliSinkResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.SqliSinkResponse} returns this
 */
proto.contrast.api.dtm.SqliSinkResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.SqliSinkResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UserInput user_input = 3;
 * @return {?proto.contrast.api.dtm.UserInput}
 */
proto.contrast.api.dtm.SqliSinkResponse.prototype.getUserInput = function() {
  return /** @type{?proto.contrast.api.dtm.UserInput} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.UserInput, 3));
};


/**
 * @param {?proto.contrast.api.dtm.UserInput|undefined} value
 * @return {!proto.contrast.api.dtm.SqliSinkResponse} returns this
*/
proto.contrast.api.dtm.SqliSinkResponse.prototype.setUserInput = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.SqliSinkResponse} returns this
 */
proto.contrast.api.dtm.SqliSinkResponse.prototype.clearUserInput = function() {
  return this.setUserInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.SqliSinkResponse.prototype.hasUserInput = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SqlInjectionDetails sqli = 10;
 * @return {?proto.contrast.api.dtm.SqlInjectionDetails}
 */
proto.contrast.api.dtm.SqliSinkResponse.prototype.getSqli = function() {
  return /** @type{?proto.contrast.api.dtm.SqlInjectionDetails} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.SqlInjectionDetails, 10));
};


/**
 * @param {?proto.contrast.api.dtm.SqlInjectionDetails|undefined} value
 * @return {!proto.contrast.api.dtm.SqliSinkResponse} returns this
*/
proto.contrast.api.dtm.SqliSinkResponse.prototype.setSqli = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.contrast.api.dtm.SqliSinkResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.SqliSinkResponse} returns this
 */
proto.contrast.api.dtm.SqliSinkResponse.prototype.clearSqli = function() {
  return this.setSqli(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.SqliSinkResponse.prototype.hasSqli = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional SqlInjectionSemanticAnalysisDetails sqli_semantic = 11;
 * @return {?proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails}
 */
proto.contrast.api.dtm.SqliSinkResponse.prototype.getSqliSemantic = function() {
  return /** @type{?proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails, 11));
};


/**
 * @param {?proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails|undefined} value
 * @return {!proto.contrast.api.dtm.SqliSinkResponse} returns this
*/
proto.contrast.api.dtm.SqliSinkResponse.prototype.setSqliSemantic = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.contrast.api.dtm.SqliSinkResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.SqliSinkResponse} returns this
 */
proto.contrast.api.dtm.SqliSinkResponse.prototype.clearSqliSemantic = function() {
  return this.setSqliSemantic(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.SqliSinkResponse.prototype.hasSqliSemantic = function() {
  return jspb.Message.getField(this, 11) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.HttpResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.HttpResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.HttpResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.HttpResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timestampMs: jspb.Message.getFieldWithDefault(msg, 2, 0),
    responseCode: jspb.Message.getFieldWithDefault(msg, 3, 0),
    responseHeadersMap: (f = msg.getResponseHeadersMap()) ? f.toObject(includeInstance, undefined) : [],
    parsedResponseHeaders: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    normalizedResponseHeadersMap: (f = msg.getNormalizedResponseHeadersMap()) ? f.toObject(includeInstance, proto.contrast.api.dtm.Pair.toObject) : [],
    responseBody: jspb.Message.getFieldWithDefault(msg, 10, ""),
    parsedResponseBody: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    documentType: jspb.Message.getFieldWithDefault(msg, 12, 0),
    responseBodyBinary: msg.getResponseBodyBinary_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.HttpResponse}
 */
proto.contrast.api.dtm.HttpResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.HttpResponse;
  return proto.contrast.api.dtm.HttpResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.HttpResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.HttpResponse}
 */
proto.contrast.api.dtm.HttpResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestampMs(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResponseCode(value);
      break;
    case 4:
      var value = msg.getResponseHeadersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setParsedResponseHeaders(value);
      break;
    case 6:
      var value = msg.getNormalizedResponseHeadersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.contrast.api.dtm.Pair.deserializeBinaryFromReader, "", new proto.contrast.api.dtm.Pair());
         });
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponseBody(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setParsedResponseBody(value);
      break;
    case 12:
      var value = /** @type {!proto.contrast.api.dtm.HttpRequest.DocumentType} */ (reader.readEnum());
      msg.setDocumentType(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setResponseBodyBinary(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.HttpResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.HttpResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.HttpResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.HttpResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimestampMs();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getResponseCode();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getResponseHeadersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getParsedResponseHeaders();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getNormalizedResponseHeadersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.contrast.api.dtm.Pair.serializeBinaryToWriter);
  }
  f = message.getResponseBody();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getParsedResponseBody();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getDocumentType();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
  f = message.getResponseBodyBinary_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.contrast.api.dtm.HttpResponse.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.HttpResponse} returns this
 */
proto.contrast.api.dtm.HttpResponse.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 timestamp_ms = 2;
 * @return {number}
 */
proto.contrast.api.dtm.HttpResponse.prototype.getTimestampMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.HttpResponse} returns this
 */
proto.contrast.api.dtm.HttpResponse.prototype.setTimestampMs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 response_code = 3;
 * @return {number}
 */
proto.contrast.api.dtm.HttpResponse.prototype.getResponseCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.HttpResponse} returns this
 */
proto.contrast.api.dtm.HttpResponse.prototype.setResponseCode = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * map<string, string> response_headers = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.contrast.api.dtm.HttpResponse.prototype.getResponseHeadersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.contrast.api.dtm.HttpResponse} returns this
 */
proto.contrast.api.dtm.HttpResponse.prototype.clearResponseHeadersMap = function() {
  this.getResponseHeadersMap().clear();
  return this;};


/**
 * optional bool parsed_response_headers = 5;
 * @return {boolean}
 */
proto.contrast.api.dtm.HttpResponse.prototype.getParsedResponseHeaders = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.dtm.HttpResponse} returns this
 */
proto.contrast.api.dtm.HttpResponse.prototype.setParsedResponseHeaders = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * map<string, Pair> normalized_response_headers = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.contrast.api.dtm.Pair>}
 */
proto.contrast.api.dtm.HttpResponse.prototype.getNormalizedResponseHeadersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.contrast.api.dtm.Pair>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      proto.contrast.api.dtm.Pair));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.contrast.api.dtm.HttpResponse} returns this
 */
proto.contrast.api.dtm.HttpResponse.prototype.clearNormalizedResponseHeadersMap = function() {
  this.getNormalizedResponseHeadersMap().clear();
  return this;};


/**
 * optional string response_body = 10;
 * @return {string}
 */
proto.contrast.api.dtm.HttpResponse.prototype.getResponseBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.HttpResponse} returns this
 */
proto.contrast.api.dtm.HttpResponse.prototype.setResponseBody = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional bool parsed_response_body = 11;
 * @return {boolean}
 */
proto.contrast.api.dtm.HttpResponse.prototype.getParsedResponseBody = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.dtm.HttpResponse} returns this
 */
proto.contrast.api.dtm.HttpResponse.prototype.setParsedResponseBody = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional HttpRequest.DocumentType document_type = 12;
 * @return {!proto.contrast.api.dtm.HttpRequest.DocumentType}
 */
proto.contrast.api.dtm.HttpResponse.prototype.getDocumentType = function() {
  return /** @type {!proto.contrast.api.dtm.HttpRequest.DocumentType} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {!proto.contrast.api.dtm.HttpRequest.DocumentType} value
 * @return {!proto.contrast.api.dtm.HttpResponse} returns this
 */
proto.contrast.api.dtm.HttpResponse.prototype.setDocumentType = function(value) {
  return jspb.Message.setProto3EnumField(this, 12, value);
};


/**
 * optional bytes response_body_binary = 13;
 * @return {string}
 */
proto.contrast.api.dtm.HttpResponse.prototype.getResponseBodyBinary = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes response_body_binary = 13;
 * This is a type-conversion wrapper around `getResponseBodyBinary()`
 * @return {string}
 */
proto.contrast.api.dtm.HttpResponse.prototype.getResponseBodyBinary_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getResponseBodyBinary()));
};


/**
 * optional bytes response_body_binary = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getResponseBodyBinary()`
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.HttpResponse.prototype.getResponseBodyBinary_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getResponseBodyBinary()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.contrast.api.dtm.HttpResponse} returns this
 */
proto.contrast.api.dtm.HttpResponse.prototype.setResponseBodyBinary = function(value) {
  return jspb.Message.setProto3BytesField(this, 13, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.SimplePair.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.SimplePair.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.SimplePair} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.SimplePair.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.SimplePair}
 */
proto.contrast.api.dtm.SimplePair.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.SimplePair;
  return proto.contrast.api.dtm.SimplePair.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.SimplePair} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.SimplePair}
 */
proto.contrast.api.dtm.SimplePair.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.SimplePair.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.SimplePair.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.SimplePair} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.SimplePair.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.contrast.api.dtm.SimplePair.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.SimplePair} returns this
 */
proto.contrast.api.dtm.SimplePair.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.contrast.api.dtm.SimplePair.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.SimplePair} returns this
 */
proto.contrast.api.dtm.SimplePair.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contrast.api.dtm.Pair.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.Pair.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.Pair.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.Pair} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.Pair.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    valuesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.Pair}
 */
proto.contrast.api.dtm.Pair.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.Pair;
  return proto.contrast.api.dtm.Pair.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.Pair} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.Pair}
 */
proto.contrast.api.dtm.Pair.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.Pair.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.Pair.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.Pair} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.Pair.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.contrast.api.dtm.Pair.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Pair} returns this
 */
proto.contrast.api.dtm.Pair.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string values = 2;
 * @return {!Array<string>}
 */
proto.contrast.api.dtm.Pair.prototype.getValuesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.contrast.api.dtm.Pair} returns this
 */
proto.contrast.api.dtm.Pair.prototype.setValuesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.dtm.Pair} returns this
 */
proto.contrast.api.dtm.Pair.prototype.addValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.dtm.Pair} returns this
 */
proto.contrast.api.dtm.Pair.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contrast.api.dtm.AttackResult.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.AttackResult.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.AttackResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.AttackResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.AttackResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ruleId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    samplesList: jspb.Message.toObjectList(msg.getSamplesList(),
    proto.contrast.api.dtm.RaspRuleSample.toObject, includeInstance),
    tags: jspb.Message.getFieldWithDefault(msg, 7, ""),
    accUpdatedMs: jspb.Message.getFieldWithDefault(msg, 16, 0),
    accLimit: jspb.Message.getFieldWithDefault(msg, 17, 0),
    accWindowMs: jspb.Message.getFieldWithDefault(msg, 18, 0),
    accCount: jspb.Message.getFieldWithDefault(msg, 19, 0),
    accMode: jspb.Message.getFieldWithDefault(msg, 21, ""),
    accMsg: jspb.Message.getFieldWithDefault(msg, 22, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.AttackResult}
 */
proto.contrast.api.dtm.AttackResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.AttackResult;
  return proto.contrast.api.dtm.AttackResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.AttackResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.AttackResult}
 */
proto.contrast.api.dtm.AttackResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.contrast.api.dtm.AttackResult.ResponseType} */ (reader.readEnum());
      msg.setResponse(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRuleId(value);
      break;
    case 6:
      var value = new proto.contrast.api.dtm.RaspRuleSample;
      reader.readMessage(value,proto.contrast.api.dtm.RaspRuleSample.deserializeBinaryFromReader);
      msg.addSamples(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTags(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAccUpdatedMs(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAccLimit(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAccWindowMs(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAccCount(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccMode(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.AttackResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.AttackResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.AttackResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.AttackResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getRuleId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSamplesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.contrast.api.dtm.RaspRuleSample.serializeBinaryToWriter
    );
  }
  f = message.getTags();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getAccUpdatedMs();
  if (f !== 0) {
    writer.writeInt64(
      16,
      f
    );
  }
  f = message.getAccLimit();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getAccWindowMs();
  if (f !== 0) {
    writer.writeInt64(
      18,
      f
    );
  }
  f = message.getAccCount();
  if (f !== 0) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = message.getAccMode();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getAccMsg();
  if (f.length > 0) {
    writer.writeString(
      22,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.contrast.api.dtm.AttackResult.ResponseType = {
  NO_ACTION: 0,
  BLOCKED: 1,
  MONITORED: 2,
  PROBED: 3,
  BLOCKED_AT_PERIMETER: 4,
  AGGREGATED: 5
};

/**
 * optional ResponseType response = 1;
 * @return {!proto.contrast.api.dtm.AttackResult.ResponseType}
 */
proto.contrast.api.dtm.AttackResult.prototype.getResponse = function() {
  return /** @type {!proto.contrast.api.dtm.AttackResult.ResponseType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.contrast.api.dtm.AttackResult.ResponseType} value
 * @return {!proto.contrast.api.dtm.AttackResult} returns this
 */
proto.contrast.api.dtm.AttackResult.prototype.setResponse = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string rule_id = 2;
 * @return {string}
 */
proto.contrast.api.dtm.AttackResult.prototype.getRuleId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.AttackResult} returns this
 */
proto.contrast.api.dtm.AttackResult.prototype.setRuleId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated RaspRuleSample samples = 6;
 * @return {!Array<!proto.contrast.api.dtm.RaspRuleSample>}
 */
proto.contrast.api.dtm.AttackResult.prototype.getSamplesList = function() {
  return /** @type{!Array<!proto.contrast.api.dtm.RaspRuleSample>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.dtm.RaspRuleSample, 6));
};


/**
 * @param {!Array<!proto.contrast.api.dtm.RaspRuleSample>} value
 * @return {!proto.contrast.api.dtm.AttackResult} returns this
*/
proto.contrast.api.dtm.AttackResult.prototype.setSamplesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.contrast.api.dtm.RaspRuleSample=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.dtm.RaspRuleSample}
 */
proto.contrast.api.dtm.AttackResult.prototype.addSamples = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.contrast.api.dtm.RaspRuleSample, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.dtm.AttackResult} returns this
 */
proto.contrast.api.dtm.AttackResult.prototype.clearSamplesList = function() {
  return this.setSamplesList([]);
};


/**
 * optional string tags = 7;
 * @return {string}
 */
proto.contrast.api.dtm.AttackResult.prototype.getTags = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.AttackResult} returns this
 */
proto.contrast.api.dtm.AttackResult.prototype.setTags = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional int64 acc_updated_ms = 16;
 * @return {number}
 */
proto.contrast.api.dtm.AttackResult.prototype.getAccUpdatedMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.AttackResult} returns this
 */
proto.contrast.api.dtm.AttackResult.prototype.setAccUpdatedMs = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional int32 acc_limit = 17;
 * @return {number}
 */
proto.contrast.api.dtm.AttackResult.prototype.getAccLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.AttackResult} returns this
 */
proto.contrast.api.dtm.AttackResult.prototype.setAccLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional int64 acc_window_ms = 18;
 * @return {number}
 */
proto.contrast.api.dtm.AttackResult.prototype.getAccWindowMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.AttackResult} returns this
 */
proto.contrast.api.dtm.AttackResult.prototype.setAccWindowMs = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional int32 acc_count = 19;
 * @return {number}
 */
proto.contrast.api.dtm.AttackResult.prototype.getAccCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.AttackResult} returns this
 */
proto.contrast.api.dtm.AttackResult.prototype.setAccCount = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional string acc_mode = 21;
 * @return {string}
 */
proto.contrast.api.dtm.AttackResult.prototype.getAccMode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.AttackResult} returns this
 */
proto.contrast.api.dtm.AttackResult.prototype.setAccMode = function(value) {
  return jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * optional string acc_msg = 22;
 * @return {string}
 */
proto.contrast.api.dtm.AttackResult.prototype.getAccMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.AttackResult} returns this
 */
proto.contrast.api.dtm.AttackResult.prototype.setAccMsg = function(value) {
  return jspb.Message.setProto3StringField(this, 22, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contrast.api.dtm.RaspRuleSample.repeatedFields_ = [4];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.contrast.api.dtm.RaspRuleSample.oneofGroups_ = [[16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44]];

/**
 * @enum {number}
 */
proto.contrast.api.dtm.RaspRuleSample.DetailsCase = {
  DETAILS_NOT_SET: 0,
  BRUTE_FORCE: 16,
  BOT_BLOCKER: 17,
  CMDI: 18,
  CSRF: 19,
  CVE: 20,
  UNTRUSTED_DESERIALIZATION: 21,
  EL_INJECTION: 22,
  IP_BLACKLIST: 23,
  MARK_OF_THE_BEAST: 24,
  PADDING_ORACLE: 25,
  PATH_TRAVERSAL: 26,
  RE_DOS: 27,
  SQLI: 28,
  SSRF: 29,
  VIRTUAL_PATCH: 30,
  XSS: 31,
  XXE: 32,
  NO_SQLI: 33,
  METHOD_TAMPERING: 34,
  CVE_2017_0898: 35,
  CVE_2017_14033: 36,
  CVE_2017_14064: 37,
  CVE_2017_17405: 38,
  MOD_SECURITY: 39,
  ENDPOINT: 40,
  SQLI_SEMANTIC: 41,
  CMDI_SEMANTIC: 42,
  PATH_TRAVERSAL_SEMANTIC: 43,
  SSJS: 44
};

/**
 * @return {proto.contrast.api.dtm.RaspRuleSample.DetailsCase}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.getDetailsCase = function() {
  return /** @type {proto.contrast.api.dtm.RaspRuleSample.DetailsCase} */(jspb.Message.computeOneofCase(this, proto.contrast.api.dtm.RaspRuleSample.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.RaspRuleSample.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.RaspRuleSample} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.RaspRuleSample.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestampMs: jspb.Message.getFieldWithDefault(msg, 2, 0),
    stackTraceElementsList: jspb.Message.toObjectList(msg.getStackTraceElementsList(),
    proto.contrast.api.dtm.StackTraceElement.toObject, includeInstance),
    userInput: (f = msg.getUserInput()) && proto.contrast.api.dtm.UserInput.toObject(includeInstance, f),
    bruteForce: (f = msg.getBruteForce()) && proto.contrast.api.dtm.BruteForceDetails.toObject(includeInstance, f),
    botBlocker: (f = msg.getBotBlocker()) && proto.contrast.api.dtm.BotBlockerDetails.toObject(includeInstance, f),
    cmdi: (f = msg.getCmdi()) && proto.contrast.api.dtm.CmdInjectionDetails.toObject(includeInstance, f),
    csrf: (f = msg.getCsrf()) && proto.contrast.api.dtm.CsrfDetails.toObject(includeInstance, f),
    cve: (f = msg.getCve()) && proto.contrast.api.dtm.CveDetails.toObject(includeInstance, f),
    untrustedDeserialization: (f = msg.getUntrustedDeserialization()) && proto.contrast.api.dtm.UntrustedDeserializationDetails.toObject(includeInstance, f),
    elInjection: (f = msg.getElInjection()) && proto.contrast.api.dtm.ElInjectionDetails.toObject(includeInstance, f),
    ipBlacklist: (f = msg.getIpBlacklist()) && proto.contrast.api.dtm.IpBlacklistDetails.toObject(includeInstance, f),
    markOfTheBeast: (f = msg.getMarkOfTheBeast()) && proto.contrast.api.dtm.MarkOfTheBeastDetails.toObject(includeInstance, f),
    paddingOracle: (f = msg.getPaddingOracle()) && proto.contrast.api.dtm.PaddingOracleDetails.toObject(includeInstance, f),
    pathTraversal: (f = msg.getPathTraversal()) && proto.contrast.api.dtm.PathTraversalDetails.toObject(includeInstance, f),
    reDos: (f = msg.getReDos()) && proto.contrast.api.dtm.ReDosDetails.toObject(includeInstance, f),
    sqli: (f = msg.getSqli()) && proto.contrast.api.dtm.SqlInjectionDetails.toObject(includeInstance, f),
    ssrf: (f = msg.getSsrf()) && proto.contrast.api.dtm.SsrfDetails.toObject(includeInstance, f),
    virtualPatch: (f = msg.getVirtualPatch()) && proto.contrast.api.dtm.VirtualPatchDetails.toObject(includeInstance, f),
    xss: (f = msg.getXss()) && proto.contrast.api.dtm.XssDetails.toObject(includeInstance, f),
    xxe: (f = msg.getXxe()) && proto.contrast.api.dtm.XxeDetails.toObject(includeInstance, f),
    noSqli: (f = msg.getNoSqli()) && proto.contrast.api.dtm.NoSqlInjectionDetails.toObject(includeInstance, f),
    methodTampering: (f = msg.getMethodTampering()) && proto.contrast.api.dtm.HttpMethodTamperingDetails.toObject(includeInstance, f),
    cve20170898: (f = msg.getCve20170898()) && proto.contrast.api.dtm.Cve20170898Details.toObject(includeInstance, f),
    cve201714033: (f = msg.getCve201714033()) && proto.contrast.api.dtm.Cve201714033Details.toObject(includeInstance, f),
    cve201714064: (f = msg.getCve201714064()) && proto.contrast.api.dtm.Cve201714064Details.toObject(includeInstance, f),
    cve201717405: (f = msg.getCve201717405()) && proto.contrast.api.dtm.Cve201717405Details.toObject(includeInstance, f),
    modSecurity: (f = msg.getModSecurity()) && proto.contrast.api.dtm.ModSecurityDetails.toObject(includeInstance, f),
    endpoint: (f = msg.getEndpoint()) && proto.contrast.api.dtm.EndpointBanDetails.toObject(includeInstance, f),
    sqliSemantic: (f = msg.getSqliSemantic()) && proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails.toObject(includeInstance, f),
    cmdiSemantic: (f = msg.getCmdiSemantic()) && proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails.toObject(includeInstance, f),
    pathTraversalSemantic: (f = msg.getPathTraversalSemantic()) && proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails.toObject(includeInstance, f),
    ssjs: (f = msg.getSsjs()) && proto.contrast.api.dtm.SsjsInjectionDetails.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.RaspRuleSample}
 */
proto.contrast.api.dtm.RaspRuleSample.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.RaspRuleSample;
  return proto.contrast.api.dtm.RaspRuleSample.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.RaspRuleSample} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.RaspRuleSample}
 */
proto.contrast.api.dtm.RaspRuleSample.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestampMs(value);
      break;
    case 4:
      var value = new proto.contrast.api.dtm.StackTraceElement;
      reader.readMessage(value,proto.contrast.api.dtm.StackTraceElement.deserializeBinaryFromReader);
      msg.addStackTraceElements(value);
      break;
    case 5:
      var value = new proto.contrast.api.dtm.UserInput;
      reader.readMessage(value,proto.contrast.api.dtm.UserInput.deserializeBinaryFromReader);
      msg.setUserInput(value);
      break;
    case 16:
      var value = new proto.contrast.api.dtm.BruteForceDetails;
      reader.readMessage(value,proto.contrast.api.dtm.BruteForceDetails.deserializeBinaryFromReader);
      msg.setBruteForce(value);
      break;
    case 17:
      var value = new proto.contrast.api.dtm.BotBlockerDetails;
      reader.readMessage(value,proto.contrast.api.dtm.BotBlockerDetails.deserializeBinaryFromReader);
      msg.setBotBlocker(value);
      break;
    case 18:
      var value = new proto.contrast.api.dtm.CmdInjectionDetails;
      reader.readMessage(value,proto.contrast.api.dtm.CmdInjectionDetails.deserializeBinaryFromReader);
      msg.setCmdi(value);
      break;
    case 19:
      var value = new proto.contrast.api.dtm.CsrfDetails;
      reader.readMessage(value,proto.contrast.api.dtm.CsrfDetails.deserializeBinaryFromReader);
      msg.setCsrf(value);
      break;
    case 20:
      var value = new proto.contrast.api.dtm.CveDetails;
      reader.readMessage(value,proto.contrast.api.dtm.CveDetails.deserializeBinaryFromReader);
      msg.setCve(value);
      break;
    case 21:
      var value = new proto.contrast.api.dtm.UntrustedDeserializationDetails;
      reader.readMessage(value,proto.contrast.api.dtm.UntrustedDeserializationDetails.deserializeBinaryFromReader);
      msg.setUntrustedDeserialization(value);
      break;
    case 22:
      var value = new proto.contrast.api.dtm.ElInjectionDetails;
      reader.readMessage(value,proto.contrast.api.dtm.ElInjectionDetails.deserializeBinaryFromReader);
      msg.setElInjection(value);
      break;
    case 23:
      var value = new proto.contrast.api.dtm.IpBlacklistDetails;
      reader.readMessage(value,proto.contrast.api.dtm.IpBlacklistDetails.deserializeBinaryFromReader);
      msg.setIpBlacklist(value);
      break;
    case 24:
      var value = new proto.contrast.api.dtm.MarkOfTheBeastDetails;
      reader.readMessage(value,proto.contrast.api.dtm.MarkOfTheBeastDetails.deserializeBinaryFromReader);
      msg.setMarkOfTheBeast(value);
      break;
    case 25:
      var value = new proto.contrast.api.dtm.PaddingOracleDetails;
      reader.readMessage(value,proto.contrast.api.dtm.PaddingOracleDetails.deserializeBinaryFromReader);
      msg.setPaddingOracle(value);
      break;
    case 26:
      var value = new proto.contrast.api.dtm.PathTraversalDetails;
      reader.readMessage(value,proto.contrast.api.dtm.PathTraversalDetails.deserializeBinaryFromReader);
      msg.setPathTraversal(value);
      break;
    case 27:
      var value = new proto.contrast.api.dtm.ReDosDetails;
      reader.readMessage(value,proto.contrast.api.dtm.ReDosDetails.deserializeBinaryFromReader);
      msg.setReDos(value);
      break;
    case 28:
      var value = new proto.contrast.api.dtm.SqlInjectionDetails;
      reader.readMessage(value,proto.contrast.api.dtm.SqlInjectionDetails.deserializeBinaryFromReader);
      msg.setSqli(value);
      break;
    case 29:
      var value = new proto.contrast.api.dtm.SsrfDetails;
      reader.readMessage(value,proto.contrast.api.dtm.SsrfDetails.deserializeBinaryFromReader);
      msg.setSsrf(value);
      break;
    case 30:
      var value = new proto.contrast.api.dtm.VirtualPatchDetails;
      reader.readMessage(value,proto.contrast.api.dtm.VirtualPatchDetails.deserializeBinaryFromReader);
      msg.setVirtualPatch(value);
      break;
    case 31:
      var value = new proto.contrast.api.dtm.XssDetails;
      reader.readMessage(value,proto.contrast.api.dtm.XssDetails.deserializeBinaryFromReader);
      msg.setXss(value);
      break;
    case 32:
      var value = new proto.contrast.api.dtm.XxeDetails;
      reader.readMessage(value,proto.contrast.api.dtm.XxeDetails.deserializeBinaryFromReader);
      msg.setXxe(value);
      break;
    case 33:
      var value = new proto.contrast.api.dtm.NoSqlInjectionDetails;
      reader.readMessage(value,proto.contrast.api.dtm.NoSqlInjectionDetails.deserializeBinaryFromReader);
      msg.setNoSqli(value);
      break;
    case 34:
      var value = new proto.contrast.api.dtm.HttpMethodTamperingDetails;
      reader.readMessage(value,proto.contrast.api.dtm.HttpMethodTamperingDetails.deserializeBinaryFromReader);
      msg.setMethodTampering(value);
      break;
    case 35:
      var value = new proto.contrast.api.dtm.Cve20170898Details;
      reader.readMessage(value,proto.contrast.api.dtm.Cve20170898Details.deserializeBinaryFromReader);
      msg.setCve20170898(value);
      break;
    case 36:
      var value = new proto.contrast.api.dtm.Cve201714033Details;
      reader.readMessage(value,proto.contrast.api.dtm.Cve201714033Details.deserializeBinaryFromReader);
      msg.setCve201714033(value);
      break;
    case 37:
      var value = new proto.contrast.api.dtm.Cve201714064Details;
      reader.readMessage(value,proto.contrast.api.dtm.Cve201714064Details.deserializeBinaryFromReader);
      msg.setCve201714064(value);
      break;
    case 38:
      var value = new proto.contrast.api.dtm.Cve201717405Details;
      reader.readMessage(value,proto.contrast.api.dtm.Cve201717405Details.deserializeBinaryFromReader);
      msg.setCve201717405(value);
      break;
    case 39:
      var value = new proto.contrast.api.dtm.ModSecurityDetails;
      reader.readMessage(value,proto.contrast.api.dtm.ModSecurityDetails.deserializeBinaryFromReader);
      msg.setModSecurity(value);
      break;
    case 40:
      var value = new proto.contrast.api.dtm.EndpointBanDetails;
      reader.readMessage(value,proto.contrast.api.dtm.EndpointBanDetails.deserializeBinaryFromReader);
      msg.setEndpoint(value);
      break;
    case 41:
      var value = new proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails;
      reader.readMessage(value,proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails.deserializeBinaryFromReader);
      msg.setSqliSemantic(value);
      break;
    case 42:
      var value = new proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails;
      reader.readMessage(value,proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails.deserializeBinaryFromReader);
      msg.setCmdiSemantic(value);
      break;
    case 43:
      var value = new proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails;
      reader.readMessage(value,proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails.deserializeBinaryFromReader);
      msg.setPathTraversalSemantic(value);
      break;
    case 44:
      var value = new proto.contrast.api.dtm.SsjsInjectionDetails;
      reader.readMessage(value,proto.contrast.api.dtm.SsjsInjectionDetails.deserializeBinaryFromReader);
      msg.setSsjs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.RaspRuleSample.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.RaspRuleSample} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.RaspRuleSample.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestampMs();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getStackTraceElementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.contrast.api.dtm.StackTraceElement.serializeBinaryToWriter
    );
  }
  f = message.getUserInput();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.contrast.api.dtm.UserInput.serializeBinaryToWriter
    );
  }
  f = message.getBruteForce();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.contrast.api.dtm.BruteForceDetails.serializeBinaryToWriter
    );
  }
  f = message.getBotBlocker();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.contrast.api.dtm.BotBlockerDetails.serializeBinaryToWriter
    );
  }
  f = message.getCmdi();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.contrast.api.dtm.CmdInjectionDetails.serializeBinaryToWriter
    );
  }
  f = message.getCsrf();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.contrast.api.dtm.CsrfDetails.serializeBinaryToWriter
    );
  }
  f = message.getCve();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.contrast.api.dtm.CveDetails.serializeBinaryToWriter
    );
  }
  f = message.getUntrustedDeserialization();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.contrast.api.dtm.UntrustedDeserializationDetails.serializeBinaryToWriter
    );
  }
  f = message.getElInjection();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.contrast.api.dtm.ElInjectionDetails.serializeBinaryToWriter
    );
  }
  f = message.getIpBlacklist();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.contrast.api.dtm.IpBlacklistDetails.serializeBinaryToWriter
    );
  }
  f = message.getMarkOfTheBeast();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.contrast.api.dtm.MarkOfTheBeastDetails.serializeBinaryToWriter
    );
  }
  f = message.getPaddingOracle();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      proto.contrast.api.dtm.PaddingOracleDetails.serializeBinaryToWriter
    );
  }
  f = message.getPathTraversal();
  if (f != null) {
    writer.writeMessage(
      26,
      f,
      proto.contrast.api.dtm.PathTraversalDetails.serializeBinaryToWriter
    );
  }
  f = message.getReDos();
  if (f != null) {
    writer.writeMessage(
      27,
      f,
      proto.contrast.api.dtm.ReDosDetails.serializeBinaryToWriter
    );
  }
  f = message.getSqli();
  if (f != null) {
    writer.writeMessage(
      28,
      f,
      proto.contrast.api.dtm.SqlInjectionDetails.serializeBinaryToWriter
    );
  }
  f = message.getSsrf();
  if (f != null) {
    writer.writeMessage(
      29,
      f,
      proto.contrast.api.dtm.SsrfDetails.serializeBinaryToWriter
    );
  }
  f = message.getVirtualPatch();
  if (f != null) {
    writer.writeMessage(
      30,
      f,
      proto.contrast.api.dtm.VirtualPatchDetails.serializeBinaryToWriter
    );
  }
  f = message.getXss();
  if (f != null) {
    writer.writeMessage(
      31,
      f,
      proto.contrast.api.dtm.XssDetails.serializeBinaryToWriter
    );
  }
  f = message.getXxe();
  if (f != null) {
    writer.writeMessage(
      32,
      f,
      proto.contrast.api.dtm.XxeDetails.serializeBinaryToWriter
    );
  }
  f = message.getNoSqli();
  if (f != null) {
    writer.writeMessage(
      33,
      f,
      proto.contrast.api.dtm.NoSqlInjectionDetails.serializeBinaryToWriter
    );
  }
  f = message.getMethodTampering();
  if (f != null) {
    writer.writeMessage(
      34,
      f,
      proto.contrast.api.dtm.HttpMethodTamperingDetails.serializeBinaryToWriter
    );
  }
  f = message.getCve20170898();
  if (f != null) {
    writer.writeMessage(
      35,
      f,
      proto.contrast.api.dtm.Cve20170898Details.serializeBinaryToWriter
    );
  }
  f = message.getCve201714033();
  if (f != null) {
    writer.writeMessage(
      36,
      f,
      proto.contrast.api.dtm.Cve201714033Details.serializeBinaryToWriter
    );
  }
  f = message.getCve201714064();
  if (f != null) {
    writer.writeMessage(
      37,
      f,
      proto.contrast.api.dtm.Cve201714064Details.serializeBinaryToWriter
    );
  }
  f = message.getCve201717405();
  if (f != null) {
    writer.writeMessage(
      38,
      f,
      proto.contrast.api.dtm.Cve201717405Details.serializeBinaryToWriter
    );
  }
  f = message.getModSecurity();
  if (f != null) {
    writer.writeMessage(
      39,
      f,
      proto.contrast.api.dtm.ModSecurityDetails.serializeBinaryToWriter
    );
  }
  f = message.getEndpoint();
  if (f != null) {
    writer.writeMessage(
      40,
      f,
      proto.contrast.api.dtm.EndpointBanDetails.serializeBinaryToWriter
    );
  }
  f = message.getSqliSemantic();
  if (f != null) {
    writer.writeMessage(
      41,
      f,
      proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails.serializeBinaryToWriter
    );
  }
  f = message.getCmdiSemantic();
  if (f != null) {
    writer.writeMessage(
      42,
      f,
      proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails.serializeBinaryToWriter
    );
  }
  f = message.getPathTraversalSemantic();
  if (f != null) {
    writer.writeMessage(
      43,
      f,
      proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails.serializeBinaryToWriter
    );
  }
  f = message.getSsjs();
  if (f != null) {
    writer.writeMessage(
      44,
      f,
      proto.contrast.api.dtm.SsjsInjectionDetails.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 timestamp_ms = 2;
 * @return {number}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.getTimestampMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.setTimestampMs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated StackTraceElement stack_trace_elements = 4;
 * @return {!Array<!proto.contrast.api.dtm.StackTraceElement>}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.getStackTraceElementsList = function() {
  return /** @type{!Array<!proto.contrast.api.dtm.StackTraceElement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.dtm.StackTraceElement, 4));
};


/**
 * @param {!Array<!proto.contrast.api.dtm.StackTraceElement>} value
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
*/
proto.contrast.api.dtm.RaspRuleSample.prototype.setStackTraceElementsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.contrast.api.dtm.StackTraceElement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.dtm.StackTraceElement}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.addStackTraceElements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.contrast.api.dtm.StackTraceElement, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.clearStackTraceElementsList = function() {
  return this.setStackTraceElementsList([]);
};


/**
 * optional UserInput user_input = 5;
 * @return {?proto.contrast.api.dtm.UserInput}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.getUserInput = function() {
  return /** @type{?proto.contrast.api.dtm.UserInput} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.UserInput, 5));
};


/**
 * @param {?proto.contrast.api.dtm.UserInput|undefined} value
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
*/
proto.contrast.api.dtm.RaspRuleSample.prototype.setUserInput = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.clearUserInput = function() {
  return this.setUserInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.hasUserInput = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional BruteForceDetails brute_force = 16;
 * @return {?proto.contrast.api.dtm.BruteForceDetails}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.getBruteForce = function() {
  return /** @type{?proto.contrast.api.dtm.BruteForceDetails} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.BruteForceDetails, 16));
};


/**
 * @param {?proto.contrast.api.dtm.BruteForceDetails|undefined} value
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
*/
proto.contrast.api.dtm.RaspRuleSample.prototype.setBruteForce = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.contrast.api.dtm.RaspRuleSample.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.clearBruteForce = function() {
  return this.setBruteForce(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.hasBruteForce = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional BotBlockerDetails bot_blocker = 17;
 * @return {?proto.contrast.api.dtm.BotBlockerDetails}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.getBotBlocker = function() {
  return /** @type{?proto.contrast.api.dtm.BotBlockerDetails} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.BotBlockerDetails, 17));
};


/**
 * @param {?proto.contrast.api.dtm.BotBlockerDetails|undefined} value
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
*/
proto.contrast.api.dtm.RaspRuleSample.prototype.setBotBlocker = function(value) {
  return jspb.Message.setOneofWrapperField(this, 17, proto.contrast.api.dtm.RaspRuleSample.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.clearBotBlocker = function() {
  return this.setBotBlocker(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.hasBotBlocker = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional CmdInjectionDetails cmdi = 18;
 * @return {?proto.contrast.api.dtm.CmdInjectionDetails}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.getCmdi = function() {
  return /** @type{?proto.contrast.api.dtm.CmdInjectionDetails} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.CmdInjectionDetails, 18));
};


/**
 * @param {?proto.contrast.api.dtm.CmdInjectionDetails|undefined} value
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
*/
proto.contrast.api.dtm.RaspRuleSample.prototype.setCmdi = function(value) {
  return jspb.Message.setOneofWrapperField(this, 18, proto.contrast.api.dtm.RaspRuleSample.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.clearCmdi = function() {
  return this.setCmdi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.hasCmdi = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional CsrfDetails csrf = 19;
 * @return {?proto.contrast.api.dtm.CsrfDetails}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.getCsrf = function() {
  return /** @type{?proto.contrast.api.dtm.CsrfDetails} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.CsrfDetails, 19));
};


/**
 * @param {?proto.contrast.api.dtm.CsrfDetails|undefined} value
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
*/
proto.contrast.api.dtm.RaspRuleSample.prototype.setCsrf = function(value) {
  return jspb.Message.setOneofWrapperField(this, 19, proto.contrast.api.dtm.RaspRuleSample.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.clearCsrf = function() {
  return this.setCsrf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.hasCsrf = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional CveDetails cve = 20;
 * @return {?proto.contrast.api.dtm.CveDetails}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.getCve = function() {
  return /** @type{?proto.contrast.api.dtm.CveDetails} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.CveDetails, 20));
};


/**
 * @param {?proto.contrast.api.dtm.CveDetails|undefined} value
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
*/
proto.contrast.api.dtm.RaspRuleSample.prototype.setCve = function(value) {
  return jspb.Message.setOneofWrapperField(this, 20, proto.contrast.api.dtm.RaspRuleSample.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.clearCve = function() {
  return this.setCve(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.hasCve = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional UntrustedDeserializationDetails untrusted_deserialization = 21;
 * @return {?proto.contrast.api.dtm.UntrustedDeserializationDetails}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.getUntrustedDeserialization = function() {
  return /** @type{?proto.contrast.api.dtm.UntrustedDeserializationDetails} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.UntrustedDeserializationDetails, 21));
};


/**
 * @param {?proto.contrast.api.dtm.UntrustedDeserializationDetails|undefined} value
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
*/
proto.contrast.api.dtm.RaspRuleSample.prototype.setUntrustedDeserialization = function(value) {
  return jspb.Message.setOneofWrapperField(this, 21, proto.contrast.api.dtm.RaspRuleSample.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.clearUntrustedDeserialization = function() {
  return this.setUntrustedDeserialization(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.hasUntrustedDeserialization = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional ElInjectionDetails el_injection = 22;
 * @return {?proto.contrast.api.dtm.ElInjectionDetails}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.getElInjection = function() {
  return /** @type{?proto.contrast.api.dtm.ElInjectionDetails} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.ElInjectionDetails, 22));
};


/**
 * @param {?proto.contrast.api.dtm.ElInjectionDetails|undefined} value
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
*/
proto.contrast.api.dtm.RaspRuleSample.prototype.setElInjection = function(value) {
  return jspb.Message.setOneofWrapperField(this, 22, proto.contrast.api.dtm.RaspRuleSample.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.clearElInjection = function() {
  return this.setElInjection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.hasElInjection = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional IpBlacklistDetails ip_blacklist = 23;
 * @return {?proto.contrast.api.dtm.IpBlacklistDetails}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.getIpBlacklist = function() {
  return /** @type{?proto.contrast.api.dtm.IpBlacklistDetails} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.IpBlacklistDetails, 23));
};


/**
 * @param {?proto.contrast.api.dtm.IpBlacklistDetails|undefined} value
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
*/
proto.contrast.api.dtm.RaspRuleSample.prototype.setIpBlacklist = function(value) {
  return jspb.Message.setOneofWrapperField(this, 23, proto.contrast.api.dtm.RaspRuleSample.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.clearIpBlacklist = function() {
  return this.setIpBlacklist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.hasIpBlacklist = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional MarkOfTheBeastDetails mark_of_the_beast = 24;
 * @return {?proto.contrast.api.dtm.MarkOfTheBeastDetails}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.getMarkOfTheBeast = function() {
  return /** @type{?proto.contrast.api.dtm.MarkOfTheBeastDetails} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.MarkOfTheBeastDetails, 24));
};


/**
 * @param {?proto.contrast.api.dtm.MarkOfTheBeastDetails|undefined} value
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
*/
proto.contrast.api.dtm.RaspRuleSample.prototype.setMarkOfTheBeast = function(value) {
  return jspb.Message.setOneofWrapperField(this, 24, proto.contrast.api.dtm.RaspRuleSample.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.clearMarkOfTheBeast = function() {
  return this.setMarkOfTheBeast(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.hasMarkOfTheBeast = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional PaddingOracleDetails padding_oracle = 25;
 * @return {?proto.contrast.api.dtm.PaddingOracleDetails}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.getPaddingOracle = function() {
  return /** @type{?proto.contrast.api.dtm.PaddingOracleDetails} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.PaddingOracleDetails, 25));
};


/**
 * @param {?proto.contrast.api.dtm.PaddingOracleDetails|undefined} value
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
*/
proto.contrast.api.dtm.RaspRuleSample.prototype.setPaddingOracle = function(value) {
  return jspb.Message.setOneofWrapperField(this, 25, proto.contrast.api.dtm.RaspRuleSample.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.clearPaddingOracle = function() {
  return this.setPaddingOracle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.hasPaddingOracle = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional PathTraversalDetails path_traversal = 26;
 * @return {?proto.contrast.api.dtm.PathTraversalDetails}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.getPathTraversal = function() {
  return /** @type{?proto.contrast.api.dtm.PathTraversalDetails} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.PathTraversalDetails, 26));
};


/**
 * @param {?proto.contrast.api.dtm.PathTraversalDetails|undefined} value
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
*/
proto.contrast.api.dtm.RaspRuleSample.prototype.setPathTraversal = function(value) {
  return jspb.Message.setOneofWrapperField(this, 26, proto.contrast.api.dtm.RaspRuleSample.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.clearPathTraversal = function() {
  return this.setPathTraversal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.hasPathTraversal = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional ReDosDetails re_dos = 27;
 * @return {?proto.contrast.api.dtm.ReDosDetails}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.getReDos = function() {
  return /** @type{?proto.contrast.api.dtm.ReDosDetails} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.ReDosDetails, 27));
};


/**
 * @param {?proto.contrast.api.dtm.ReDosDetails|undefined} value
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
*/
proto.contrast.api.dtm.RaspRuleSample.prototype.setReDos = function(value) {
  return jspb.Message.setOneofWrapperField(this, 27, proto.contrast.api.dtm.RaspRuleSample.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.clearReDos = function() {
  return this.setReDos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.hasReDos = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional SqlInjectionDetails sqli = 28;
 * @return {?proto.contrast.api.dtm.SqlInjectionDetails}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.getSqli = function() {
  return /** @type{?proto.contrast.api.dtm.SqlInjectionDetails} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.SqlInjectionDetails, 28));
};


/**
 * @param {?proto.contrast.api.dtm.SqlInjectionDetails|undefined} value
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
*/
proto.contrast.api.dtm.RaspRuleSample.prototype.setSqli = function(value) {
  return jspb.Message.setOneofWrapperField(this, 28, proto.contrast.api.dtm.RaspRuleSample.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.clearSqli = function() {
  return this.setSqli(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.hasSqli = function() {
  return jspb.Message.getField(this, 28) != null;
};


/**
 * optional SsrfDetails ssrf = 29;
 * @return {?proto.contrast.api.dtm.SsrfDetails}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.getSsrf = function() {
  return /** @type{?proto.contrast.api.dtm.SsrfDetails} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.SsrfDetails, 29));
};


/**
 * @param {?proto.contrast.api.dtm.SsrfDetails|undefined} value
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
*/
proto.contrast.api.dtm.RaspRuleSample.prototype.setSsrf = function(value) {
  return jspb.Message.setOneofWrapperField(this, 29, proto.contrast.api.dtm.RaspRuleSample.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.clearSsrf = function() {
  return this.setSsrf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.hasSsrf = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * optional VirtualPatchDetails virtual_patch = 30;
 * @return {?proto.contrast.api.dtm.VirtualPatchDetails}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.getVirtualPatch = function() {
  return /** @type{?proto.contrast.api.dtm.VirtualPatchDetails} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.VirtualPatchDetails, 30));
};


/**
 * @param {?proto.contrast.api.dtm.VirtualPatchDetails|undefined} value
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
*/
proto.contrast.api.dtm.RaspRuleSample.prototype.setVirtualPatch = function(value) {
  return jspb.Message.setOneofWrapperField(this, 30, proto.contrast.api.dtm.RaspRuleSample.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.clearVirtualPatch = function() {
  return this.setVirtualPatch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.hasVirtualPatch = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional XssDetails xss = 31;
 * @return {?proto.contrast.api.dtm.XssDetails}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.getXss = function() {
  return /** @type{?proto.contrast.api.dtm.XssDetails} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.XssDetails, 31));
};


/**
 * @param {?proto.contrast.api.dtm.XssDetails|undefined} value
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
*/
proto.contrast.api.dtm.RaspRuleSample.prototype.setXss = function(value) {
  return jspb.Message.setOneofWrapperField(this, 31, proto.contrast.api.dtm.RaspRuleSample.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.clearXss = function() {
  return this.setXss(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.hasXss = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * optional XxeDetails xxe = 32;
 * @return {?proto.contrast.api.dtm.XxeDetails}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.getXxe = function() {
  return /** @type{?proto.contrast.api.dtm.XxeDetails} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.XxeDetails, 32));
};


/**
 * @param {?proto.contrast.api.dtm.XxeDetails|undefined} value
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
*/
proto.contrast.api.dtm.RaspRuleSample.prototype.setXxe = function(value) {
  return jspb.Message.setOneofWrapperField(this, 32, proto.contrast.api.dtm.RaspRuleSample.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.clearXxe = function() {
  return this.setXxe(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.hasXxe = function() {
  return jspb.Message.getField(this, 32) != null;
};


/**
 * optional NoSqlInjectionDetails no_sqli = 33;
 * @return {?proto.contrast.api.dtm.NoSqlInjectionDetails}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.getNoSqli = function() {
  return /** @type{?proto.contrast.api.dtm.NoSqlInjectionDetails} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.NoSqlInjectionDetails, 33));
};


/**
 * @param {?proto.contrast.api.dtm.NoSqlInjectionDetails|undefined} value
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
*/
proto.contrast.api.dtm.RaspRuleSample.prototype.setNoSqli = function(value) {
  return jspb.Message.setOneofWrapperField(this, 33, proto.contrast.api.dtm.RaspRuleSample.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.clearNoSqli = function() {
  return this.setNoSqli(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.hasNoSqli = function() {
  return jspb.Message.getField(this, 33) != null;
};


/**
 * optional HttpMethodTamperingDetails method_tampering = 34;
 * @return {?proto.contrast.api.dtm.HttpMethodTamperingDetails}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.getMethodTampering = function() {
  return /** @type{?proto.contrast.api.dtm.HttpMethodTamperingDetails} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.HttpMethodTamperingDetails, 34));
};


/**
 * @param {?proto.contrast.api.dtm.HttpMethodTamperingDetails|undefined} value
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
*/
proto.contrast.api.dtm.RaspRuleSample.prototype.setMethodTampering = function(value) {
  return jspb.Message.setOneofWrapperField(this, 34, proto.contrast.api.dtm.RaspRuleSample.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.clearMethodTampering = function() {
  return this.setMethodTampering(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.hasMethodTampering = function() {
  return jspb.Message.getField(this, 34) != null;
};


/**
 * optional Cve20170898Details cve_2017_0898 = 35;
 * @return {?proto.contrast.api.dtm.Cve20170898Details}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.getCve20170898 = function() {
  return /** @type{?proto.contrast.api.dtm.Cve20170898Details} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.Cve20170898Details, 35));
};


/**
 * @param {?proto.contrast.api.dtm.Cve20170898Details|undefined} value
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
*/
proto.contrast.api.dtm.RaspRuleSample.prototype.setCve20170898 = function(value) {
  return jspb.Message.setOneofWrapperField(this, 35, proto.contrast.api.dtm.RaspRuleSample.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.clearCve20170898 = function() {
  return this.setCve20170898(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.hasCve20170898 = function() {
  return jspb.Message.getField(this, 35) != null;
};


/**
 * optional Cve201714033Details cve_2017_14033 = 36;
 * @return {?proto.contrast.api.dtm.Cve201714033Details}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.getCve201714033 = function() {
  return /** @type{?proto.contrast.api.dtm.Cve201714033Details} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.Cve201714033Details, 36));
};


/**
 * @param {?proto.contrast.api.dtm.Cve201714033Details|undefined} value
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
*/
proto.contrast.api.dtm.RaspRuleSample.prototype.setCve201714033 = function(value) {
  return jspb.Message.setOneofWrapperField(this, 36, proto.contrast.api.dtm.RaspRuleSample.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.clearCve201714033 = function() {
  return this.setCve201714033(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.hasCve201714033 = function() {
  return jspb.Message.getField(this, 36) != null;
};


/**
 * optional Cve201714064Details cve_2017_14064 = 37;
 * @return {?proto.contrast.api.dtm.Cve201714064Details}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.getCve201714064 = function() {
  return /** @type{?proto.contrast.api.dtm.Cve201714064Details} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.Cve201714064Details, 37));
};


/**
 * @param {?proto.contrast.api.dtm.Cve201714064Details|undefined} value
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
*/
proto.contrast.api.dtm.RaspRuleSample.prototype.setCve201714064 = function(value) {
  return jspb.Message.setOneofWrapperField(this, 37, proto.contrast.api.dtm.RaspRuleSample.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.clearCve201714064 = function() {
  return this.setCve201714064(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.hasCve201714064 = function() {
  return jspb.Message.getField(this, 37) != null;
};


/**
 * optional Cve201717405Details cve_2017_17405 = 38;
 * @return {?proto.contrast.api.dtm.Cve201717405Details}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.getCve201717405 = function() {
  return /** @type{?proto.contrast.api.dtm.Cve201717405Details} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.Cve201717405Details, 38));
};


/**
 * @param {?proto.contrast.api.dtm.Cve201717405Details|undefined} value
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
*/
proto.contrast.api.dtm.RaspRuleSample.prototype.setCve201717405 = function(value) {
  return jspb.Message.setOneofWrapperField(this, 38, proto.contrast.api.dtm.RaspRuleSample.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.clearCve201717405 = function() {
  return this.setCve201717405(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.hasCve201717405 = function() {
  return jspb.Message.getField(this, 38) != null;
};


/**
 * optional ModSecurityDetails mod_security = 39;
 * @return {?proto.contrast.api.dtm.ModSecurityDetails}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.getModSecurity = function() {
  return /** @type{?proto.contrast.api.dtm.ModSecurityDetails} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.ModSecurityDetails, 39));
};


/**
 * @param {?proto.contrast.api.dtm.ModSecurityDetails|undefined} value
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
*/
proto.contrast.api.dtm.RaspRuleSample.prototype.setModSecurity = function(value) {
  return jspb.Message.setOneofWrapperField(this, 39, proto.contrast.api.dtm.RaspRuleSample.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.clearModSecurity = function() {
  return this.setModSecurity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.hasModSecurity = function() {
  return jspb.Message.getField(this, 39) != null;
};


/**
 * optional EndpointBanDetails endpoint = 40;
 * @return {?proto.contrast.api.dtm.EndpointBanDetails}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.getEndpoint = function() {
  return /** @type{?proto.contrast.api.dtm.EndpointBanDetails} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.EndpointBanDetails, 40));
};


/**
 * @param {?proto.contrast.api.dtm.EndpointBanDetails|undefined} value
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
*/
proto.contrast.api.dtm.RaspRuleSample.prototype.setEndpoint = function(value) {
  return jspb.Message.setOneofWrapperField(this, 40, proto.contrast.api.dtm.RaspRuleSample.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.clearEndpoint = function() {
  return this.setEndpoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.hasEndpoint = function() {
  return jspb.Message.getField(this, 40) != null;
};


/**
 * optional SqlInjectionSemanticAnalysisDetails sqli_semantic = 41;
 * @return {?proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.getSqliSemantic = function() {
  return /** @type{?proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails, 41));
};


/**
 * @param {?proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails|undefined} value
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
*/
proto.contrast.api.dtm.RaspRuleSample.prototype.setSqliSemantic = function(value) {
  return jspb.Message.setOneofWrapperField(this, 41, proto.contrast.api.dtm.RaspRuleSample.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.clearSqliSemantic = function() {
  return this.setSqliSemantic(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.hasSqliSemantic = function() {
  return jspb.Message.getField(this, 41) != null;
};


/**
 * optional CmdInjectionSemanticAnalysisDetails cmdi_semantic = 42;
 * @return {?proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.getCmdiSemantic = function() {
  return /** @type{?proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails, 42));
};


/**
 * @param {?proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails|undefined} value
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
*/
proto.contrast.api.dtm.RaspRuleSample.prototype.setCmdiSemantic = function(value) {
  return jspb.Message.setOneofWrapperField(this, 42, proto.contrast.api.dtm.RaspRuleSample.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.clearCmdiSemantic = function() {
  return this.setCmdiSemantic(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.hasCmdiSemantic = function() {
  return jspb.Message.getField(this, 42) != null;
};


/**
 * optional PathTraversalSemanticAnalysisDetails path_traversal_semantic = 43;
 * @return {?proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.getPathTraversalSemantic = function() {
  return /** @type{?proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails, 43));
};


/**
 * @param {?proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails|undefined} value
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
*/
proto.contrast.api.dtm.RaspRuleSample.prototype.setPathTraversalSemantic = function(value) {
  return jspb.Message.setOneofWrapperField(this, 43, proto.contrast.api.dtm.RaspRuleSample.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.clearPathTraversalSemantic = function() {
  return this.setPathTraversalSemantic(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.hasPathTraversalSemantic = function() {
  return jspb.Message.getField(this, 43) != null;
};


/**
 * optional SsjsInjectionDetails ssjs = 44;
 * @return {?proto.contrast.api.dtm.SsjsInjectionDetails}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.getSsjs = function() {
  return /** @type{?proto.contrast.api.dtm.SsjsInjectionDetails} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.SsjsInjectionDetails, 44));
};


/**
 * @param {?proto.contrast.api.dtm.SsjsInjectionDetails|undefined} value
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
*/
proto.contrast.api.dtm.RaspRuleSample.prototype.setSsjs = function(value) {
  return jspb.Message.setOneofWrapperField(this, 44, proto.contrast.api.dtm.RaspRuleSample.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.RaspRuleSample} returns this
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.clearSsjs = function() {
  return this.setSsjs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.RaspRuleSample.prototype.hasSsjs = function() {
  return jspb.Message.getField(this, 44) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.EndpointBanDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.EndpointBanDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.EndpointBanDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.EndpointBanDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    ip: jspb.Message.getFieldWithDefault(msg, 1, ""),
    requestUri: jspb.Message.getFieldWithDefault(msg, 2, ""),
    responseCode: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.EndpointBanDetails}
 */
proto.contrast.api.dtm.EndpointBanDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.EndpointBanDetails;
  return proto.contrast.api.dtm.EndpointBanDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.EndpointBanDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.EndpointBanDetails}
 */
proto.contrast.api.dtm.EndpointBanDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestUri(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResponseCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.EndpointBanDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.EndpointBanDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.EndpointBanDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.EndpointBanDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequestUri();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getResponseCode();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string ip = 1;
 * @return {string}
 */
proto.contrast.api.dtm.EndpointBanDetails.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.EndpointBanDetails} returns this
 */
proto.contrast.api.dtm.EndpointBanDetails.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string request_uri = 2;
 * @return {string}
 */
proto.contrast.api.dtm.EndpointBanDetails.prototype.getRequestUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.EndpointBanDetails} returns this
 */
proto.contrast.api.dtm.EndpointBanDetails.prototype.setRequestUri = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 response_code = 3;
 * @return {number}
 */
proto.contrast.api.dtm.EndpointBanDetails.prototype.getResponseCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.EndpointBanDetails} returns this
 */
proto.contrast.api.dtm.EndpointBanDetails.prototype.setResponseCode = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contrast.api.dtm.ModSecurityDetails.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.ModSecurityDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.ModSecurityDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.ModSecurityDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.ModSecurityDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    logsList: jspb.Message.toObjectList(msg.getLogsList(),
    proto.contrast.api.dtm.ModSecurityLog.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.ModSecurityDetails}
 */
proto.contrast.api.dtm.ModSecurityDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.ModSecurityDetails;
  return proto.contrast.api.dtm.ModSecurityDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.ModSecurityDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.ModSecurityDetails}
 */
proto.contrast.api.dtm.ModSecurityDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 3:
      var value = new proto.contrast.api.dtm.ModSecurityLog;
      reader.readMessage(value,proto.contrast.api.dtm.ModSecurityLog.deserializeBinaryFromReader);
      msg.addLogs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.ModSecurityDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.ModSecurityDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.ModSecurityDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.ModSecurityDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.contrast.api.dtm.ModSecurityLog.serializeBinaryToWriter
    );
  }
};


/**
 * optional string transaction_id = 1;
 * @return {string}
 */
proto.contrast.api.dtm.ModSecurityDetails.prototype.getTransactionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.ModSecurityDetails} returns this
 */
proto.contrast.api.dtm.ModSecurityDetails.prototype.setTransactionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 status = 2;
 * @return {number}
 */
proto.contrast.api.dtm.ModSecurityDetails.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.ModSecurityDetails} returns this
 */
proto.contrast.api.dtm.ModSecurityDetails.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated ModSecurityLog logs = 3;
 * @return {!Array<!proto.contrast.api.dtm.ModSecurityLog>}
 */
proto.contrast.api.dtm.ModSecurityDetails.prototype.getLogsList = function() {
  return /** @type{!Array<!proto.contrast.api.dtm.ModSecurityLog>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.dtm.ModSecurityLog, 3));
};


/**
 * @param {!Array<!proto.contrast.api.dtm.ModSecurityLog>} value
 * @return {!proto.contrast.api.dtm.ModSecurityDetails} returns this
*/
proto.contrast.api.dtm.ModSecurityDetails.prototype.setLogsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.contrast.api.dtm.ModSecurityLog=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.dtm.ModSecurityLog}
 */
proto.contrast.api.dtm.ModSecurityDetails.prototype.addLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.contrast.api.dtm.ModSecurityLog, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.dtm.ModSecurityDetails} returns this
 */
proto.contrast.api.dtm.ModSecurityDetails.prototype.clearLogsList = function() {
  return this.setLogsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.ModSecurityLog.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.ModSecurityLog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.ModSecurityLog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.ModSecurityLog.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    paramsMap: (f = msg.getParamsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.ModSecurityLog}
 */
proto.contrast.api.dtm.ModSecurityLog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.ModSecurityLog;
  return proto.contrast.api.dtm.ModSecurityLog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.ModSecurityLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.ModSecurityLog}
 */
proto.contrast.api.dtm.ModSecurityLog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = msg.getParamsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.ModSecurityLog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.ModSecurityLog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.ModSecurityLog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.ModSecurityLog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getParamsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.contrast.api.dtm.ModSecurityLog.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.ModSecurityLog} returns this
 */
proto.contrast.api.dtm.ModSecurityLog.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, string> params = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.contrast.api.dtm.ModSecurityLog.prototype.getParamsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.contrast.api.dtm.ModSecurityLog} returns this
 */
proto.contrast.api.dtm.ModSecurityLog.prototype.clearParamsMap = function() {
  this.getParamsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.BruteForceDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.BruteForceDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.BruteForceDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.BruteForceDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    count: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.BruteForceDetails}
 */
proto.contrast.api.dtm.BruteForceDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.BruteForceDetails;
  return proto.contrast.api.dtm.BruteForceDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.BruteForceDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.BruteForceDetails}
 */
proto.contrast.api.dtm.BruteForceDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.BruteForceDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.BruteForceDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.BruteForceDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.BruteForceDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 count = 1;
 * @return {number}
 */
proto.contrast.api.dtm.BruteForceDetails.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.BruteForceDetails} returns this
 */
proto.contrast.api.dtm.BruteForceDetails.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.BotBlockerDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.BotBlockerDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.BotBlockerDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.BotBlockerDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    bot: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userAgent: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.BotBlockerDetails}
 */
proto.contrast.api.dtm.BotBlockerDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.BotBlockerDetails;
  return proto.contrast.api.dtm.BotBlockerDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.BotBlockerDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.BotBlockerDetails}
 */
proto.contrast.api.dtm.BotBlockerDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBot(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserAgent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.BotBlockerDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.BotBlockerDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.BotBlockerDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.BotBlockerDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBot();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserAgent();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string bot = 1;
 * @return {string}
 */
proto.contrast.api.dtm.BotBlockerDetails.prototype.getBot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.BotBlockerDetails} returns this
 */
proto.contrast.api.dtm.BotBlockerDetails.prototype.setBot = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_agent = 2;
 * @return {string}
 */
proto.contrast.api.dtm.BotBlockerDetails.prototype.getUserAgent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.BotBlockerDetails} returns this
 */
proto.contrast.api.dtm.BotBlockerDetails.prototype.setUserAgent = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.CmdInjectionDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.CmdInjectionDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.CmdInjectionDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.CmdInjectionDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    command: jspb.Message.getFieldWithDefault(msg, 1, ""),
    startIdx: jspb.Message.getFieldWithDefault(msg, 2, 0),
    endIdx: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.CmdInjectionDetails}
 */
proto.contrast.api.dtm.CmdInjectionDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.CmdInjectionDetails;
  return proto.contrast.api.dtm.CmdInjectionDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.CmdInjectionDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.CmdInjectionDetails}
 */
proto.contrast.api.dtm.CmdInjectionDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommand(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartIdx(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEndIdx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.CmdInjectionDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.CmdInjectionDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.CmdInjectionDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.CmdInjectionDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommand();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStartIdx();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getEndIdx();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string command = 1;
 * @return {string}
 */
proto.contrast.api.dtm.CmdInjectionDetails.prototype.getCommand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.CmdInjectionDetails} returns this
 */
proto.contrast.api.dtm.CmdInjectionDetails.prototype.setCommand = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 start_idx = 2;
 * @return {number}
 */
proto.contrast.api.dtm.CmdInjectionDetails.prototype.getStartIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.CmdInjectionDetails} returns this
 */
proto.contrast.api.dtm.CmdInjectionDetails.prototype.setStartIdx = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 end_idx = 3;
 * @return {number}
 */
proto.contrast.api.dtm.CmdInjectionDetails.prototype.getEndIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.CmdInjectionDetails} returns this
 */
proto.contrast.api.dtm.CmdInjectionDetails.prototype.setEndIdx = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    command: jspb.Message.getFieldWithDefault(msg, 1, ""),
    findingsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails}
 */
proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails;
  return proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails}
 */
proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommand(value);
      break;
    case 2:
      var value = /** @type {!Array<!proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails.Finding>} */ (reader.readPackedEnum());
      msg.setFindingsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommand();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFindingsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails.Finding = {
  CHAINING: 0,
  BACKDOOR: 1
};

/**
 * optional string command = 1;
 * @return {string}
 */
proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails.prototype.getCommand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails} returns this
 */
proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails.prototype.setCommand = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Finding findings = 2;
 * @return {!Array<!proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails.Finding>}
 */
proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails.prototype.getFindingsList = function() {
  return /** @type {!Array<!proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails.Finding>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<!proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails.Finding>} value
 * @return {!proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails} returns this
 */
proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails.prototype.setFindingsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails.Finding} value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails} returns this
 */
proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails.prototype.addFindings = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails} returns this
 */
proto.contrast.api.dtm.CmdInjectionSemanticAnalysisDetails.prototype.clearFindingsList = function() {
  return this.setFindingsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.CsrfDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.CsrfDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.CsrfDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.CsrfDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    expected: jspb.Message.getFieldWithDefault(msg, 2, ""),
    presented: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.CsrfDetails}
 */
proto.contrast.api.dtm.CsrfDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.CsrfDetails;
  return proto.contrast.api.dtm.CsrfDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.CsrfDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.CsrfDetails}
 */
proto.contrast.api.dtm.CsrfDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpected(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPresented(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.CsrfDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.CsrfDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.CsrfDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.CsrfDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExpected();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPresented();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.contrast.api.dtm.CsrfDetails.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.CsrfDetails} returns this
 */
proto.contrast.api.dtm.CsrfDetails.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string expected = 2;
 * @return {string}
 */
proto.contrast.api.dtm.CsrfDetails.prototype.getExpected = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.CsrfDetails} returns this
 */
proto.contrast.api.dtm.CsrfDetails.prototype.setExpected = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string presented = 3;
 * @return {string}
 */
proto.contrast.api.dtm.CsrfDetails.prototype.getPresented = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.CsrfDetails} returns this
 */
proto.contrast.api.dtm.CsrfDetails.prototype.setPresented = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.CveDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.CveDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.CveDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.CveDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, ""),
    cve: jspb.Message.getFieldWithDefault(msg, 3, ""),
    library: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.CveDetails}
 */
proto.contrast.api.dtm.CveDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.CveDetails;
  return proto.contrast.api.dtm.CveDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.CveDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.CveDetails}
 */
proto.contrast.api.dtm.CveDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCve(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLibrary(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.CveDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.CveDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.CveDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.CveDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCve();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLibrary();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.contrast.api.dtm.CveDetails.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.CveDetails} returns this
 */
proto.contrast.api.dtm.CveDetails.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.contrast.api.dtm.CveDetails.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.CveDetails} returns this
 */
proto.contrast.api.dtm.CveDetails.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string cve = 3;
 * @return {string}
 */
proto.contrast.api.dtm.CveDetails.prototype.getCve = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.CveDetails} returns this
 */
proto.contrast.api.dtm.CveDetails.prototype.setCve = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string library = 4;
 * @return {string}
 */
proto.contrast.api.dtm.CveDetails.prototype.getLibrary = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.CveDetails} returns this
 */
proto.contrast.api.dtm.CveDetails.prototype.setLibrary = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.Cve20170898Details.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.Cve20170898Details.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.Cve20170898Details} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.Cve20170898Details.toObject = function(includeInstance, msg) {
  var f, obj = {
    formatString: jspb.Message.getFieldWithDefault(msg, 1, ""),
    maliciousFormatGroup: jspb.Message.getFieldWithDefault(msg, 2, ""),
    precisionArgument: jspb.Message.getFieldWithDefault(msg, 3, ""),
    valueArgument: jspb.Message.getFieldWithDefault(msg, 4, ""),
    arguments: jspb.Message.getFieldWithDefault(msg, 5, ""),
    rubyVersion: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.Cve20170898Details}
 */
proto.contrast.api.dtm.Cve20170898Details.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.Cve20170898Details;
  return proto.contrast.api.dtm.Cve20170898Details.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.Cve20170898Details} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.Cve20170898Details}
 */
proto.contrast.api.dtm.Cve20170898Details.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFormatString(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaliciousFormatGroup(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrecisionArgument(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setValueArgument(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setArguments(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRubyVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.Cve20170898Details.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.Cve20170898Details.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.Cve20170898Details} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.Cve20170898Details.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFormatString();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMaliciousFormatGroup();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPrecisionArgument();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getValueArgument();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getArguments();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRubyVersion();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string format_string = 1;
 * @return {string}
 */
proto.contrast.api.dtm.Cve20170898Details.prototype.getFormatString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Cve20170898Details} returns this
 */
proto.contrast.api.dtm.Cve20170898Details.prototype.setFormatString = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string malicious_format_group = 2;
 * @return {string}
 */
proto.contrast.api.dtm.Cve20170898Details.prototype.getMaliciousFormatGroup = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Cve20170898Details} returns this
 */
proto.contrast.api.dtm.Cve20170898Details.prototype.setMaliciousFormatGroup = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string precision_argument = 3;
 * @return {string}
 */
proto.contrast.api.dtm.Cve20170898Details.prototype.getPrecisionArgument = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Cve20170898Details} returns this
 */
proto.contrast.api.dtm.Cve20170898Details.prototype.setPrecisionArgument = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string value_argument = 4;
 * @return {string}
 */
proto.contrast.api.dtm.Cve20170898Details.prototype.getValueArgument = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Cve20170898Details} returns this
 */
proto.contrast.api.dtm.Cve20170898Details.prototype.setValueArgument = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string arguments = 5;
 * @return {string}
 */
proto.contrast.api.dtm.Cve20170898Details.prototype.getArguments = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Cve20170898Details} returns this
 */
proto.contrast.api.dtm.Cve20170898Details.prototype.setArguments = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string ruby_version = 6;
 * @return {string}
 */
proto.contrast.api.dtm.Cve20170898Details.prototype.getRubyVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Cve20170898Details} returns this
 */
proto.contrast.api.dtm.Cve20170898Details.prototype.setRubyVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.Cve201714033Details.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.Cve201714033Details.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.Cve201714033Details} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.Cve201714033Details.toObject = function(includeInstance, msg) {
  var f, obj = {
    asn1: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rubyVersion: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.Cve201714033Details}
 */
proto.contrast.api.dtm.Cve201714033Details.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.Cve201714033Details;
  return proto.contrast.api.dtm.Cve201714033Details.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.Cve201714033Details} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.Cve201714033Details}
 */
proto.contrast.api.dtm.Cve201714033Details.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsn1(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRubyVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.Cve201714033Details.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.Cve201714033Details.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.Cve201714033Details} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.Cve201714033Details.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAsn1();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRubyVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string asn1 = 1;
 * @return {string}
 */
proto.contrast.api.dtm.Cve201714033Details.prototype.getAsn1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Cve201714033Details} returns this
 */
proto.contrast.api.dtm.Cve201714033Details.prototype.setAsn1 = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ruby_version = 2;
 * @return {string}
 */
proto.contrast.api.dtm.Cve201714033Details.prototype.getRubyVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Cve201714033Details} returns this
 */
proto.contrast.api.dtm.Cve201714033Details.prototype.setRubyVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.Cve201714064Details.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.Cve201714064Details.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.Cve201714064Details} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.Cve201714064Details.toObject = function(includeInstance, msg) {
  var f, obj = {
    space: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rubyVersion: jspb.Message.getFieldWithDefault(msg, 2, ""),
    jsonVersion: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.Cve201714064Details}
 */
proto.contrast.api.dtm.Cve201714064Details.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.Cve201714064Details;
  return proto.contrast.api.dtm.Cve201714064Details.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.Cve201714064Details} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.Cve201714064Details}
 */
proto.contrast.api.dtm.Cve201714064Details.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpace(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRubyVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsonVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.Cve201714064Details.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.Cve201714064Details.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.Cve201714064Details} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.Cve201714064Details.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRubyVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getJsonVersion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string space = 1;
 * @return {string}
 */
proto.contrast.api.dtm.Cve201714064Details.prototype.getSpace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Cve201714064Details} returns this
 */
proto.contrast.api.dtm.Cve201714064Details.prototype.setSpace = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ruby_version = 2;
 * @return {string}
 */
proto.contrast.api.dtm.Cve201714064Details.prototype.getRubyVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Cve201714064Details} returns this
 */
proto.contrast.api.dtm.Cve201714064Details.prototype.setRubyVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string json_version = 3;
 * @return {string}
 */
proto.contrast.api.dtm.Cve201714064Details.prototype.getJsonVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Cve201714064Details} returns this
 */
proto.contrast.api.dtm.Cve201714064Details.prototype.setJsonVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.Cve201717405Details.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.Cve201717405Details.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.Cve201717405Details} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.Cve201717405Details.toObject = function(includeInstance, msg) {
  var f, obj = {
    method: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fileName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    rubyVersion: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.Cve201717405Details}
 */
proto.contrast.api.dtm.Cve201717405Details.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.Cve201717405Details;
  return proto.contrast.api.dtm.Cve201717405Details.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.Cve201717405Details} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.Cve201717405Details}
 */
proto.contrast.api.dtm.Cve201717405Details.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRubyVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.Cve201717405Details.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.Cve201717405Details.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.Cve201717405Details} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.Cve201717405Details.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFileName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRubyVersion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string method = 1;
 * @return {string}
 */
proto.contrast.api.dtm.Cve201717405Details.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Cve201717405Details} returns this
 */
proto.contrast.api.dtm.Cve201717405Details.prototype.setMethod = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string file_name = 2;
 * @return {string}
 */
proto.contrast.api.dtm.Cve201717405Details.prototype.getFileName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Cve201717405Details} returns this
 */
proto.contrast.api.dtm.Cve201717405Details.prototype.setFileName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string ruby_version = 3;
 * @return {string}
 */
proto.contrast.api.dtm.Cve201717405Details.prototype.getRubyVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.Cve201717405Details} returns this
 */
proto.contrast.api.dtm.Cve201717405Details.prototype.setRubyVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.HttpMethodTamperingDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.HttpMethodTamperingDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.HttpMethodTamperingDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.HttpMethodTamperingDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    method: jspb.Message.getFieldWithDefault(msg, 1, ""),
    responseCode: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.HttpMethodTamperingDetails}
 */
proto.contrast.api.dtm.HttpMethodTamperingDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.HttpMethodTamperingDetails;
  return proto.contrast.api.dtm.HttpMethodTamperingDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.HttpMethodTamperingDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.HttpMethodTamperingDetails}
 */
proto.contrast.api.dtm.HttpMethodTamperingDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResponseCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.HttpMethodTamperingDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.HttpMethodTamperingDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.HttpMethodTamperingDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.HttpMethodTamperingDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResponseCode();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string method = 1;
 * @return {string}
 */
proto.contrast.api.dtm.HttpMethodTamperingDetails.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.HttpMethodTamperingDetails} returns this
 */
proto.contrast.api.dtm.HttpMethodTamperingDetails.prototype.setMethod = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 response_code = 2;
 * @return {number}
 */
proto.contrast.api.dtm.HttpMethodTamperingDetails.prototype.getResponseCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.HttpMethodTamperingDetails} returns this
 */
proto.contrast.api.dtm.HttpMethodTamperingDetails.prototype.setResponseCode = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.UntrustedDeserializationDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.UntrustedDeserializationDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.UntrustedDeserializationDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.UntrustedDeserializationDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    command: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    deserializer: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.UntrustedDeserializationDetails}
 */
proto.contrast.api.dtm.UntrustedDeserializationDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.UntrustedDeserializationDetails;
  return proto.contrast.api.dtm.UntrustedDeserializationDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.UntrustedDeserializationDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.UntrustedDeserializationDetails}
 */
proto.contrast.api.dtm.UntrustedDeserializationDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCommand(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeserializer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.UntrustedDeserializationDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.UntrustedDeserializationDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.UntrustedDeserializationDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.UntrustedDeserializationDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommand();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getDeserializer();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool command = 1;
 * @return {boolean}
 */
proto.contrast.api.dtm.UntrustedDeserializationDetails.prototype.getCommand = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.dtm.UntrustedDeserializationDetails} returns this
 */
proto.contrast.api.dtm.UntrustedDeserializationDetails.prototype.setCommand = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string deserializer = 2;
 * @return {string}
 */
proto.contrast.api.dtm.UntrustedDeserializationDetails.prototype.getDeserializer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.UntrustedDeserializationDetails} returns this
 */
proto.contrast.api.dtm.UntrustedDeserializationDetails.prototype.setDeserializer = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.ElInjectionDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.ElInjectionDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.ElInjectionDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.ElInjectionDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    attrValue: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, ""),
    libraryFilename: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.ElInjectionDetails}
 */
proto.contrast.api.dtm.ElInjectionDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.ElInjectionDetails;
  return proto.contrast.api.dtm.ElInjectionDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.ElInjectionDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.ElInjectionDetails}
 */
proto.contrast.api.dtm.ElInjectionDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAttrValue(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLibraryFilename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.ElInjectionDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.ElInjectionDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.ElInjectionDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.ElInjectionDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttrValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLibraryFilename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string attr_value = 1;
 * @return {string}
 */
proto.contrast.api.dtm.ElInjectionDetails.prototype.getAttrValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.ElInjectionDetails} returns this
 */
proto.contrast.api.dtm.ElInjectionDetails.prototype.setAttrValue = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.contrast.api.dtm.ElInjectionDetails.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.ElInjectionDetails} returns this
 */
proto.contrast.api.dtm.ElInjectionDetails.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string library_filename = 3;
 * @return {string}
 */
proto.contrast.api.dtm.ElInjectionDetails.prototype.getLibraryFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.ElInjectionDetails} returns this
 */
proto.contrast.api.dtm.ElInjectionDetails.prototype.setLibraryFilename = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.IpBlacklistDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.IpBlacklistDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.IpBlacklistDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.IpBlacklistDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    ip: jspb.Message.getFieldWithDefault(msg, 1, ""),
    uuid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.IpBlacklistDetails}
 */
proto.contrast.api.dtm.IpBlacklistDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.IpBlacklistDetails;
  return proto.contrast.api.dtm.IpBlacklistDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.IpBlacklistDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.IpBlacklistDetails}
 */
proto.contrast.api.dtm.IpBlacklistDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.IpBlacklistDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.IpBlacklistDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.IpBlacklistDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.IpBlacklistDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string ip = 1;
 * @return {string}
 */
proto.contrast.api.dtm.IpBlacklistDetails.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.IpBlacklistDetails} returns this
 */
proto.contrast.api.dtm.IpBlacklistDetails.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.contrast.api.dtm.IpBlacklistDetails.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.IpBlacklistDetails} returns this
 */
proto.contrast.api.dtm.IpBlacklistDetails.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.MarkOfTheBeastDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.MarkOfTheBeastDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.MarkOfTheBeastDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.MarkOfTheBeastDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    number: jspb.Message.getFieldWithDefault(msg, 1, ""),
    vendor: jspb.Message.getFieldWithDefault(msg, 2, ""),
    version: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.MarkOfTheBeastDetails}
 */
proto.contrast.api.dtm.MarkOfTheBeastDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.MarkOfTheBeastDetails;
  return proto.contrast.api.dtm.MarkOfTheBeastDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.MarkOfTheBeastDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.MarkOfTheBeastDetails}
 */
proto.contrast.api.dtm.MarkOfTheBeastDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNumber(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVendor(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.MarkOfTheBeastDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.MarkOfTheBeastDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.MarkOfTheBeastDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.MarkOfTheBeastDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumber();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVendor();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string number = 1;
 * @return {string}
 */
proto.contrast.api.dtm.MarkOfTheBeastDetails.prototype.getNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.MarkOfTheBeastDetails} returns this
 */
proto.contrast.api.dtm.MarkOfTheBeastDetails.prototype.setNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string vendor = 2;
 * @return {string}
 */
proto.contrast.api.dtm.MarkOfTheBeastDetails.prototype.getVendor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.MarkOfTheBeastDetails} returns this
 */
proto.contrast.api.dtm.MarkOfTheBeastDetails.prototype.setVendor = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string version = 3;
 * @return {string}
 */
proto.contrast.api.dtm.MarkOfTheBeastDetails.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.MarkOfTheBeastDetails} returns this
 */
proto.contrast.api.dtm.MarkOfTheBeastDetails.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.PaddingOracleDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.PaddingOracleDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.PaddingOracleDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.PaddingOracleDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, ""),
    period: jspb.Message.getFieldWithDefault(msg, 2, 0),
    hits: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.PaddingOracleDetails}
 */
proto.contrast.api.dtm.PaddingOracleDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.PaddingOracleDetails;
  return proto.contrast.api.dtm.PaddingOracleDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.PaddingOracleDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.PaddingOracleDetails}
 */
proto.contrast.api.dtm.PaddingOracleDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPeriod(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.PaddingOracleDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.PaddingOracleDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.PaddingOracleDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.PaddingOracleDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPeriod();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getHits();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.contrast.api.dtm.PaddingOracleDetails.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.PaddingOracleDetails} returns this
 */
proto.contrast.api.dtm.PaddingOracleDetails.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 period = 2;
 * @return {number}
 */
proto.contrast.api.dtm.PaddingOracleDetails.prototype.getPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.PaddingOracleDetails} returns this
 */
proto.contrast.api.dtm.PaddingOracleDetails.prototype.setPeriod = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 hits = 3;
 * @return {number}
 */
proto.contrast.api.dtm.PaddingOracleDetails.prototype.getHits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.PaddingOracleDetails} returns this
 */
proto.contrast.api.dtm.PaddingOracleDetails.prototype.setHits = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.PathTraversalDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.PathTraversalDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.PathTraversalDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.PathTraversalDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.PathTraversalDetails}
 */
proto.contrast.api.dtm.PathTraversalDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.PathTraversalDetails;
  return proto.contrast.api.dtm.PathTraversalDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.PathTraversalDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.PathTraversalDetails}
 */
proto.contrast.api.dtm.PathTraversalDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.PathTraversalDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.PathTraversalDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.PathTraversalDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.PathTraversalDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.contrast.api.dtm.PathTraversalDetails.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.PathTraversalDetails} returns this
 */
proto.contrast.api.dtm.PathTraversalDetails.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, ""),
    findingsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails}
 */
proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails;
  return proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails}
 */
proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 2:
      var value = /** @type {!Array<!proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails.Finding>} */ (reader.readPackedEnum());
      msg.setFindingsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFindingsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails.Finding = {
  CUSTOM_CODE_ACCESSING_SYSTEM_FILES: 0,
  COMMON_FILE_EXPLOITS: 1
};

/**
 * optional string path = 1;
 * @return {string}
 */
proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails} returns this
 */
proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Finding findings = 2;
 * @return {!Array<!proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails.Finding>}
 */
proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails.prototype.getFindingsList = function() {
  return /** @type {!Array<!proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails.Finding>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<!proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails.Finding>} value
 * @return {!proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails} returns this
 */
proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails.prototype.setFindingsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails.Finding} value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails} returns this
 */
proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails.prototype.addFindings = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails} returns this
 */
proto.contrast.api.dtm.PathTraversalSemanticAnalysisDetails.prototype.clearFindingsList = function() {
  return this.setFindingsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.ReDosDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.ReDosDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.ReDosDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.ReDosDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    timesAccessed: jspb.Message.getFieldWithDefault(msg, 1, 0),
    executionTimeMs: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pattern: jspb.Message.getFieldWithDefault(msg, 3, ""),
    offendingString: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.ReDosDetails}
 */
proto.contrast.api.dtm.ReDosDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.ReDosDetails;
  return proto.contrast.api.dtm.ReDosDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.ReDosDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.ReDosDetails}
 */
proto.contrast.api.dtm.ReDosDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimesAccessed(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExecutionTimeMs(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPattern(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOffendingString(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.ReDosDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.ReDosDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.ReDosDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.ReDosDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimesAccessed();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getExecutionTimeMs();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getPattern();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOffendingString();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int32 times_accessed = 1;
 * @return {number}
 */
proto.contrast.api.dtm.ReDosDetails.prototype.getTimesAccessed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.ReDosDetails} returns this
 */
proto.contrast.api.dtm.ReDosDetails.prototype.setTimesAccessed = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 execution_time_ms = 2;
 * @return {number}
 */
proto.contrast.api.dtm.ReDosDetails.prototype.getExecutionTimeMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.ReDosDetails} returns this
 */
proto.contrast.api.dtm.ReDosDetails.prototype.setExecutionTimeMs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string pattern = 3;
 * @return {string}
 */
proto.contrast.api.dtm.ReDosDetails.prototype.getPattern = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.ReDosDetails} returns this
 */
proto.contrast.api.dtm.ReDosDetails.prototype.setPattern = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string offending_string = 4;
 * @return {string}
 */
proto.contrast.api.dtm.ReDosDetails.prototype.getOffendingString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.ReDosDetails} returns this
 */
proto.contrast.api.dtm.ReDosDetails.prototype.setOffendingString = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.SsjsInjectionDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.SsjsInjectionDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.SsjsInjectionDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.SsjsInjectionDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    codeString: jspb.Message.getFieldWithDefault(msg, 1, ""),
    startIdx: jspb.Message.getFieldWithDefault(msg, 2, 0),
    endIdx: jspb.Message.getFieldWithDefault(msg, 3, 0),
    boundaryOverrunIdx: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.SsjsInjectionDetails}
 */
proto.contrast.api.dtm.SsjsInjectionDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.SsjsInjectionDetails;
  return proto.contrast.api.dtm.SsjsInjectionDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.SsjsInjectionDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.SsjsInjectionDetails}
 */
proto.contrast.api.dtm.SsjsInjectionDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCodeString(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartIdx(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEndIdx(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBoundaryOverrunIdx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.SsjsInjectionDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.SsjsInjectionDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.SsjsInjectionDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.SsjsInjectionDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCodeString();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStartIdx();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getEndIdx();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getBoundaryOverrunIdx();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string code_string = 1;
 * @return {string}
 */
proto.contrast.api.dtm.SsjsInjectionDetails.prototype.getCodeString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.SsjsInjectionDetails} returns this
 */
proto.contrast.api.dtm.SsjsInjectionDetails.prototype.setCodeString = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 start_idx = 2;
 * @return {number}
 */
proto.contrast.api.dtm.SsjsInjectionDetails.prototype.getStartIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.SsjsInjectionDetails} returns this
 */
proto.contrast.api.dtm.SsjsInjectionDetails.prototype.setStartIdx = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 end_idx = 3;
 * @return {number}
 */
proto.contrast.api.dtm.SsjsInjectionDetails.prototype.getEndIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.SsjsInjectionDetails} returns this
 */
proto.contrast.api.dtm.SsjsInjectionDetails.prototype.setEndIdx = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 boundary_overrun_idx = 4;
 * @return {number}
 */
proto.contrast.api.dtm.SsjsInjectionDetails.prototype.getBoundaryOverrunIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.SsjsInjectionDetails} returns this
 */
proto.contrast.api.dtm.SsjsInjectionDetails.prototype.setBoundaryOverrunIdx = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.SqlInjectionDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.SqlInjectionDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.SqlInjectionDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.SqlInjectionDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    startIdx: jspb.Message.getFieldWithDefault(msg, 1, 0),
    endIdx: jspb.Message.getFieldWithDefault(msg, 2, 0),
    boundaryOverrunIdx: jspb.Message.getFieldWithDefault(msg, 3, 0),
    inputBoundaryIdx: jspb.Message.getFieldWithDefault(msg, 4, 0),
    query: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.SqlInjectionDetails}
 */
proto.contrast.api.dtm.SqlInjectionDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.SqlInjectionDetails;
  return proto.contrast.api.dtm.SqlInjectionDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.SqlInjectionDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.SqlInjectionDetails}
 */
proto.contrast.api.dtm.SqlInjectionDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartIdx(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEndIdx(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBoundaryOverrunIdx(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInputBoundaryIdx(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.SqlInjectionDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.SqlInjectionDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.SqlInjectionDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.SqlInjectionDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartIdx();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getEndIdx();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getBoundaryOverrunIdx();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getInputBoundaryIdx();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional int32 start_idx = 1;
 * @return {number}
 */
proto.contrast.api.dtm.SqlInjectionDetails.prototype.getStartIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.SqlInjectionDetails} returns this
 */
proto.contrast.api.dtm.SqlInjectionDetails.prototype.setStartIdx = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 end_idx = 2;
 * @return {number}
 */
proto.contrast.api.dtm.SqlInjectionDetails.prototype.getEndIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.SqlInjectionDetails} returns this
 */
proto.contrast.api.dtm.SqlInjectionDetails.prototype.setEndIdx = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 boundary_overrun_idx = 3;
 * @return {number}
 */
proto.contrast.api.dtm.SqlInjectionDetails.prototype.getBoundaryOverrunIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.SqlInjectionDetails} returns this
 */
proto.contrast.api.dtm.SqlInjectionDetails.prototype.setBoundaryOverrunIdx = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 input_boundary_idx = 4;
 * @return {number}
 */
proto.contrast.api.dtm.SqlInjectionDetails.prototype.getInputBoundaryIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.SqlInjectionDetails} returns this
 */
proto.contrast.api.dtm.SqlInjectionDetails.prototype.setInputBoundaryIdx = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string query = 5;
 * @return {string}
 */
proto.contrast.api.dtm.SqlInjectionDetails.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.SqlInjectionDetails} returns this
 */
proto.contrast.api.dtm.SqlInjectionDetails.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 1, ""),
    finding: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails}
 */
proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails;
  return proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails}
 */
proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 2:
      var value = /** @type {!proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails.Finding} */ (reader.readEnum());
      msg.setFinding(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFinding();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails.Finding = {
  CHAINING: 0,
  SUSPICIOUS_UNION: 1,
  DANGEROUS_FUNCTION: 2,
  TAUTOLOGY: 3
};

/**
 * optional string query = 1;
 * @return {string}
 */
proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails} returns this
 */
proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Finding finding = 2;
 * @return {!proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails.Finding}
 */
proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails.prototype.getFinding = function() {
  return /** @type {!proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails.Finding} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails.Finding} value
 * @return {!proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails} returns this
 */
proto.contrast.api.dtm.SqlInjectionSemanticAnalysisDetails.prototype.setFinding = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.NoSqlInjectionDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.NoSqlInjectionDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.NoSqlInjectionDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.NoSqlInjectionDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    startIdx: jspb.Message.getFieldWithDefault(msg, 1, 0),
    endIdx: jspb.Message.getFieldWithDefault(msg, 2, 0),
    boundaryOverrunIdx: jspb.Message.getFieldWithDefault(msg, 3, 0),
    inputBoundaryIdx: jspb.Message.getFieldWithDefault(msg, 4, 0),
    query: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.NoSqlInjectionDetails}
 */
proto.contrast.api.dtm.NoSqlInjectionDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.NoSqlInjectionDetails;
  return proto.contrast.api.dtm.NoSqlInjectionDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.NoSqlInjectionDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.NoSqlInjectionDetails}
 */
proto.contrast.api.dtm.NoSqlInjectionDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartIdx(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEndIdx(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBoundaryOverrunIdx(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInputBoundaryIdx(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.NoSqlInjectionDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.NoSqlInjectionDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.NoSqlInjectionDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.NoSqlInjectionDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartIdx();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getEndIdx();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getBoundaryOverrunIdx();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getInputBoundaryIdx();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional int32 start_idx = 1;
 * @return {number}
 */
proto.contrast.api.dtm.NoSqlInjectionDetails.prototype.getStartIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.NoSqlInjectionDetails} returns this
 */
proto.contrast.api.dtm.NoSqlInjectionDetails.prototype.setStartIdx = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 end_idx = 2;
 * @return {number}
 */
proto.contrast.api.dtm.NoSqlInjectionDetails.prototype.getEndIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.NoSqlInjectionDetails} returns this
 */
proto.contrast.api.dtm.NoSqlInjectionDetails.prototype.setEndIdx = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 boundary_overrun_idx = 3;
 * @return {number}
 */
proto.contrast.api.dtm.NoSqlInjectionDetails.prototype.getBoundaryOverrunIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.NoSqlInjectionDetails} returns this
 */
proto.contrast.api.dtm.NoSqlInjectionDetails.prototype.setBoundaryOverrunIdx = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 input_boundary_idx = 4;
 * @return {number}
 */
proto.contrast.api.dtm.NoSqlInjectionDetails.prototype.getInputBoundaryIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.NoSqlInjectionDetails} returns this
 */
proto.contrast.api.dtm.NoSqlInjectionDetails.prototype.setInputBoundaryIdx = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string query = 5;
 * @return {string}
 */
proto.contrast.api.dtm.NoSqlInjectionDetails.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.NoSqlInjectionDetails} returns this
 */
proto.contrast.api.dtm.NoSqlInjectionDetails.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.SsrfDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.SsrfDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.SsrfDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.SsrfDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.SsrfDetails}
 */
proto.contrast.api.dtm.SsrfDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.SsrfDetails;
  return proto.contrast.api.dtm.SsrfDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.SsrfDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.SsrfDetails}
 */
proto.contrast.api.dtm.SsrfDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.SsrfDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.SsrfDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.SsrfDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.SsrfDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.contrast.api.dtm.SsrfDetails.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.SsrfDetails} returns this
 */
proto.contrast.api.dtm.SsrfDetails.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.VirtualPatchDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.VirtualPatchDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.VirtualPatchDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.VirtualPatchDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.VirtualPatchDetails}
 */
proto.contrast.api.dtm.VirtualPatchDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.VirtualPatchDetails;
  return proto.contrast.api.dtm.VirtualPatchDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.VirtualPatchDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.VirtualPatchDetails}
 */
proto.contrast.api.dtm.VirtualPatchDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.VirtualPatchDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.VirtualPatchDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.VirtualPatchDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.VirtualPatchDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.contrast.api.dtm.VirtualPatchDetails.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.VirtualPatchDetails} returns this
 */
proto.contrast.api.dtm.VirtualPatchDetails.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contrast.api.dtm.XssDetails.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.XssDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.XssDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.XssDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.XssDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    input: jspb.Message.getFieldWithDefault(msg, 1, ""),
    matchesList: jspb.Message.toObjectList(msg.getMatchesList(),
    proto.contrast.api.dtm.XssMatch.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.XssDetails}
 */
proto.contrast.api.dtm.XssDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.XssDetails;
  return proto.contrast.api.dtm.XssDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.XssDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.XssDetails}
 */
proto.contrast.api.dtm.XssDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInput(value);
      break;
    case 2:
      var value = new proto.contrast.api.dtm.XssMatch;
      reader.readMessage(value,proto.contrast.api.dtm.XssMatch.deserializeBinaryFromReader);
      msg.addMatches(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.XssDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.XssDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.XssDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.XssDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInput();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMatchesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.contrast.api.dtm.XssMatch.serializeBinaryToWriter
    );
  }
};


/**
 * optional string input = 1;
 * @return {string}
 */
proto.contrast.api.dtm.XssDetails.prototype.getInput = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.XssDetails} returns this
 */
proto.contrast.api.dtm.XssDetails.prototype.setInput = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated XssMatch matches = 2;
 * @return {!Array<!proto.contrast.api.dtm.XssMatch>}
 */
proto.contrast.api.dtm.XssDetails.prototype.getMatchesList = function() {
  return /** @type{!Array<!proto.contrast.api.dtm.XssMatch>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.dtm.XssMatch, 2));
};


/**
 * @param {!Array<!proto.contrast.api.dtm.XssMatch>} value
 * @return {!proto.contrast.api.dtm.XssDetails} returns this
*/
proto.contrast.api.dtm.XssDetails.prototype.setMatchesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.contrast.api.dtm.XssMatch=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.dtm.XssMatch}
 */
proto.contrast.api.dtm.XssDetails.prototype.addMatches = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.contrast.api.dtm.XssMatch, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.dtm.XssDetails} returns this
 */
proto.contrast.api.dtm.XssDetails.prototype.clearMatchesList = function() {
  return this.setMatchesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.XssMatch.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.XssMatch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.XssMatch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.XssMatch.toObject = function(includeInstance, msg) {
  var f, obj = {
    evidenceStartMs: jspb.Message.getFieldWithDefault(msg, 1, 0),
    evidence: jspb.Message.getFieldWithDefault(msg, 2, ""),
    offset: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.XssMatch}
 */
proto.contrast.api.dtm.XssMatch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.XssMatch;
  return proto.contrast.api.dtm.XssMatch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.XssMatch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.XssMatch}
 */
proto.contrast.api.dtm.XssMatch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEvidenceStartMs(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEvidence(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.XssMatch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.XssMatch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.XssMatch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.XssMatch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvidenceStartMs();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getEvidence();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int64 evidence_start_ms = 1;
 * @return {number}
 */
proto.contrast.api.dtm.XssMatch.prototype.getEvidenceStartMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.XssMatch} returns this
 */
proto.contrast.api.dtm.XssMatch.prototype.setEvidenceStartMs = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string evidence = 2;
 * @return {string}
 */
proto.contrast.api.dtm.XssMatch.prototype.getEvidence = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.XssMatch} returns this
 */
proto.contrast.api.dtm.XssMatch.prototype.setEvidence = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 offset = 3;
 * @return {number}
 */
proto.contrast.api.dtm.XssMatch.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.XssMatch} returns this
 */
proto.contrast.api.dtm.XssMatch.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contrast.api.dtm.XxeDetails.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.XxeDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.XxeDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.XxeDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.XxeDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    xml: jspb.Message.getFieldWithDefault(msg, 1, ""),
    declaredEntitiesList: jspb.Message.toObjectList(msg.getDeclaredEntitiesList(),
    proto.contrast.api.dtm.XxeMatch.toObject, includeInstance),
    entitiesResolvedList: jspb.Message.toObjectList(msg.getEntitiesResolvedList(),
    proto.contrast.api.dtm.XxeWrapper.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.XxeDetails}
 */
proto.contrast.api.dtm.XxeDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.XxeDetails;
  return proto.contrast.api.dtm.XxeDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.XxeDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.XxeDetails}
 */
proto.contrast.api.dtm.XxeDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setXml(value);
      break;
    case 2:
      var value = new proto.contrast.api.dtm.XxeMatch;
      reader.readMessage(value,proto.contrast.api.dtm.XxeMatch.deserializeBinaryFromReader);
      msg.addDeclaredEntities(value);
      break;
    case 3:
      var value = new proto.contrast.api.dtm.XxeWrapper;
      reader.readMessage(value,proto.contrast.api.dtm.XxeWrapper.deserializeBinaryFromReader);
      msg.addEntitiesResolved(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.XxeDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.XxeDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.XxeDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.XxeDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getXml();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDeclaredEntitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.contrast.api.dtm.XxeMatch.serializeBinaryToWriter
    );
  }
  f = message.getEntitiesResolvedList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.contrast.api.dtm.XxeWrapper.serializeBinaryToWriter
    );
  }
};


/**
 * optional string xml = 1;
 * @return {string}
 */
proto.contrast.api.dtm.XxeDetails.prototype.getXml = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.XxeDetails} returns this
 */
proto.contrast.api.dtm.XxeDetails.prototype.setXml = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated XxeMatch declared_entities = 2;
 * @return {!Array<!proto.contrast.api.dtm.XxeMatch>}
 */
proto.contrast.api.dtm.XxeDetails.prototype.getDeclaredEntitiesList = function() {
  return /** @type{!Array<!proto.contrast.api.dtm.XxeMatch>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.dtm.XxeMatch, 2));
};


/**
 * @param {!Array<!proto.contrast.api.dtm.XxeMatch>} value
 * @return {!proto.contrast.api.dtm.XxeDetails} returns this
*/
proto.contrast.api.dtm.XxeDetails.prototype.setDeclaredEntitiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.contrast.api.dtm.XxeMatch=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.dtm.XxeMatch}
 */
proto.contrast.api.dtm.XxeDetails.prototype.addDeclaredEntities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.contrast.api.dtm.XxeMatch, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.dtm.XxeDetails} returns this
 */
proto.contrast.api.dtm.XxeDetails.prototype.clearDeclaredEntitiesList = function() {
  return this.setDeclaredEntitiesList([]);
};


/**
 * repeated XxeWrapper entities_resolved = 3;
 * @return {!Array<!proto.contrast.api.dtm.XxeWrapper>}
 */
proto.contrast.api.dtm.XxeDetails.prototype.getEntitiesResolvedList = function() {
  return /** @type{!Array<!proto.contrast.api.dtm.XxeWrapper>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.dtm.XxeWrapper, 3));
};


/**
 * @param {!Array<!proto.contrast.api.dtm.XxeWrapper>} value
 * @return {!proto.contrast.api.dtm.XxeDetails} returns this
*/
proto.contrast.api.dtm.XxeDetails.prototype.setEntitiesResolvedList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.contrast.api.dtm.XxeWrapper=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.dtm.XxeWrapper}
 */
proto.contrast.api.dtm.XxeDetails.prototype.addEntitiesResolved = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.contrast.api.dtm.XxeWrapper, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.dtm.XxeDetails} returns this
 */
proto.contrast.api.dtm.XxeDetails.prototype.clearEntitiesResolvedList = function() {
  return this.setEntitiesResolvedList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.XxeMatch.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.XxeMatch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.XxeMatch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.XxeMatch.toObject = function(includeInstance, msg) {
  var f, obj = {
    startIdx: jspb.Message.getFieldWithDefault(msg, 1, 0),
    endIdx: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.XxeMatch}
 */
proto.contrast.api.dtm.XxeMatch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.XxeMatch;
  return proto.contrast.api.dtm.XxeMatch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.XxeMatch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.XxeMatch}
 */
proto.contrast.api.dtm.XxeMatch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartIdx(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEndIdx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.XxeMatch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.XxeMatch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.XxeMatch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.XxeMatch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartIdx();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getEndIdx();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 start_idx = 1;
 * @return {number}
 */
proto.contrast.api.dtm.XxeMatch.prototype.getStartIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.XxeMatch} returns this
 */
proto.contrast.api.dtm.XxeMatch.prototype.setStartIdx = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 end_idx = 2;
 * @return {number}
 */
proto.contrast.api.dtm.XxeMatch.prototype.getEndIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.XxeMatch} returns this
 */
proto.contrast.api.dtm.XxeMatch.prototype.setEndIdx = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.XxeWrapper.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.XxeWrapper.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.XxeWrapper} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.XxeWrapper.toObject = function(includeInstance, msg) {
  var f, obj = {
    systemId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    publicId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.XxeWrapper}
 */
proto.contrast.api.dtm.XxeWrapper.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.XxeWrapper;
  return proto.contrast.api.dtm.XxeWrapper.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.XxeWrapper} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.XxeWrapper}
 */
proto.contrast.api.dtm.XxeWrapper.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSystemId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublicId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.XxeWrapper.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.XxeWrapper.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.XxeWrapper} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.XxeWrapper.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSystemId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPublicId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string system_id = 1;
 * @return {string}
 */
proto.contrast.api.dtm.XxeWrapper.prototype.getSystemId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.XxeWrapper} returns this
 */
proto.contrast.api.dtm.XxeWrapper.prototype.setSystemId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string public_id = 2;
 * @return {string}
 */
proto.contrast.api.dtm.XxeWrapper.prototype.getPublicId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.XxeWrapper} returns this
 */
proto.contrast.api.dtm.XxeWrapper.prototype.setPublicId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contrast.api.dtm.UserInput.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.UserInput.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.UserInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.UserInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.UserInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 2, ""),
    key: jspb.Message.getFieldWithDefault(msg, 3, ""),
    value: jspb.Message.getFieldWithDefault(msg, 4, ""),
    inputType: jspb.Message.getFieldWithDefault(msg, 5, 0),
    documentType: jspb.Message.getFieldWithDefault(msg, 6, 0),
    matcherIdsList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.UserInput}
 */
proto.contrast.api.dtm.UserInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.UserInput;
  return proto.contrast.api.dtm.UserInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.UserInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.UserInput}
 */
proto.contrast.api.dtm.UserInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 5:
      var value = /** @type {!proto.contrast.api.dtm.UserInput.InputType} */ (reader.readEnum());
      msg.setInputType(value);
      break;
    case 6:
      var value = /** @type {!proto.contrast.api.dtm.HttpRequest.DocumentType} */ (reader.readEnum());
      msg.setDocumentType(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addMatcherIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.UserInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.UserInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.UserInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.UserInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getInputType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getDocumentType();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getMatcherIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.contrast.api.dtm.UserInput.InputType = {
  UNDEFINED_TYPE: 0,
  BODY: 1,
  COOKIE_NAME: 2,
  COOKIE_VALUE: 3,
  HEADER: 4,
  PARAMETER_NAME: 5,
  PARAMETER_VALUE: 6,
  QUERYSTRING: 7,
  URI: 8,
  SOCKET: 9,
  JSON_VALUE: 10,
  JSON_ARRAYED_VALUE: 11,
  MULTIPART_CONTENT_TYPE: 16,
  MULTIPART_VALUE: 17,
  MULTIPART_FIELD_NAME: 18,
  MULTIPART_NAME: 19,
  XML_VALUE: 20,
  DWR_VALUE: 21,
  METHOD: 22,
  REQUEST: 23,
  UNKNOWN: 99
};

/**
 * optional string path = 2;
 * @return {string}
 */
proto.contrast.api.dtm.UserInput.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.UserInput} returns this
 */
proto.contrast.api.dtm.UserInput.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string key = 3;
 * @return {string}
 */
proto.contrast.api.dtm.UserInput.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.UserInput} returns this
 */
proto.contrast.api.dtm.UserInput.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string value = 4;
 * @return {string}
 */
proto.contrast.api.dtm.UserInput.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.UserInput} returns this
 */
proto.contrast.api.dtm.UserInput.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional InputType input_type = 5;
 * @return {!proto.contrast.api.dtm.UserInput.InputType}
 */
proto.contrast.api.dtm.UserInput.prototype.getInputType = function() {
  return /** @type {!proto.contrast.api.dtm.UserInput.InputType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.contrast.api.dtm.UserInput.InputType} value
 * @return {!proto.contrast.api.dtm.UserInput} returns this
 */
proto.contrast.api.dtm.UserInput.prototype.setInputType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional HttpRequest.DocumentType document_type = 6;
 * @return {!proto.contrast.api.dtm.HttpRequest.DocumentType}
 */
proto.contrast.api.dtm.UserInput.prototype.getDocumentType = function() {
  return /** @type {!proto.contrast.api.dtm.HttpRequest.DocumentType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.contrast.api.dtm.HttpRequest.DocumentType} value
 * @return {!proto.contrast.api.dtm.UserInput} returns this
 */
proto.contrast.api.dtm.UserInput.prototype.setDocumentType = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * repeated string matcher_ids = 7;
 * @return {!Array<string>}
 */
proto.contrast.api.dtm.UserInput.prototype.getMatcherIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.contrast.api.dtm.UserInput} returns this
 */
proto.contrast.api.dtm.UserInput.prototype.setMatcherIdsList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.dtm.UserInput} returns this
 */
proto.contrast.api.dtm.UserInput.prototype.addMatcherIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.dtm.UserInput} returns this
 */
proto.contrast.api.dtm.UserInput.prototype.clearMatcherIdsList = function() {
  return this.setMatcherIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.StackTraceElement.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.StackTraceElement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.StackTraceElement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.StackTraceElement.toObject = function(includeInstance, msg) {
  var f, obj = {
    declaringClass: jspb.Message.getFieldWithDefault(msg, 1, ""),
    methodName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fileName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    lineNumber: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.StackTraceElement}
 */
proto.contrast.api.dtm.StackTraceElement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.StackTraceElement;
  return proto.contrast.api.dtm.StackTraceElement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.StackTraceElement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.StackTraceElement}
 */
proto.contrast.api.dtm.StackTraceElement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeclaringClass(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethodName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLineNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.StackTraceElement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.StackTraceElement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.StackTraceElement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.StackTraceElement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeclaringClass();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMethodName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFileName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLineNumber();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string declaring_class = 1;
 * @return {string}
 */
proto.contrast.api.dtm.StackTraceElement.prototype.getDeclaringClass = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.StackTraceElement} returns this
 */
proto.contrast.api.dtm.StackTraceElement.prototype.setDeclaringClass = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string method_name = 2;
 * @return {string}
 */
proto.contrast.api.dtm.StackTraceElement.prototype.getMethodName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.StackTraceElement} returns this
 */
proto.contrast.api.dtm.StackTraceElement.prototype.setMethodName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string file_name = 3;
 * @return {string}
 */
proto.contrast.api.dtm.StackTraceElement.prototype.getFileName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.StackTraceElement} returns this
 */
proto.contrast.api.dtm.StackTraceElement.prototype.setFileName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 line_number = 4;
 * @return {number}
 */
proto.contrast.api.dtm.StackTraceElement.prototype.getLineNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.StackTraceElement} returns this
 */
proto.contrast.api.dtm.StackTraceElement.prototype.setLineNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contrast.api.dtm.TraceEvent.repeatedFields_ = [18,19,20,23,25];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.TraceEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.TraceEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.TraceEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.TraceEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timestampMs: jspb.Message.getFieldWithDefault(msg, 3, 0),
    thread: jspb.Message.getFieldWithDefault(msg, 4, ""),
    signature: (f = msg.getSignature()) && proto.contrast.api.dtm.TraceEventSignature.toObject(includeInstance, f),
    fieldName: jspb.Message.getFieldWithDefault(msg, 7, ""),
    context: jspb.Message.getFieldWithDefault(msg, 8, ""),
    code: jspb.Message.getFieldWithDefault(msg, 9, ""),
    object: (f = msg.getObject()) && proto.contrast.api.dtm.TraceEventObject.toObject(includeInstance, f),
    ret: (f = msg.getRet()) && proto.contrast.api.dtm.TraceEventObject.toObject(includeInstance, f),
    argsList: jspb.Message.toObjectList(msg.getArgsList(),
    proto.contrast.api.dtm.TraceEventObject.toObject, includeInstance),
    stackList: jspb.Message.toObjectList(msg.getStackList(),
    proto.contrast.api.dtm.TraceStack.toObject, includeInstance),
    eventSourcesList: jspb.Message.toObjectList(msg.getEventSourcesList(),
    proto.contrast.api.dtm.TraceEventSource.toObject, includeInstance),
    source: jspb.Message.getFieldWithDefault(msg, 21, ""),
    target: jspb.Message.getFieldWithDefault(msg, 22, ""),
    taintRangesList: jspb.Message.toObjectList(msg.getTaintRangesList(),
    proto.contrast.api.dtm.TraceTaintRange.toObject, includeInstance),
    objectId: jspb.Message.getFieldWithDefault(msg, 24, 0),
    parentObjectIdsList: jspb.Message.toObjectList(msg.getParentObjectIdsList(),
    proto.contrast.api.dtm.ParentObjectId.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.TraceEvent}
 */
proto.contrast.api.dtm.TraceEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.TraceEvent;
  return proto.contrast.api.dtm.TraceEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.TraceEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.TraceEvent}
 */
proto.contrast.api.dtm.TraceEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.contrast.api.dtm.TraceEvent.Action} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 2:
      var value = /** @type {!proto.contrast.api.dtm.TraceEvent.EventType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestampMs(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setThread(value);
      break;
    case 6:
      var value = new proto.contrast.api.dtm.TraceEventSignature;
      reader.readMessage(value,proto.contrast.api.dtm.TraceEventSignature.deserializeBinaryFromReader);
      msg.setSignature(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setFieldName(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setContext(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 16:
      var value = new proto.contrast.api.dtm.TraceEventObject;
      reader.readMessage(value,proto.contrast.api.dtm.TraceEventObject.deserializeBinaryFromReader);
      msg.setObject(value);
      break;
    case 17:
      var value = new proto.contrast.api.dtm.TraceEventObject;
      reader.readMessage(value,proto.contrast.api.dtm.TraceEventObject.deserializeBinaryFromReader);
      msg.setRet(value);
      break;
    case 18:
      var value = new proto.contrast.api.dtm.TraceEventObject;
      reader.readMessage(value,proto.contrast.api.dtm.TraceEventObject.deserializeBinaryFromReader);
      msg.addArgs(value);
      break;
    case 19:
      var value = new proto.contrast.api.dtm.TraceStack;
      reader.readMessage(value,proto.contrast.api.dtm.TraceStack.deserializeBinaryFromReader);
      msg.addStack(value);
      break;
    case 20:
      var value = new proto.contrast.api.dtm.TraceEventSource;
      reader.readMessage(value,proto.contrast.api.dtm.TraceEventSource.deserializeBinaryFromReader);
      msg.addEventSources(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setTarget(value);
      break;
    case 23:
      var value = new proto.contrast.api.dtm.TraceTaintRange;
      reader.readMessage(value,proto.contrast.api.dtm.TraceTaintRange.deserializeBinaryFromReader);
      msg.addTaintRanges(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setObjectId(value);
      break;
    case 25:
      var value = new proto.contrast.api.dtm.ParentObjectId;
      reader.readMessage(value,proto.contrast.api.dtm.ParentObjectId.deserializeBinaryFromReader);
      msg.addParentObjectIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.TraceEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.TraceEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.TraceEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.TraceEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTimestampMs();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getThread();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSignature();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.contrast.api.dtm.TraceEventSignature.serializeBinaryToWriter
    );
  }
  f = message.getFieldName();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getContext();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getObject();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.contrast.api.dtm.TraceEventObject.serializeBinaryToWriter
    );
  }
  f = message.getRet();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.contrast.api.dtm.TraceEventObject.serializeBinaryToWriter
    );
  }
  f = message.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      18,
      f,
      proto.contrast.api.dtm.TraceEventObject.serializeBinaryToWriter
    );
  }
  f = message.getStackList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      19,
      f,
      proto.contrast.api.dtm.TraceStack.serializeBinaryToWriter
    );
  }
  f = message.getEventSourcesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      20,
      f,
      proto.contrast.api.dtm.TraceEventSource.serializeBinaryToWriter
    );
  }
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getTarget();
  if (f.length > 0) {
    writer.writeString(
      22,
      f
    );
  }
  f = message.getTaintRangesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      23,
      f,
      proto.contrast.api.dtm.TraceTaintRange.serializeBinaryToWriter
    );
  }
  f = message.getObjectId();
  if (f !== 0) {
    writer.writeInt64(
      24,
      f
    );
  }
  f = message.getParentObjectIdsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      25,
      f,
      proto.contrast.api.dtm.ParentObjectId.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.contrast.api.dtm.TraceEvent.Action = {
  CREATION: 0,
  PROPAGATION: 1,
  TRIGGER: 2,
  TAG: 3,
  A2A: 4,
  A2P: 5,
  A2O: 6,
  A2R: 7,
  O2A: 8,
  O2P: 9,
  O2O: 10,
  O2R: 11,
  P2A: 12,
  P2P: 13,
  P2O: 14,
  P2R: 15
};

/**
 * @enum {number}
 */
proto.contrast.api.dtm.TraceEvent.EventType = {
  TYPE_METHOD: 0,
  TYPE_PROPAGATION: 1,
  TYPE_TAG: 2
};

/**
 * optional Action action = 1;
 * @return {!proto.contrast.api.dtm.TraceEvent.Action}
 */
proto.contrast.api.dtm.TraceEvent.prototype.getAction = function() {
  return /** @type {!proto.contrast.api.dtm.TraceEvent.Action} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.contrast.api.dtm.TraceEvent.Action} value
 * @return {!proto.contrast.api.dtm.TraceEvent} returns this
 */
proto.contrast.api.dtm.TraceEvent.prototype.setAction = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional EventType type = 2;
 * @return {!proto.contrast.api.dtm.TraceEvent.EventType}
 */
proto.contrast.api.dtm.TraceEvent.prototype.getType = function() {
  return /** @type {!proto.contrast.api.dtm.TraceEvent.EventType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.contrast.api.dtm.TraceEvent.EventType} value
 * @return {!proto.contrast.api.dtm.TraceEvent} returns this
 */
proto.contrast.api.dtm.TraceEvent.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int64 timestamp_ms = 3;
 * @return {number}
 */
proto.contrast.api.dtm.TraceEvent.prototype.getTimestampMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.TraceEvent} returns this
 */
proto.contrast.api.dtm.TraceEvent.prototype.setTimestampMs = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string thread = 4;
 * @return {string}
 */
proto.contrast.api.dtm.TraceEvent.prototype.getThread = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.TraceEvent} returns this
 */
proto.contrast.api.dtm.TraceEvent.prototype.setThread = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional TraceEventSignature signature = 6;
 * @return {?proto.contrast.api.dtm.TraceEventSignature}
 */
proto.contrast.api.dtm.TraceEvent.prototype.getSignature = function() {
  return /** @type{?proto.contrast.api.dtm.TraceEventSignature} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.TraceEventSignature, 6));
};


/**
 * @param {?proto.contrast.api.dtm.TraceEventSignature|undefined} value
 * @return {!proto.contrast.api.dtm.TraceEvent} returns this
*/
proto.contrast.api.dtm.TraceEvent.prototype.setSignature = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.TraceEvent} returns this
 */
proto.contrast.api.dtm.TraceEvent.prototype.clearSignature = function() {
  return this.setSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.TraceEvent.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string field_name = 7;
 * @return {string}
 */
proto.contrast.api.dtm.TraceEvent.prototype.getFieldName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.TraceEvent} returns this
 */
proto.contrast.api.dtm.TraceEvent.prototype.setFieldName = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string context = 8;
 * @return {string}
 */
proto.contrast.api.dtm.TraceEvent.prototype.getContext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.TraceEvent} returns this
 */
proto.contrast.api.dtm.TraceEvent.prototype.setContext = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string code = 9;
 * @return {string}
 */
proto.contrast.api.dtm.TraceEvent.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.TraceEvent} returns this
 */
proto.contrast.api.dtm.TraceEvent.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional TraceEventObject object = 16;
 * @return {?proto.contrast.api.dtm.TraceEventObject}
 */
proto.contrast.api.dtm.TraceEvent.prototype.getObject = function() {
  return /** @type{?proto.contrast.api.dtm.TraceEventObject} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.TraceEventObject, 16));
};


/**
 * @param {?proto.contrast.api.dtm.TraceEventObject|undefined} value
 * @return {!proto.contrast.api.dtm.TraceEvent} returns this
*/
proto.contrast.api.dtm.TraceEvent.prototype.setObject = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.TraceEvent} returns this
 */
proto.contrast.api.dtm.TraceEvent.prototype.clearObject = function() {
  return this.setObject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.TraceEvent.prototype.hasObject = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional TraceEventObject ret = 17;
 * @return {?proto.contrast.api.dtm.TraceEventObject}
 */
proto.contrast.api.dtm.TraceEvent.prototype.getRet = function() {
  return /** @type{?proto.contrast.api.dtm.TraceEventObject} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.dtm.TraceEventObject, 17));
};


/**
 * @param {?proto.contrast.api.dtm.TraceEventObject|undefined} value
 * @return {!proto.contrast.api.dtm.TraceEvent} returns this
*/
proto.contrast.api.dtm.TraceEvent.prototype.setRet = function(value) {
  return jspb.Message.setWrapperField(this, 17, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.dtm.TraceEvent} returns this
 */
proto.contrast.api.dtm.TraceEvent.prototype.clearRet = function() {
  return this.setRet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.dtm.TraceEvent.prototype.hasRet = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * repeated TraceEventObject args = 18;
 * @return {!Array<!proto.contrast.api.dtm.TraceEventObject>}
 */
proto.contrast.api.dtm.TraceEvent.prototype.getArgsList = function() {
  return /** @type{!Array<!proto.contrast.api.dtm.TraceEventObject>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.dtm.TraceEventObject, 18));
};


/**
 * @param {!Array<!proto.contrast.api.dtm.TraceEventObject>} value
 * @return {!proto.contrast.api.dtm.TraceEvent} returns this
*/
proto.contrast.api.dtm.TraceEvent.prototype.setArgsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 18, value);
};


/**
 * @param {!proto.contrast.api.dtm.TraceEventObject=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.dtm.TraceEventObject}
 */
proto.contrast.api.dtm.TraceEvent.prototype.addArgs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 18, opt_value, proto.contrast.api.dtm.TraceEventObject, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.dtm.TraceEvent} returns this
 */
proto.contrast.api.dtm.TraceEvent.prototype.clearArgsList = function() {
  return this.setArgsList([]);
};


/**
 * repeated TraceStack stack = 19;
 * @return {!Array<!proto.contrast.api.dtm.TraceStack>}
 */
proto.contrast.api.dtm.TraceEvent.prototype.getStackList = function() {
  return /** @type{!Array<!proto.contrast.api.dtm.TraceStack>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.dtm.TraceStack, 19));
};


/**
 * @param {!Array<!proto.contrast.api.dtm.TraceStack>} value
 * @return {!proto.contrast.api.dtm.TraceEvent} returns this
*/
proto.contrast.api.dtm.TraceEvent.prototype.setStackList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 19, value);
};


/**
 * @param {!proto.contrast.api.dtm.TraceStack=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.dtm.TraceStack}
 */
proto.contrast.api.dtm.TraceEvent.prototype.addStack = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 19, opt_value, proto.contrast.api.dtm.TraceStack, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.dtm.TraceEvent} returns this
 */
proto.contrast.api.dtm.TraceEvent.prototype.clearStackList = function() {
  return this.setStackList([]);
};


/**
 * repeated TraceEventSource event_sources = 20;
 * @return {!Array<!proto.contrast.api.dtm.TraceEventSource>}
 */
proto.contrast.api.dtm.TraceEvent.prototype.getEventSourcesList = function() {
  return /** @type{!Array<!proto.contrast.api.dtm.TraceEventSource>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.dtm.TraceEventSource, 20));
};


/**
 * @param {!Array<!proto.contrast.api.dtm.TraceEventSource>} value
 * @return {!proto.contrast.api.dtm.TraceEvent} returns this
*/
proto.contrast.api.dtm.TraceEvent.prototype.setEventSourcesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 20, value);
};


/**
 * @param {!proto.contrast.api.dtm.TraceEventSource=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.dtm.TraceEventSource}
 */
proto.contrast.api.dtm.TraceEvent.prototype.addEventSources = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 20, opt_value, proto.contrast.api.dtm.TraceEventSource, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.dtm.TraceEvent} returns this
 */
proto.contrast.api.dtm.TraceEvent.prototype.clearEventSourcesList = function() {
  return this.setEventSourcesList([]);
};


/**
 * optional string source = 21;
 * @return {string}
 */
proto.contrast.api.dtm.TraceEvent.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.TraceEvent} returns this
 */
proto.contrast.api.dtm.TraceEvent.prototype.setSource = function(value) {
  return jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * optional string target = 22;
 * @return {string}
 */
proto.contrast.api.dtm.TraceEvent.prototype.getTarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.TraceEvent} returns this
 */
proto.contrast.api.dtm.TraceEvent.prototype.setTarget = function(value) {
  return jspb.Message.setProto3StringField(this, 22, value);
};


/**
 * repeated TraceTaintRange taint_ranges = 23;
 * @return {!Array<!proto.contrast.api.dtm.TraceTaintRange>}
 */
proto.contrast.api.dtm.TraceEvent.prototype.getTaintRangesList = function() {
  return /** @type{!Array<!proto.contrast.api.dtm.TraceTaintRange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.dtm.TraceTaintRange, 23));
};


/**
 * @param {!Array<!proto.contrast.api.dtm.TraceTaintRange>} value
 * @return {!proto.contrast.api.dtm.TraceEvent} returns this
*/
proto.contrast.api.dtm.TraceEvent.prototype.setTaintRangesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 23, value);
};


/**
 * @param {!proto.contrast.api.dtm.TraceTaintRange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.dtm.TraceTaintRange}
 */
proto.contrast.api.dtm.TraceEvent.prototype.addTaintRanges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 23, opt_value, proto.contrast.api.dtm.TraceTaintRange, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.dtm.TraceEvent} returns this
 */
proto.contrast.api.dtm.TraceEvent.prototype.clearTaintRangesList = function() {
  return this.setTaintRangesList([]);
};


/**
 * optional int64 object_id = 24;
 * @return {number}
 */
proto.contrast.api.dtm.TraceEvent.prototype.getObjectId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.TraceEvent} returns this
 */
proto.contrast.api.dtm.TraceEvent.prototype.setObjectId = function(value) {
  return jspb.Message.setProto3IntField(this, 24, value);
};


/**
 * repeated ParentObjectId parent_object_ids = 25;
 * @return {!Array<!proto.contrast.api.dtm.ParentObjectId>}
 */
proto.contrast.api.dtm.TraceEvent.prototype.getParentObjectIdsList = function() {
  return /** @type{!Array<!proto.contrast.api.dtm.ParentObjectId>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.dtm.ParentObjectId, 25));
};


/**
 * @param {!Array<!proto.contrast.api.dtm.ParentObjectId>} value
 * @return {!proto.contrast.api.dtm.TraceEvent} returns this
*/
proto.contrast.api.dtm.TraceEvent.prototype.setParentObjectIdsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 25, value);
};


/**
 * @param {!proto.contrast.api.dtm.ParentObjectId=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.dtm.ParentObjectId}
 */
proto.contrast.api.dtm.TraceEvent.prototype.addParentObjectIds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 25, opt_value, proto.contrast.api.dtm.ParentObjectId, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.dtm.TraceEvent} returns this
 */
proto.contrast.api.dtm.TraceEvent.prototype.clearParentObjectIdsList = function() {
  return this.setParentObjectIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contrast.api.dtm.TraceEventSignature.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.TraceEventSignature.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.TraceEventSignature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.TraceEventSignature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.TraceEventSignature.toObject = function(includeInstance, msg) {
  var f, obj = {
    returnType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    className: jspb.Message.getFieldWithDefault(msg, 2, ""),
    methodName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    argTypesList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    constructor: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    voidMethod: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    flags: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.TraceEventSignature}
 */
proto.contrast.api.dtm.TraceEventSignature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.TraceEventSignature;
  return proto.contrast.api.dtm.TraceEventSignature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.TraceEventSignature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.TraceEventSignature}
 */
proto.contrast.api.dtm.TraceEventSignature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReturnType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethodName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addArgTypes(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConstructor(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVoidMethod(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFlags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.TraceEventSignature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.TraceEventSignature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.TraceEventSignature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.TraceEventSignature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReturnType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClassName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMethodName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getArgTypesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getConstructor();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getVoidMethod();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getFlags();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional string return_type = 1;
 * @return {string}
 */
proto.contrast.api.dtm.TraceEventSignature.prototype.getReturnType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.TraceEventSignature} returns this
 */
proto.contrast.api.dtm.TraceEventSignature.prototype.setReturnType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string class_name = 2;
 * @return {string}
 */
proto.contrast.api.dtm.TraceEventSignature.prototype.getClassName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.TraceEventSignature} returns this
 */
proto.contrast.api.dtm.TraceEventSignature.prototype.setClassName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string method_name = 3;
 * @return {string}
 */
proto.contrast.api.dtm.TraceEventSignature.prototype.getMethodName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.TraceEventSignature} returns this
 */
proto.contrast.api.dtm.TraceEventSignature.prototype.setMethodName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string arg_types = 4;
 * @return {!Array<string>}
 */
proto.contrast.api.dtm.TraceEventSignature.prototype.getArgTypesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.contrast.api.dtm.TraceEventSignature} returns this
 */
proto.contrast.api.dtm.TraceEventSignature.prototype.setArgTypesList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.dtm.TraceEventSignature} returns this
 */
proto.contrast.api.dtm.TraceEventSignature.prototype.addArgTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.dtm.TraceEventSignature} returns this
 */
proto.contrast.api.dtm.TraceEventSignature.prototype.clearArgTypesList = function() {
  return this.setArgTypesList([]);
};


/**
 * optional bool constructor = 5;
 * @return {boolean}
 */
proto.contrast.api.dtm.TraceEventSignature.prototype.getConstructor = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.dtm.TraceEventSignature} returns this
 */
proto.contrast.api.dtm.TraceEventSignature.prototype.setConstructor = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool void_method = 6;
 * @return {boolean}
 */
proto.contrast.api.dtm.TraceEventSignature.prototype.getVoidMethod = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.dtm.TraceEventSignature} returns this
 */
proto.contrast.api.dtm.TraceEventSignature.prototype.setVoidMethod = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional int32 flags = 7;
 * @return {number}
 */
proto.contrast.api.dtm.TraceEventSignature.prototype.getFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.TraceEventSignature} returns this
 */
proto.contrast.api.dtm.TraceEventSignature.prototype.setFlags = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.TraceEventSource.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.TraceEventSource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.TraceEventSource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.TraceEventSource.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.TraceEventSource}
 */
proto.contrast.api.dtm.TraceEventSource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.TraceEventSource;
  return proto.contrast.api.dtm.TraceEventSource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.TraceEventSource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.TraceEventSource}
 */
proto.contrast.api.dtm.TraceEventSource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.TraceEventSource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.TraceEventSource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.TraceEventSource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.TraceEventSource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.contrast.api.dtm.TraceEventSource.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.TraceEventSource} returns this
 */
proto.contrast.api.dtm.TraceEventSource.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.contrast.api.dtm.TraceEventSource.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.TraceEventSource} returns this
 */
proto.contrast.api.dtm.TraceEventSource.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contrast.api.dtm.TraceEventObject.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.TraceEventObject.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.TraceEventObject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.TraceEventObject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.TraceEventObject.toObject = function(includeInstance, msg) {
  var f, obj = {
    tracked: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    value: jspb.Message.getFieldWithDefault(msg, 2, ""),
    rangesList: jspb.Message.toObjectList(msg.getRangesList(),
    proto.contrast.api.dtm.TraceTaintRange.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.TraceEventObject}
 */
proto.contrast.api.dtm.TraceEventObject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.TraceEventObject;
  return proto.contrast.api.dtm.TraceEventObject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.TraceEventObject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.TraceEventObject}
 */
proto.contrast.api.dtm.TraceEventObject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTracked(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = new proto.contrast.api.dtm.TraceTaintRange;
      reader.readMessage(value,proto.contrast.api.dtm.TraceTaintRange.deserializeBinaryFromReader);
      msg.addRanges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.TraceEventObject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.TraceEventObject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.TraceEventObject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.TraceEventObject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTracked();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRangesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.contrast.api.dtm.TraceTaintRange.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool tracked = 1;
 * @return {boolean}
 */
proto.contrast.api.dtm.TraceEventObject.prototype.getTracked = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.dtm.TraceEventObject} returns this
 */
proto.contrast.api.dtm.TraceEventObject.prototype.setTracked = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.contrast.api.dtm.TraceEventObject.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.TraceEventObject} returns this
 */
proto.contrast.api.dtm.TraceEventObject.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated TraceTaintRange ranges = 3;
 * @return {!Array<!proto.contrast.api.dtm.TraceTaintRange>}
 */
proto.contrast.api.dtm.TraceEventObject.prototype.getRangesList = function() {
  return /** @type{!Array<!proto.contrast.api.dtm.TraceTaintRange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.dtm.TraceTaintRange, 3));
};


/**
 * @param {!Array<!proto.contrast.api.dtm.TraceTaintRange>} value
 * @return {!proto.contrast.api.dtm.TraceEventObject} returns this
*/
proto.contrast.api.dtm.TraceEventObject.prototype.setRangesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.contrast.api.dtm.TraceTaintRange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.dtm.TraceTaintRange}
 */
proto.contrast.api.dtm.TraceEventObject.prototype.addRanges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.contrast.api.dtm.TraceTaintRange, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.dtm.TraceEventObject} returns this
 */
proto.contrast.api.dtm.TraceEventObject.prototype.clearRangesList = function() {
  return this.setRangesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.TraceTaintRange.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.TraceTaintRange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.TraceTaintRange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.TraceTaintRange.toObject = function(includeInstance, msg) {
  var f, obj = {
    tag: jspb.Message.getFieldWithDefault(msg, 1, ""),
    range: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.TraceTaintRange}
 */
proto.contrast.api.dtm.TraceTaintRange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.TraceTaintRange;
  return proto.contrast.api.dtm.TraceTaintRange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.TraceTaintRange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.TraceTaintRange}
 */
proto.contrast.api.dtm.TraceTaintRange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTag(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.TraceTaintRange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.TraceTaintRange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.TraceTaintRange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.TraceTaintRange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTag();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRange();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string tag = 1;
 * @return {string}
 */
proto.contrast.api.dtm.TraceTaintRange.prototype.getTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.TraceTaintRange} returns this
 */
proto.contrast.api.dtm.TraceTaintRange.prototype.setTag = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string range = 2;
 * @return {string}
 */
proto.contrast.api.dtm.TraceTaintRange.prototype.getRange = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.TraceTaintRange} returns this
 */
proto.contrast.api.dtm.TraceTaintRange.prototype.setRange = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.ParentObjectId.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.ParentObjectId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.ParentObjectId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.ParentObjectId.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.ParentObjectId}
 */
proto.contrast.api.dtm.ParentObjectId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.ParentObjectId;
  return proto.contrast.api.dtm.ParentObjectId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.ParentObjectId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.ParentObjectId}
 */
proto.contrast.api.dtm.ParentObjectId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.ParentObjectId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.ParentObjectId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.ParentObjectId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.ParentObjectId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.contrast.api.dtm.ParentObjectId.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.ParentObjectId} returns this
 */
proto.contrast.api.dtm.ParentObjectId.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.TraceStack.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.TraceStack.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.TraceStack} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.TraceStack.toObject = function(includeInstance, msg) {
  var f, obj = {
    signature: jspb.Message.getFieldWithDefault(msg, 1, ""),
    declaringClass: jspb.Message.getFieldWithDefault(msg, 2, ""),
    methodName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    fileName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    lineNumber: jspb.Message.getFieldWithDefault(msg, 5, 0),
    type: jspb.Message.getFieldWithDefault(msg, 6, ""),
    eval: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.TraceStack}
 */
proto.contrast.api.dtm.TraceStack.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.TraceStack;
  return proto.contrast.api.dtm.TraceStack.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.TraceStack} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.TraceStack}
 */
proto.contrast.api.dtm.TraceStack.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeclaringClass(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethodName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileName(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLineNumber(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setEval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.TraceStack.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.TraceStack.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.TraceStack} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.TraceStack.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDeclaringClass();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMethodName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFileName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLineNumber();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getEval();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string signature = 1;
 * @return {string}
 */
proto.contrast.api.dtm.TraceStack.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.TraceStack} returns this
 */
proto.contrast.api.dtm.TraceStack.prototype.setSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string declaring_class = 2;
 * @return {string}
 */
proto.contrast.api.dtm.TraceStack.prototype.getDeclaringClass = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.TraceStack} returns this
 */
proto.contrast.api.dtm.TraceStack.prototype.setDeclaringClass = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string method_name = 3;
 * @return {string}
 */
proto.contrast.api.dtm.TraceStack.prototype.getMethodName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.TraceStack} returns this
 */
proto.contrast.api.dtm.TraceStack.prototype.setMethodName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string file_name = 4;
 * @return {string}
 */
proto.contrast.api.dtm.TraceStack.prototype.getFileName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.TraceStack} returns this
 */
proto.contrast.api.dtm.TraceStack.prototype.setFileName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 line_number = 5;
 * @return {number}
 */
proto.contrast.api.dtm.TraceStack.prototype.getLineNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.TraceStack} returns this
 */
proto.contrast.api.dtm.TraceStack.prototype.setLineNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string type = 6;
 * @return {string}
 */
proto.contrast.api.dtm.TraceStack.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.TraceStack} returns this
 */
proto.contrast.api.dtm.TraceStack.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string eval = 7;
 * @return {string}
 */
proto.contrast.api.dtm.TraceStack.prototype.getEval = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.TraceStack} returns this
 */
proto.contrast.api.dtm.TraceStack.prototype.setEval = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.RouteCoverage.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.RouteCoverage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.RouteCoverage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.RouteCoverage.toObject = function(includeInstance, msg) {
  var f, obj = {
    verb: jspb.Message.getFieldWithDefault(msg, 1, ""),
    url: jspb.Message.getFieldWithDefault(msg, 2, ""),
    route: jspb.Message.getFieldWithDefault(msg, 3, ""),
    count: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.RouteCoverage}
 */
proto.contrast.api.dtm.RouteCoverage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.RouteCoverage;
  return proto.contrast.api.dtm.RouteCoverage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.RouteCoverage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.RouteCoverage}
 */
proto.contrast.api.dtm.RouteCoverage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerb(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoute(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.RouteCoverage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.RouteCoverage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.RouteCoverage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.RouteCoverage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVerb();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRoute();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string verb = 1;
 * @return {string}
 */
proto.contrast.api.dtm.RouteCoverage.prototype.getVerb = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.RouteCoverage} returns this
 */
proto.contrast.api.dtm.RouteCoverage.prototype.setVerb = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string url = 2;
 * @return {string}
 */
proto.contrast.api.dtm.RouteCoverage.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.RouteCoverage} returns this
 */
proto.contrast.api.dtm.RouteCoverage.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string route = 3;
 * @return {string}
 */
proto.contrast.api.dtm.RouteCoverage.prototype.getRoute = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.RouteCoverage} returns this
 */
proto.contrast.api.dtm.RouteCoverage.prototype.setRoute = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 count = 4;
 * @return {number}
 */
proto.contrast.api.dtm.RouteCoverage.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.dtm.RouteCoverage} returns this
 */
proto.contrast.api.dtm.RouteCoverage.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contrast.api.dtm.ObservedRoute.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.ObservedRoute.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.ObservedRoute.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.ObservedRoute} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.ObservedRoute.toObject = function(includeInstance, msg) {
  var f, obj = {
    signature: jspb.Message.getFieldWithDefault(msg, 1, ""),
    url: jspb.Message.getFieldWithDefault(msg, 2, ""),
    verb: jspb.Message.getFieldWithDefault(msg, 3, ""),
    sessionId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    sourcesList: jspb.Message.toObjectList(msg.getSourcesList(),
    proto.contrast.api.dtm.TraceEventSource.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.ObservedRoute}
 */
proto.contrast.api.dtm.ObservedRoute.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.ObservedRoute;
  return proto.contrast.api.dtm.ObservedRoute.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.ObservedRoute} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.ObservedRoute}
 */
proto.contrast.api.dtm.ObservedRoute.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerb(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 5:
      var value = new proto.contrast.api.dtm.TraceEventSource;
      reader.readMessage(value,proto.contrast.api.dtm.TraceEventSource.deserializeBinaryFromReader);
      msg.addSources(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.ObservedRoute.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.ObservedRoute.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.ObservedRoute} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.ObservedRoute.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVerb();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSourcesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.contrast.api.dtm.TraceEventSource.serializeBinaryToWriter
    );
  }
};


/**
 * optional string signature = 1;
 * @return {string}
 */
proto.contrast.api.dtm.ObservedRoute.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.ObservedRoute} returns this
 */
proto.contrast.api.dtm.ObservedRoute.prototype.setSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string url = 2;
 * @return {string}
 */
proto.contrast.api.dtm.ObservedRoute.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.ObservedRoute} returns this
 */
proto.contrast.api.dtm.ObservedRoute.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string verb = 3;
 * @return {string}
 */
proto.contrast.api.dtm.ObservedRoute.prototype.getVerb = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.ObservedRoute} returns this
 */
proto.contrast.api.dtm.ObservedRoute.prototype.setVerb = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string session_id = 4;
 * @return {string}
 */
proto.contrast.api.dtm.ObservedRoute.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.dtm.ObservedRoute} returns this
 */
proto.contrast.api.dtm.ObservedRoute.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated TraceEventSource sources = 5;
 * @return {!Array<!proto.contrast.api.dtm.TraceEventSource>}
 */
proto.contrast.api.dtm.ObservedRoute.prototype.getSourcesList = function() {
  return /** @type{!Array<!proto.contrast.api.dtm.TraceEventSource>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.dtm.TraceEventSource, 5));
};


/**
 * @param {!Array<!proto.contrast.api.dtm.TraceEventSource>} value
 * @return {!proto.contrast.api.dtm.ObservedRoute} returns this
*/
proto.contrast.api.dtm.ObservedRoute.prototype.setSourcesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.contrast.api.dtm.TraceEventSource=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.dtm.TraceEventSource}
 */
proto.contrast.api.dtm.ObservedRoute.prototype.addSources = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.contrast.api.dtm.TraceEventSource, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.dtm.ObservedRoute} returns this
 */
proto.contrast.api.dtm.ObservedRoute.prototype.clearSourcesList = function() {
  return this.setSourcesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.CmdiSinkRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.CmdiSinkRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.CmdiSinkRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.CmdiSinkRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.CmdiSinkRequest}
 */
proto.contrast.api.dtm.CmdiSinkRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.CmdiSinkRequest;
  return proto.contrast.api.dtm.CmdiSinkRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.CmdiSinkRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.CmdiSinkRequest}
 */
proto.contrast.api.dtm.CmdiSinkRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.CmdiSinkRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.CmdiSinkRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.CmdiSinkRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.CmdiSinkRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.CmdiSinkResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.CmdiSinkResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.CmdiSinkResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.CmdiSinkResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.CmdiSinkResponse}
 */
proto.contrast.api.dtm.CmdiSinkResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.CmdiSinkResponse;
  return proto.contrast.api.dtm.CmdiSinkResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.CmdiSinkResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.CmdiSinkResponse}
 */
proto.contrast.api.dtm.CmdiSinkResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.CmdiSinkResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.CmdiSinkResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.CmdiSinkResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.CmdiSinkResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.PtSinkRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.PtSinkRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.PtSinkRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.PtSinkRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.PtSinkRequest}
 */
proto.contrast.api.dtm.PtSinkRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.PtSinkRequest;
  return proto.contrast.api.dtm.PtSinkRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.PtSinkRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.PtSinkRequest}
 */
proto.contrast.api.dtm.PtSinkRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.PtSinkRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.PtSinkRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.PtSinkRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.PtSinkRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.dtm.PtSinkResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.dtm.PtSinkResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.dtm.PtSinkResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.PtSinkResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.dtm.PtSinkResponse}
 */
proto.contrast.api.dtm.PtSinkResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.dtm.PtSinkResponse;
  return proto.contrast.api.dtm.PtSinkResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.dtm.PtSinkResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.dtm.PtSinkResponse}
 */
proto.contrast.api.dtm.PtSinkResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.dtm.PtSinkResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.dtm.PtSinkResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.dtm.PtSinkResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.dtm.PtSinkResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.contrast.api.dtm);
