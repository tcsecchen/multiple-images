// source: settings.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.contrast.api.settings.Accumulator', null, global);
goog.exportSymbol('proto.contrast.api.settings.AccumulatorSettings', null, global);
goog.exportSymbol('proto.contrast.api.settings.AgentSettings', null, global);
goog.exportSymbol('proto.contrast.api.settings.ApplicationSettings', null, global);
goog.exportSymbol('proto.contrast.api.settings.ApplicationState', null, global);
goog.exportSymbol('proto.contrast.api.settings.AssessFeatures', null, global);
goog.exportSymbol('proto.contrast.api.settings.AssessFeatures.SaveStacktrace', null, global);
goog.exportSymbol('proto.contrast.api.settings.Auth', null, global);
goog.exportSymbol('proto.contrast.api.settings.Auth.Mode', null, global);
goog.exportSymbol('proto.contrast.api.settings.BotBlocker', null, global);
goog.exportSymbol('proto.contrast.api.settings.ContrastServiceData', null, global);
goog.exportSymbol('proto.contrast.api.settings.CustomRuleFeature', null, global);
goog.exportSymbol('proto.contrast.api.settings.DefendFeatures', null, global);
goog.exportSymbol('proto.contrast.api.settings.DynamicSource', null, global);
goog.exportSymbol('proto.contrast.api.settings.Exclusion', null, global);
goog.exportSymbol('proto.contrast.api.settings.Exclusion.ExclusionType', null, global);
goog.exportSymbol('proto.contrast.api.settings.Exclusion.InputType', null, global);
goog.exportSymbol('proto.contrast.api.settings.Exclusion.MatchStrategy', null, global);
goog.exportSymbol('proto.contrast.api.settings.InputAnalysis', null, global);
goog.exportSymbol('proto.contrast.api.settings.InputAnalysisResult', null, global);
goog.exportSymbol('proto.contrast.api.settings.InputAnalysisResult.InputType', null, global);
goog.exportSymbol('proto.contrast.api.settings.InputAnalysisResult.ScoreLevel', null, global);
goog.exportSymbol('proto.contrast.api.settings.InventoryFeatures', null, global);
goog.exportSymbol('proto.contrast.api.settings.IpFilter', null, global);
goog.exportSymbol('proto.contrast.api.settings.LogEnhancer', null, global);
goog.exportSymbol('proto.contrast.api.settings.LogEnhancer.LogLevel', null, global);
goog.exportSymbol('proto.contrast.api.settings.LogEnhancer.LogType', null, global);
goog.exportSymbol('proto.contrast.api.settings.LogLevel', null, global);
goog.exportSymbol('proto.contrast.api.settings.ProtectState', null, global);
goog.exportSymbol('proto.contrast.api.settings.ProtectionRule', null, global);
goog.exportSymbol('proto.contrast.api.settings.ProtectionRule.Mode', null, global);
goog.exportSymbol('proto.contrast.api.settings.Reaction', null, global);
goog.exportSymbol('proto.contrast.api.settings.Reaction.Operation', null, global);
goog.exportSymbol('proto.contrast.api.settings.RuleDefinition', null, global);
goog.exportSymbol('proto.contrast.api.settings.Sampling', null, global);
goog.exportSymbol('proto.contrast.api.settings.ServerFeatures', null, global);
goog.exportSymbol('proto.contrast.api.settings.ServerFeatures.InstrumentationMode', null, global);
goog.exportSymbol('proto.contrast.api.settings.SqlInjectionSettings', null, global);
goog.exportSymbol('proto.contrast.api.settings.StringDefinition', null, global);
goog.exportSymbol('proto.contrast.api.settings.StringDefinition.Type', null, global);
goog.exportSymbol('proto.contrast.api.settings.Syslog', null, global);
goog.exportSymbol('proto.contrast.api.settings.Syslog.ConnectionType', null, global);
goog.exportSymbol('proto.contrast.api.settings.Syslog.Severity', null, global);
goog.exportSymbol('proto.contrast.api.settings.VirtualPatch', null, global);
goog.exportSymbol('proto.contrast.api.settings.VirtualPatchCondition', null, global);
goog.exportSymbol('proto.contrast.api.settings.VirtualPatchCondition.Evaluation', null, global);
goog.exportSymbol('proto.contrast.api.settings.VirtualPatchCondition.InputType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.settings.ApplicationState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.settings.ApplicationState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.settings.ApplicationState.displayName = 'proto.contrast.api.settings.ApplicationState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.settings.AgentSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.settings.AgentSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.settings.AgentSettings.displayName = 'proto.contrast.api.settings.AgentSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.settings.ProtectState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.settings.ProtectState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.settings.ProtectState.displayName = 'proto.contrast.api.settings.ProtectState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.settings.ServerFeatures = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.settings.ServerFeatures, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.settings.ServerFeatures.displayName = 'proto.contrast.api.settings.ServerFeatures';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.settings.ContrastServiceData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.settings.ContrastServiceData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.settings.ContrastServiceData.displayName = 'proto.contrast.api.settings.ContrastServiceData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.settings.ApplicationSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contrast.api.settings.ApplicationSettings.repeatedFields_, null);
};
goog.inherits(proto.contrast.api.settings.ApplicationSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.settings.ApplicationSettings.displayName = 'proto.contrast.api.settings.ApplicationSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.settings.SqlInjectionSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.settings.SqlInjectionSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.settings.SqlInjectionSettings.displayName = 'proto.contrast.api.settings.SqlInjectionSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.settings.Reaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.settings.Reaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.settings.Reaction.displayName = 'proto.contrast.api.settings.Reaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.settings.AccumulatorSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.settings.AccumulatorSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.settings.AccumulatorSettings.displayName = 'proto.contrast.api.settings.AccumulatorSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.settings.InventoryFeatures = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.settings.InventoryFeatures, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.settings.InventoryFeatures.displayName = 'proto.contrast.api.settings.InventoryFeatures';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.settings.AssessFeatures = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contrast.api.settings.AssessFeatures.repeatedFields_, null);
};
goog.inherits(proto.contrast.api.settings.AssessFeatures, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.settings.AssessFeatures.displayName = 'proto.contrast.api.settings.AssessFeatures';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.settings.CustomRuleFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contrast.api.settings.CustomRuleFeature.repeatedFields_, null);
};
goog.inherits(proto.contrast.api.settings.CustomRuleFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.settings.CustomRuleFeature.displayName = 'proto.contrast.api.settings.CustomRuleFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.settings.Sampling = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.settings.Sampling, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.settings.Sampling.displayName = 'proto.contrast.api.settings.Sampling';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.settings.DynamicSource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.settings.DynamicSource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.settings.DynamicSource.displayName = 'proto.contrast.api.settings.DynamicSource';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.settings.DefendFeatures = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contrast.api.settings.DefendFeatures.repeatedFields_, null);
};
goog.inherits(proto.contrast.api.settings.DefendFeatures, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.settings.DefendFeatures.displayName = 'proto.contrast.api.settings.DefendFeatures';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.settings.Syslog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.settings.Syslog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.settings.Syslog.displayName = 'proto.contrast.api.settings.Syslog';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.settings.BotBlocker = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.settings.BotBlocker, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.settings.BotBlocker.displayName = 'proto.contrast.api.settings.BotBlocker';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.settings.IpFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.settings.IpFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.settings.IpFilter.displayName = 'proto.contrast.api.settings.IpFilter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.settings.LogEnhancer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.settings.LogEnhancer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.settings.LogEnhancer.displayName = 'proto.contrast.api.settings.LogEnhancer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.settings.RuleDefinition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contrast.api.settings.RuleDefinition.repeatedFields_, null);
};
goog.inherits(proto.contrast.api.settings.RuleDefinition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.settings.RuleDefinition.displayName = 'proto.contrast.api.settings.RuleDefinition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.settings.StringDefinition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.settings.StringDefinition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.settings.StringDefinition.displayName = 'proto.contrast.api.settings.StringDefinition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.settings.Exclusion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contrast.api.settings.Exclusion.repeatedFields_, null);
};
goog.inherits(proto.contrast.api.settings.Exclusion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.settings.Exclusion.displayName = 'proto.contrast.api.settings.Exclusion';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.settings.VirtualPatch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contrast.api.settings.VirtualPatch.repeatedFields_, null);
};
goog.inherits(proto.contrast.api.settings.VirtualPatch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.settings.VirtualPatch.displayName = 'proto.contrast.api.settings.VirtualPatch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.settings.VirtualPatchCondition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.settings.VirtualPatchCondition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.settings.VirtualPatchCondition.displayName = 'proto.contrast.api.settings.VirtualPatchCondition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.settings.ProtectionRule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.settings.ProtectionRule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.settings.ProtectionRule.displayName = 'proto.contrast.api.settings.ProtectionRule';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.settings.Accumulator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.settings.Accumulator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.settings.Accumulator.displayName = 'proto.contrast.api.settings.Accumulator';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.settings.Auth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.settings.Auth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.settings.Auth.displayName = 'proto.contrast.api.settings.Auth';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.settings.InputAnalysis = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contrast.api.settings.InputAnalysis.repeatedFields_, null);
};
goog.inherits(proto.contrast.api.settings.InputAnalysis, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.settings.InputAnalysis.displayName = 'proto.contrast.api.settings.InputAnalysis';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.settings.InputAnalysisResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contrast.api.settings.InputAnalysisResult.repeatedFields_, null);
};
goog.inherits(proto.contrast.api.settings.InputAnalysisResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.settings.InputAnalysisResult.displayName = 'proto.contrast.api.settings.InputAnalysisResult';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.settings.ApplicationState.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.settings.ApplicationState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.settings.ApplicationState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.ApplicationState.toObject = function(includeInstance, msg) {
  var f, obj = {
    createdMs: jspb.Message.getFieldWithDefault(msg, 1, 0),
    appName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    appLanguage: jspb.Message.getFieldWithDefault(msg, 3, ""),
    appPath: jspb.Message.getFieldWithDefault(msg, 4, ""),
    appGroup: jspb.Message.getFieldWithDefault(msg, 16, ""),
    appTags: jspb.Message.getFieldWithDefault(msg, 17, ""),
    appVersion: jspb.Message.getFieldWithDefault(msg, 18, ""),
    serverFeatures: (f = msg.getServerFeatures()) && proto.contrast.api.settings.ServerFeatures.toObject(includeInstance, f),
    applicationSettings: (f = msg.getApplicationSettings()) && proto.contrast.api.settings.ApplicationSettings.toObject(includeInstance, f),
    accumulatorSettings: (f = msg.getAccumulatorSettings()) && proto.contrast.api.settings.AccumulatorSettings.toObject(includeInstance, f),
    serverName: jspb.Message.getFieldWithDefault(msg, 9, ""),
    serverPath: jspb.Message.getFieldWithDefault(msg, 10, ""),
    serverType: jspb.Message.getFieldWithDefault(msg, 11, ""),
    serverTags: jspb.Message.getFieldWithDefault(msg, 13, ""),
    serverEnvironment: jspb.Message.getFieldWithDefault(msg, 14, ""),
    serverVersion: jspb.Message.getFieldWithDefault(msg, 15, ""),
    agentVersion: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.settings.ApplicationState}
 */
proto.contrast.api.settings.ApplicationState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.settings.ApplicationState;
  return proto.contrast.api.settings.ApplicationState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.settings.ApplicationState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.settings.ApplicationState}
 */
proto.contrast.api.settings.ApplicationState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedMs(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppLanguage(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppPath(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppGroup(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppTags(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppVersion(value);
      break;
    case 6:
      var value = new proto.contrast.api.settings.ServerFeatures;
      reader.readMessage(value,proto.contrast.api.settings.ServerFeatures.deserializeBinaryFromReader);
      msg.setServerFeatures(value);
      break;
    case 7:
      var value = new proto.contrast.api.settings.ApplicationSettings;
      reader.readMessage(value,proto.contrast.api.settings.ApplicationSettings.deserializeBinaryFromReader);
      msg.setApplicationSettings(value);
      break;
    case 8:
      var value = new proto.contrast.api.settings.AccumulatorSettings;
      reader.readMessage(value,proto.contrast.api.settings.AccumulatorSettings.deserializeBinaryFromReader);
      msg.setAccumulatorSettings(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerName(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerPath(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerType(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerTags(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerEnvironment(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerVersion(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setAgentVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.settings.ApplicationState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.settings.ApplicationState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.settings.ApplicationState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.ApplicationState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreatedMs();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getAppName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAppLanguage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAppPath();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAppGroup();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getAppTags();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getAppVersion();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getServerFeatures();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.contrast.api.settings.ServerFeatures.serializeBinaryToWriter
    );
  }
  f = message.getApplicationSettings();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.contrast.api.settings.ApplicationSettings.serializeBinaryToWriter
    );
  }
  f = message.getAccumulatorSettings();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.contrast.api.settings.AccumulatorSettings.serializeBinaryToWriter
    );
  }
  f = message.getServerName();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getServerPath();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getServerType();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getServerTags();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getServerEnvironment();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getServerVersion();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getAgentVersion();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional int64 created_ms = 1;
 * @return {number}
 */
proto.contrast.api.settings.ApplicationState.prototype.getCreatedMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.settings.ApplicationState} returns this
 */
proto.contrast.api.settings.ApplicationState.prototype.setCreatedMs = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string app_name = 2;
 * @return {string}
 */
proto.contrast.api.settings.ApplicationState.prototype.getAppName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.ApplicationState} returns this
 */
proto.contrast.api.settings.ApplicationState.prototype.setAppName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string app_language = 3;
 * @return {string}
 */
proto.contrast.api.settings.ApplicationState.prototype.getAppLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.ApplicationState} returns this
 */
proto.contrast.api.settings.ApplicationState.prototype.setAppLanguage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string app_path = 4;
 * @return {string}
 */
proto.contrast.api.settings.ApplicationState.prototype.getAppPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.ApplicationState} returns this
 */
proto.contrast.api.settings.ApplicationState.prototype.setAppPath = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string app_group = 16;
 * @return {string}
 */
proto.contrast.api.settings.ApplicationState.prototype.getAppGroup = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.ApplicationState} returns this
 */
proto.contrast.api.settings.ApplicationState.prototype.setAppGroup = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string app_tags = 17;
 * @return {string}
 */
proto.contrast.api.settings.ApplicationState.prototype.getAppTags = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.ApplicationState} returns this
 */
proto.contrast.api.settings.ApplicationState.prototype.setAppTags = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional string app_version = 18;
 * @return {string}
 */
proto.contrast.api.settings.ApplicationState.prototype.getAppVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.ApplicationState} returns this
 */
proto.contrast.api.settings.ApplicationState.prototype.setAppVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional ServerFeatures server_features = 6;
 * @return {?proto.contrast.api.settings.ServerFeatures}
 */
proto.contrast.api.settings.ApplicationState.prototype.getServerFeatures = function() {
  return /** @type{?proto.contrast.api.settings.ServerFeatures} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.settings.ServerFeatures, 6));
};


/**
 * @param {?proto.contrast.api.settings.ServerFeatures|undefined} value
 * @return {!proto.contrast.api.settings.ApplicationState} returns this
*/
proto.contrast.api.settings.ApplicationState.prototype.setServerFeatures = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.settings.ApplicationState} returns this
 */
proto.contrast.api.settings.ApplicationState.prototype.clearServerFeatures = function() {
  return this.setServerFeatures(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.settings.ApplicationState.prototype.hasServerFeatures = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ApplicationSettings application_settings = 7;
 * @return {?proto.contrast.api.settings.ApplicationSettings}
 */
proto.contrast.api.settings.ApplicationState.prototype.getApplicationSettings = function() {
  return /** @type{?proto.contrast.api.settings.ApplicationSettings} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.settings.ApplicationSettings, 7));
};


/**
 * @param {?proto.contrast.api.settings.ApplicationSettings|undefined} value
 * @return {!proto.contrast.api.settings.ApplicationState} returns this
*/
proto.contrast.api.settings.ApplicationState.prototype.setApplicationSettings = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.settings.ApplicationState} returns this
 */
proto.contrast.api.settings.ApplicationState.prototype.clearApplicationSettings = function() {
  return this.setApplicationSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.settings.ApplicationState.prototype.hasApplicationSettings = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional AccumulatorSettings accumulator_settings = 8;
 * @return {?proto.contrast.api.settings.AccumulatorSettings}
 */
proto.contrast.api.settings.ApplicationState.prototype.getAccumulatorSettings = function() {
  return /** @type{?proto.contrast.api.settings.AccumulatorSettings} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.settings.AccumulatorSettings, 8));
};


/**
 * @param {?proto.contrast.api.settings.AccumulatorSettings|undefined} value
 * @return {!proto.contrast.api.settings.ApplicationState} returns this
*/
proto.contrast.api.settings.ApplicationState.prototype.setAccumulatorSettings = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.settings.ApplicationState} returns this
 */
proto.contrast.api.settings.ApplicationState.prototype.clearAccumulatorSettings = function() {
  return this.setAccumulatorSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.settings.ApplicationState.prototype.hasAccumulatorSettings = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string server_name = 9;
 * @return {string}
 */
proto.contrast.api.settings.ApplicationState.prototype.getServerName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.ApplicationState} returns this
 */
proto.contrast.api.settings.ApplicationState.prototype.setServerName = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string server_path = 10;
 * @return {string}
 */
proto.contrast.api.settings.ApplicationState.prototype.getServerPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.ApplicationState} returns this
 */
proto.contrast.api.settings.ApplicationState.prototype.setServerPath = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string server_type = 11;
 * @return {string}
 */
proto.contrast.api.settings.ApplicationState.prototype.getServerType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.ApplicationState} returns this
 */
proto.contrast.api.settings.ApplicationState.prototype.setServerType = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string server_tags = 13;
 * @return {string}
 */
proto.contrast.api.settings.ApplicationState.prototype.getServerTags = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.ApplicationState} returns this
 */
proto.contrast.api.settings.ApplicationState.prototype.setServerTags = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string server_environment = 14;
 * @return {string}
 */
proto.contrast.api.settings.ApplicationState.prototype.getServerEnvironment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.ApplicationState} returns this
 */
proto.contrast.api.settings.ApplicationState.prototype.setServerEnvironment = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string server_version = 15;
 * @return {string}
 */
proto.contrast.api.settings.ApplicationState.prototype.getServerVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.ApplicationState} returns this
 */
proto.contrast.api.settings.ApplicationState.prototype.setServerVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string agent_version = 12;
 * @return {string}
 */
proto.contrast.api.settings.ApplicationState.prototype.getAgentVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.ApplicationState} returns this
 */
proto.contrast.api.settings.ApplicationState.prototype.setAgentVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.settings.AgentSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.settings.AgentSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.settings.AgentSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.AgentSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    sentMs: jspb.Message.getFieldWithDefault(msg, 1, 0),
    serverFeatures: (f = msg.getServerFeatures()) && proto.contrast.api.settings.ServerFeatures.toObject(includeInstance, f),
    applicationSettings: (f = msg.getApplicationSettings()) && proto.contrast.api.settings.ApplicationSettings.toObject(includeInstance, f),
    accumulatorSettings: (f = msg.getAccumulatorSettings()) && proto.contrast.api.settings.AccumulatorSettings.toObject(includeInstance, f),
    protectState: (f = msg.getProtectState()) && proto.contrast.api.settings.ProtectState.toObject(includeInstance, f),
    inputAnalysis: (f = msg.getInputAnalysis()) && proto.contrast.api.settings.InputAnalysis.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.settings.AgentSettings}
 */
proto.contrast.api.settings.AgentSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.settings.AgentSettings;
  return proto.contrast.api.settings.AgentSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.settings.AgentSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.settings.AgentSettings}
 */
proto.contrast.api.settings.AgentSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSentMs(value);
      break;
    case 2:
      var value = new proto.contrast.api.settings.ServerFeatures;
      reader.readMessage(value,proto.contrast.api.settings.ServerFeatures.deserializeBinaryFromReader);
      msg.setServerFeatures(value);
      break;
    case 3:
      var value = new proto.contrast.api.settings.ApplicationSettings;
      reader.readMessage(value,proto.contrast.api.settings.ApplicationSettings.deserializeBinaryFromReader);
      msg.setApplicationSettings(value);
      break;
    case 4:
      var value = new proto.contrast.api.settings.AccumulatorSettings;
      reader.readMessage(value,proto.contrast.api.settings.AccumulatorSettings.deserializeBinaryFromReader);
      msg.setAccumulatorSettings(value);
      break;
    case 5:
      var value = new proto.contrast.api.settings.ProtectState;
      reader.readMessage(value,proto.contrast.api.settings.ProtectState.deserializeBinaryFromReader);
      msg.setProtectState(value);
      break;
    case 6:
      var value = new proto.contrast.api.settings.InputAnalysis;
      reader.readMessage(value,proto.contrast.api.settings.InputAnalysis.deserializeBinaryFromReader);
      msg.setInputAnalysis(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.settings.AgentSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.settings.AgentSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.settings.AgentSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.AgentSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSentMs();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getServerFeatures();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.contrast.api.settings.ServerFeatures.serializeBinaryToWriter
    );
  }
  f = message.getApplicationSettings();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.contrast.api.settings.ApplicationSettings.serializeBinaryToWriter
    );
  }
  f = message.getAccumulatorSettings();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.contrast.api.settings.AccumulatorSettings.serializeBinaryToWriter
    );
  }
  f = message.getProtectState();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.contrast.api.settings.ProtectState.serializeBinaryToWriter
    );
  }
  f = message.getInputAnalysis();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.contrast.api.settings.InputAnalysis.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 sent_ms = 1;
 * @return {number}
 */
proto.contrast.api.settings.AgentSettings.prototype.getSentMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.settings.AgentSettings} returns this
 */
proto.contrast.api.settings.AgentSettings.prototype.setSentMs = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ServerFeatures server_features = 2;
 * @return {?proto.contrast.api.settings.ServerFeatures}
 */
proto.contrast.api.settings.AgentSettings.prototype.getServerFeatures = function() {
  return /** @type{?proto.contrast.api.settings.ServerFeatures} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.settings.ServerFeatures, 2));
};


/**
 * @param {?proto.contrast.api.settings.ServerFeatures|undefined} value
 * @return {!proto.contrast.api.settings.AgentSettings} returns this
*/
proto.contrast.api.settings.AgentSettings.prototype.setServerFeatures = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.settings.AgentSettings} returns this
 */
proto.contrast.api.settings.AgentSettings.prototype.clearServerFeatures = function() {
  return this.setServerFeatures(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.settings.AgentSettings.prototype.hasServerFeatures = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ApplicationSettings application_settings = 3;
 * @return {?proto.contrast.api.settings.ApplicationSettings}
 */
proto.contrast.api.settings.AgentSettings.prototype.getApplicationSettings = function() {
  return /** @type{?proto.contrast.api.settings.ApplicationSettings} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.settings.ApplicationSettings, 3));
};


/**
 * @param {?proto.contrast.api.settings.ApplicationSettings|undefined} value
 * @return {!proto.contrast.api.settings.AgentSettings} returns this
*/
proto.contrast.api.settings.AgentSettings.prototype.setApplicationSettings = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.settings.AgentSettings} returns this
 */
proto.contrast.api.settings.AgentSettings.prototype.clearApplicationSettings = function() {
  return this.setApplicationSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.settings.AgentSettings.prototype.hasApplicationSettings = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional AccumulatorSettings accumulator_settings = 4;
 * @return {?proto.contrast.api.settings.AccumulatorSettings}
 */
proto.contrast.api.settings.AgentSettings.prototype.getAccumulatorSettings = function() {
  return /** @type{?proto.contrast.api.settings.AccumulatorSettings} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.settings.AccumulatorSettings, 4));
};


/**
 * @param {?proto.contrast.api.settings.AccumulatorSettings|undefined} value
 * @return {!proto.contrast.api.settings.AgentSettings} returns this
*/
proto.contrast.api.settings.AgentSettings.prototype.setAccumulatorSettings = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.settings.AgentSettings} returns this
 */
proto.contrast.api.settings.AgentSettings.prototype.clearAccumulatorSettings = function() {
  return this.setAccumulatorSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.settings.AgentSettings.prototype.hasAccumulatorSettings = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ProtectState protect_state = 5;
 * @return {?proto.contrast.api.settings.ProtectState}
 */
proto.contrast.api.settings.AgentSettings.prototype.getProtectState = function() {
  return /** @type{?proto.contrast.api.settings.ProtectState} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.settings.ProtectState, 5));
};


/**
 * @param {?proto.contrast.api.settings.ProtectState|undefined} value
 * @return {!proto.contrast.api.settings.AgentSettings} returns this
*/
proto.contrast.api.settings.AgentSettings.prototype.setProtectState = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.settings.AgentSettings} returns this
 */
proto.contrast.api.settings.AgentSettings.prototype.clearProtectState = function() {
  return this.setProtectState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.settings.AgentSettings.prototype.hasProtectState = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional InputAnalysis input_analysis = 6;
 * @return {?proto.contrast.api.settings.InputAnalysis}
 */
proto.contrast.api.settings.AgentSettings.prototype.getInputAnalysis = function() {
  return /** @type{?proto.contrast.api.settings.InputAnalysis} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.settings.InputAnalysis, 6));
};


/**
 * @param {?proto.contrast.api.settings.InputAnalysis|undefined} value
 * @return {!proto.contrast.api.settings.AgentSettings} returns this
*/
proto.contrast.api.settings.AgentSettings.prototype.setInputAnalysis = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.settings.AgentSettings} returns this
 */
proto.contrast.api.settings.AgentSettings.prototype.clearInputAnalysis = function() {
  return this.setInputAnalysis(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.settings.AgentSettings.prototype.hasInputAnalysis = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.settings.ProtectState.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.settings.ProtectState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.settings.ProtectState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.ProtectState.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    trackRequest: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    securityException: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    securityMessage: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.settings.ProtectState}
 */
proto.contrast.api.settings.ProtectState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.settings.ProtectState;
  return proto.contrast.api.settings.ProtectState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.settings.ProtectState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.settings.ProtectState}
 */
proto.contrast.api.settings.ProtectState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTrackRequest(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSecurityException(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecurityMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.settings.ProtectState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.settings.ProtectState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.settings.ProtectState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.ProtectState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTrackRequest();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getSecurityException();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getSecurityMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.contrast.api.settings.ProtectState.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.ProtectState} returns this
 */
proto.contrast.api.settings.ProtectState.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool track_request = 4;
 * @return {boolean}
 */
proto.contrast.api.settings.ProtectState.prototype.getTrackRequest = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.settings.ProtectState} returns this
 */
proto.contrast.api.settings.ProtectState.prototype.setTrackRequest = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool security_exception = 2;
 * @return {boolean}
 */
proto.contrast.api.settings.ProtectState.prototype.getSecurityException = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.settings.ProtectState} returns this
 */
proto.contrast.api.settings.ProtectState.prototype.setSecurityException = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string security_message = 3;
 * @return {string}
 */
proto.contrast.api.settings.ProtectState.prototype.getSecurityMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.ProtectState} returns this
 */
proto.contrast.api.settings.ProtectState.prototype.setSecurityMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.settings.ServerFeatures.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.settings.ServerFeatures.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.settings.ServerFeatures} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.ServerFeatures.toObject = function(includeInstance, msg) {
  var f, obj = {
    cache: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    logFile: jspb.Message.getFieldWithDefault(msg, 2, ""),
    logLevel: jspb.Message.getFieldWithDefault(msg, 3, ""),
    inventory: (f = msg.getInventory()) && proto.contrast.api.settings.InventoryFeatures.toObject(includeInstance, f),
    assess: (f = msg.getAssess()) && proto.contrast.api.settings.AssessFeatures.toObject(includeInstance, f),
    defend: (f = msg.getDefend()) && proto.contrast.api.settings.DefendFeatures.toObject(includeInstance, f),
    instrumentationMode: jspb.Message.getFieldWithDefault(msg, 7, 0),
    contrastService: (f = msg.getContrastService()) && proto.contrast.api.settings.ContrastServiceData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.settings.ServerFeatures}
 */
proto.contrast.api.settings.ServerFeatures.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.settings.ServerFeatures;
  return proto.contrast.api.settings.ServerFeatures.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.settings.ServerFeatures} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.settings.ServerFeatures}
 */
proto.contrast.api.settings.ServerFeatures.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCache(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogFile(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogLevel(value);
      break;
    case 4:
      var value = new proto.contrast.api.settings.InventoryFeatures;
      reader.readMessage(value,proto.contrast.api.settings.InventoryFeatures.deserializeBinaryFromReader);
      msg.setInventory(value);
      break;
    case 5:
      var value = new proto.contrast.api.settings.AssessFeatures;
      reader.readMessage(value,proto.contrast.api.settings.AssessFeatures.deserializeBinaryFromReader);
      msg.setAssess(value);
      break;
    case 6:
      var value = new proto.contrast.api.settings.DefendFeatures;
      reader.readMessage(value,proto.contrast.api.settings.DefendFeatures.deserializeBinaryFromReader);
      msg.setDefend(value);
      break;
    case 7:
      var value = /** @type {!proto.contrast.api.settings.ServerFeatures.InstrumentationMode} */ (reader.readEnum());
      msg.setInstrumentationMode(value);
      break;
    case 8:
      var value = new proto.contrast.api.settings.ContrastServiceData;
      reader.readMessage(value,proto.contrast.api.settings.ContrastServiceData.deserializeBinaryFromReader);
      msg.setContrastService(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.settings.ServerFeatures.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.settings.ServerFeatures.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.settings.ServerFeatures} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.ServerFeatures.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCache();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getLogFile();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLogLevel();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInventory();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.contrast.api.settings.InventoryFeatures.serializeBinaryToWriter
    );
  }
  f = message.getAssess();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.contrast.api.settings.AssessFeatures.serializeBinaryToWriter
    );
  }
  f = message.getDefend();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.contrast.api.settings.DefendFeatures.serializeBinaryToWriter
    );
  }
  f = message.getInstrumentationMode();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getContrastService();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.contrast.api.settings.ContrastServiceData.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.contrast.api.settings.ServerFeatures.InstrumentationMode = {
  UNDEFINED: 0,
  AGENT_CONFIG: 1,
  DUPLEX: 2,
  PROFILER: 3
};

/**
 * optional bool cache = 1;
 * @return {boolean}
 */
proto.contrast.api.settings.ServerFeatures.prototype.getCache = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.settings.ServerFeatures} returns this
 */
proto.contrast.api.settings.ServerFeatures.prototype.setCache = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string log_file = 2;
 * @return {string}
 */
proto.contrast.api.settings.ServerFeatures.prototype.getLogFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.ServerFeatures} returns this
 */
proto.contrast.api.settings.ServerFeatures.prototype.setLogFile = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string log_level = 3;
 * @return {string}
 */
proto.contrast.api.settings.ServerFeatures.prototype.getLogLevel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.ServerFeatures} returns this
 */
proto.contrast.api.settings.ServerFeatures.prototype.setLogLevel = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional InventoryFeatures inventory = 4;
 * @return {?proto.contrast.api.settings.InventoryFeatures}
 */
proto.contrast.api.settings.ServerFeatures.prototype.getInventory = function() {
  return /** @type{?proto.contrast.api.settings.InventoryFeatures} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.settings.InventoryFeatures, 4));
};


/**
 * @param {?proto.contrast.api.settings.InventoryFeatures|undefined} value
 * @return {!proto.contrast.api.settings.ServerFeatures} returns this
*/
proto.contrast.api.settings.ServerFeatures.prototype.setInventory = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.settings.ServerFeatures} returns this
 */
proto.contrast.api.settings.ServerFeatures.prototype.clearInventory = function() {
  return this.setInventory(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.settings.ServerFeatures.prototype.hasInventory = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional AssessFeatures assess = 5;
 * @return {?proto.contrast.api.settings.AssessFeatures}
 */
proto.contrast.api.settings.ServerFeatures.prototype.getAssess = function() {
  return /** @type{?proto.contrast.api.settings.AssessFeatures} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.settings.AssessFeatures, 5));
};


/**
 * @param {?proto.contrast.api.settings.AssessFeatures|undefined} value
 * @return {!proto.contrast.api.settings.ServerFeatures} returns this
*/
proto.contrast.api.settings.ServerFeatures.prototype.setAssess = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.settings.ServerFeatures} returns this
 */
proto.contrast.api.settings.ServerFeatures.prototype.clearAssess = function() {
  return this.setAssess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.settings.ServerFeatures.prototype.hasAssess = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional DefendFeatures defend = 6;
 * @return {?proto.contrast.api.settings.DefendFeatures}
 */
proto.contrast.api.settings.ServerFeatures.prototype.getDefend = function() {
  return /** @type{?proto.contrast.api.settings.DefendFeatures} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.settings.DefendFeatures, 6));
};


/**
 * @param {?proto.contrast.api.settings.DefendFeatures|undefined} value
 * @return {!proto.contrast.api.settings.ServerFeatures} returns this
*/
proto.contrast.api.settings.ServerFeatures.prototype.setDefend = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.settings.ServerFeatures} returns this
 */
proto.contrast.api.settings.ServerFeatures.prototype.clearDefend = function() {
  return this.setDefend(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.settings.ServerFeatures.prototype.hasDefend = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional InstrumentationMode instrumentation_mode = 7;
 * @return {!proto.contrast.api.settings.ServerFeatures.InstrumentationMode}
 */
proto.contrast.api.settings.ServerFeatures.prototype.getInstrumentationMode = function() {
  return /** @type {!proto.contrast.api.settings.ServerFeatures.InstrumentationMode} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.contrast.api.settings.ServerFeatures.InstrumentationMode} value
 * @return {!proto.contrast.api.settings.ServerFeatures} returns this
 */
proto.contrast.api.settings.ServerFeatures.prototype.setInstrumentationMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional ContrastServiceData contrast_service = 8;
 * @return {?proto.contrast.api.settings.ContrastServiceData}
 */
proto.contrast.api.settings.ServerFeatures.prototype.getContrastService = function() {
  return /** @type{?proto.contrast.api.settings.ContrastServiceData} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.settings.ContrastServiceData, 8));
};


/**
 * @param {?proto.contrast.api.settings.ContrastServiceData|undefined} value
 * @return {!proto.contrast.api.settings.ServerFeatures} returns this
*/
proto.contrast.api.settings.ServerFeatures.prototype.setContrastService = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.settings.ServerFeatures} returns this
 */
proto.contrast.api.settings.ServerFeatures.prototype.clearContrastService = function() {
  return this.setContrastService(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.settings.ServerFeatures.prototype.hasContrastService = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.settings.ContrastServiceData.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.settings.ContrastServiceData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.settings.ContrastServiceData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.ContrastServiceData.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.settings.ContrastServiceData}
 */
proto.contrast.api.settings.ContrastServiceData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.settings.ContrastServiceData;
  return proto.contrast.api.settings.ContrastServiceData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.settings.ContrastServiceData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.settings.ContrastServiceData}
 */
proto.contrast.api.settings.ContrastServiceData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.settings.ContrastServiceData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.settings.ContrastServiceData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.settings.ContrastServiceData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.ContrastServiceData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string version = 1;
 * @return {string}
 */
proto.contrast.api.settings.ContrastServiceData.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.ContrastServiceData} returns this
 */
proto.contrast.api.settings.ContrastServiceData.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contrast.api.settings.ApplicationSettings.repeatedFields_ = [2,3,5,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.settings.ApplicationSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.settings.ApplicationSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.settings.ApplicationSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.ApplicationSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    virtualPatchesList: jspb.Message.toObjectList(msg.getVirtualPatchesList(),
    proto.contrast.api.settings.VirtualPatch.toObject, includeInstance),
    protectionRulesList: jspb.Message.toObjectList(msg.getProtectionRulesList(),
    proto.contrast.api.settings.ProtectionRule.toObject, includeInstance),
    exclusionsList: jspb.Message.toObjectList(msg.getExclusionsList(),
    proto.contrast.api.settings.Exclusion.toObject, includeInstance),
    disabledAssessRulesList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    reactionsList: jspb.Message.toObjectList(msg.getReactionsList(),
    proto.contrast.api.settings.Reaction.toObject, includeInstance),
    sessionId: jspb.Message.getFieldWithDefault(msg, 8, ""),
    sqliSettings: (f = msg.getSqliSettings()) && proto.contrast.api.settings.SqlInjectionSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.settings.ApplicationSettings}
 */
proto.contrast.api.settings.ApplicationSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.settings.ApplicationSettings;
  return proto.contrast.api.settings.ApplicationSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.settings.ApplicationSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.settings.ApplicationSettings}
 */
proto.contrast.api.settings.ApplicationSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.contrast.api.settings.VirtualPatch;
      reader.readMessage(value,proto.contrast.api.settings.VirtualPatch.deserializeBinaryFromReader);
      msg.addVirtualPatches(value);
      break;
    case 3:
      var value = new proto.contrast.api.settings.ProtectionRule;
      reader.readMessage(value,proto.contrast.api.settings.ProtectionRule.deserializeBinaryFromReader);
      msg.addProtectionRules(value);
      break;
    case 5:
      var value = new proto.contrast.api.settings.Exclusion;
      reader.readMessage(value,proto.contrast.api.settings.Exclusion.deserializeBinaryFromReader);
      msg.addExclusions(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addDisabledAssessRules(value);
      break;
    case 7:
      var value = new proto.contrast.api.settings.Reaction;
      reader.readMessage(value,proto.contrast.api.settings.Reaction.deserializeBinaryFromReader);
      msg.addReactions(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 9:
      var value = new proto.contrast.api.settings.SqlInjectionSettings;
      reader.readMessage(value,proto.contrast.api.settings.SqlInjectionSettings.deserializeBinaryFromReader);
      msg.setSqliSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.settings.ApplicationSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.settings.ApplicationSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.settings.ApplicationSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.ApplicationSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVirtualPatchesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.contrast.api.settings.VirtualPatch.serializeBinaryToWriter
    );
  }
  f = message.getProtectionRulesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.contrast.api.settings.ProtectionRule.serializeBinaryToWriter
    );
  }
  f = message.getExclusionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.contrast.api.settings.Exclusion.serializeBinaryToWriter
    );
  }
  f = message.getDisabledAssessRulesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getReactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.contrast.api.settings.Reaction.serializeBinaryToWriter
    );
  }
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getSqliSettings();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.contrast.api.settings.SqlInjectionSettings.serializeBinaryToWriter
    );
  }
};


/**
 * repeated VirtualPatch virtual_patches = 2;
 * @return {!Array<!proto.contrast.api.settings.VirtualPatch>}
 */
proto.contrast.api.settings.ApplicationSettings.prototype.getVirtualPatchesList = function() {
  return /** @type{!Array<!proto.contrast.api.settings.VirtualPatch>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.settings.VirtualPatch, 2));
};


/**
 * @param {!Array<!proto.contrast.api.settings.VirtualPatch>} value
 * @return {!proto.contrast.api.settings.ApplicationSettings} returns this
*/
proto.contrast.api.settings.ApplicationSettings.prototype.setVirtualPatchesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.contrast.api.settings.VirtualPatch=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.settings.VirtualPatch}
 */
proto.contrast.api.settings.ApplicationSettings.prototype.addVirtualPatches = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.contrast.api.settings.VirtualPatch, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.settings.ApplicationSettings} returns this
 */
proto.contrast.api.settings.ApplicationSettings.prototype.clearVirtualPatchesList = function() {
  return this.setVirtualPatchesList([]);
};


/**
 * repeated ProtectionRule protection_rules = 3;
 * @return {!Array<!proto.contrast.api.settings.ProtectionRule>}
 */
proto.contrast.api.settings.ApplicationSettings.prototype.getProtectionRulesList = function() {
  return /** @type{!Array<!proto.contrast.api.settings.ProtectionRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.settings.ProtectionRule, 3));
};


/**
 * @param {!Array<!proto.contrast.api.settings.ProtectionRule>} value
 * @return {!proto.contrast.api.settings.ApplicationSettings} returns this
*/
proto.contrast.api.settings.ApplicationSettings.prototype.setProtectionRulesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.contrast.api.settings.ProtectionRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.settings.ProtectionRule}
 */
proto.contrast.api.settings.ApplicationSettings.prototype.addProtectionRules = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.contrast.api.settings.ProtectionRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.settings.ApplicationSettings} returns this
 */
proto.contrast.api.settings.ApplicationSettings.prototype.clearProtectionRulesList = function() {
  return this.setProtectionRulesList([]);
};


/**
 * repeated Exclusion exclusions = 5;
 * @return {!Array<!proto.contrast.api.settings.Exclusion>}
 */
proto.contrast.api.settings.ApplicationSettings.prototype.getExclusionsList = function() {
  return /** @type{!Array<!proto.contrast.api.settings.Exclusion>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.settings.Exclusion, 5));
};


/**
 * @param {!Array<!proto.contrast.api.settings.Exclusion>} value
 * @return {!proto.contrast.api.settings.ApplicationSettings} returns this
*/
proto.contrast.api.settings.ApplicationSettings.prototype.setExclusionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.contrast.api.settings.Exclusion=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.settings.Exclusion}
 */
proto.contrast.api.settings.ApplicationSettings.prototype.addExclusions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.contrast.api.settings.Exclusion, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.settings.ApplicationSettings} returns this
 */
proto.contrast.api.settings.ApplicationSettings.prototype.clearExclusionsList = function() {
  return this.setExclusionsList([]);
};


/**
 * repeated string disabled_assess_rules = 6;
 * @return {!Array<string>}
 */
proto.contrast.api.settings.ApplicationSettings.prototype.getDisabledAssessRulesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.contrast.api.settings.ApplicationSettings} returns this
 */
proto.contrast.api.settings.ApplicationSettings.prototype.setDisabledAssessRulesList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.settings.ApplicationSettings} returns this
 */
proto.contrast.api.settings.ApplicationSettings.prototype.addDisabledAssessRules = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.settings.ApplicationSettings} returns this
 */
proto.contrast.api.settings.ApplicationSettings.prototype.clearDisabledAssessRulesList = function() {
  return this.setDisabledAssessRulesList([]);
};


/**
 * repeated Reaction reactions = 7;
 * @return {!Array<!proto.contrast.api.settings.Reaction>}
 */
proto.contrast.api.settings.ApplicationSettings.prototype.getReactionsList = function() {
  return /** @type{!Array<!proto.contrast.api.settings.Reaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.settings.Reaction, 7));
};


/**
 * @param {!Array<!proto.contrast.api.settings.Reaction>} value
 * @return {!proto.contrast.api.settings.ApplicationSettings} returns this
*/
proto.contrast.api.settings.ApplicationSettings.prototype.setReactionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.contrast.api.settings.Reaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.settings.Reaction}
 */
proto.contrast.api.settings.ApplicationSettings.prototype.addReactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.contrast.api.settings.Reaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.settings.ApplicationSettings} returns this
 */
proto.contrast.api.settings.ApplicationSettings.prototype.clearReactionsList = function() {
  return this.setReactionsList([]);
};


/**
 * optional string session_id = 8;
 * @return {string}
 */
proto.contrast.api.settings.ApplicationSettings.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.ApplicationSettings} returns this
 */
proto.contrast.api.settings.ApplicationSettings.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional SqlInjectionSettings sqli_settings = 9;
 * @return {?proto.contrast.api.settings.SqlInjectionSettings}
 */
proto.contrast.api.settings.ApplicationSettings.prototype.getSqliSettings = function() {
  return /** @type{?proto.contrast.api.settings.SqlInjectionSettings} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.settings.SqlInjectionSettings, 9));
};


/**
 * @param {?proto.contrast.api.settings.SqlInjectionSettings|undefined} value
 * @return {!proto.contrast.api.settings.ApplicationSettings} returns this
*/
proto.contrast.api.settings.ApplicationSettings.prototype.setSqliSettings = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.settings.ApplicationSettings} returns this
 */
proto.contrast.api.settings.ApplicationSettings.prototype.clearSqliSettings = function() {
  return this.setSqliSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.settings.ApplicationSettings.prototype.hasSqliSettings = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.settings.SqlInjectionSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.settings.SqlInjectionSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.settings.SqlInjectionSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.SqlInjectionSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    detectTautologies: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    detectChainedQueries: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    detectSuspiciousUnions: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    detectDangerousFunctions: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.settings.SqlInjectionSettings}
 */
proto.contrast.api.settings.SqlInjectionSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.settings.SqlInjectionSettings;
  return proto.contrast.api.settings.SqlInjectionSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.settings.SqlInjectionSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.settings.SqlInjectionSettings}
 */
proto.contrast.api.settings.SqlInjectionSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDetectTautologies(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDetectChainedQueries(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDetectSuspiciousUnions(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDetectDangerousFunctions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.settings.SqlInjectionSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.settings.SqlInjectionSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.settings.SqlInjectionSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.SqlInjectionSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDetectTautologies();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getDetectChainedQueries();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getDetectSuspiciousUnions();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getDetectDangerousFunctions();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional bool detect_tautologies = 1;
 * @return {boolean}
 */
proto.contrast.api.settings.SqlInjectionSettings.prototype.getDetectTautologies = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.settings.SqlInjectionSettings} returns this
 */
proto.contrast.api.settings.SqlInjectionSettings.prototype.setDetectTautologies = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool detect_chained_queries = 2;
 * @return {boolean}
 */
proto.contrast.api.settings.SqlInjectionSettings.prototype.getDetectChainedQueries = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.settings.SqlInjectionSettings} returns this
 */
proto.contrast.api.settings.SqlInjectionSettings.prototype.setDetectChainedQueries = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool detect_suspicious_unions = 3;
 * @return {boolean}
 */
proto.contrast.api.settings.SqlInjectionSettings.prototype.getDetectSuspiciousUnions = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.settings.SqlInjectionSettings} returns this
 */
proto.contrast.api.settings.SqlInjectionSettings.prototype.setDetectSuspiciousUnions = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool detect_dangerous_functions = 4;
 * @return {boolean}
 */
proto.contrast.api.settings.SqlInjectionSettings.prototype.getDetectDangerousFunctions = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.settings.SqlInjectionSettings} returns this
 */
proto.contrast.api.settings.SqlInjectionSettings.prototype.setDetectDangerousFunctions = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.settings.Reaction.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.settings.Reaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.settings.Reaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.Reaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, ""),
    logLevel: jspb.Message.getFieldWithDefault(msg, 2, 0),
    operation: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.settings.Reaction}
 */
proto.contrast.api.settings.Reaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.settings.Reaction;
  return proto.contrast.api.settings.Reaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.settings.Reaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.settings.Reaction}
 */
proto.contrast.api.settings.Reaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {!proto.contrast.api.settings.LogLevel} */ (reader.readEnum());
      msg.setLogLevel(value);
      break;
    case 3:
      var value = /** @type {!proto.contrast.api.settings.Reaction.Operation} */ (reader.readEnum());
      msg.setOperation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.settings.Reaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.settings.Reaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.settings.Reaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.Reaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLogLevel();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getOperation();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.contrast.api.settings.Reaction.Operation = {
  NOOP: 0,
  DISABLE: 1,
  INVENTORY: 2
};

/**
 * optional string message = 1;
 * @return {string}
 */
proto.contrast.api.settings.Reaction.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.Reaction} returns this
 */
proto.contrast.api.settings.Reaction.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional LogLevel log_level = 2;
 * @return {!proto.contrast.api.settings.LogLevel}
 */
proto.contrast.api.settings.Reaction.prototype.getLogLevel = function() {
  return /** @type {!proto.contrast.api.settings.LogLevel} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.contrast.api.settings.LogLevel} value
 * @return {!proto.contrast.api.settings.Reaction} returns this
 */
proto.contrast.api.settings.Reaction.prototype.setLogLevel = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Operation operation = 3;
 * @return {!proto.contrast.api.settings.Reaction.Operation}
 */
proto.contrast.api.settings.Reaction.prototype.getOperation = function() {
  return /** @type {!proto.contrast.api.settings.Reaction.Operation} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.contrast.api.settings.Reaction.Operation} value
 * @return {!proto.contrast.api.settings.Reaction} returns this
 */
proto.contrast.api.settings.Reaction.prototype.setOperation = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.settings.AccumulatorSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.settings.AccumulatorSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.settings.AccumulatorSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.AccumulatorSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    accumulatorsMap: (f = msg.getAccumulatorsMap()) ? f.toObject(includeInstance, proto.contrast.api.settings.Accumulator.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.settings.AccumulatorSettings}
 */
proto.contrast.api.settings.AccumulatorSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.settings.AccumulatorSettings;
  return proto.contrast.api.settings.AccumulatorSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.settings.AccumulatorSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.settings.AccumulatorSettings}
 */
proto.contrast.api.settings.AccumulatorSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getAccumulatorsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.contrast.api.settings.Accumulator.deserializeBinaryFromReader, "", new proto.contrast.api.settings.Accumulator());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.settings.AccumulatorSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.settings.AccumulatorSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.settings.AccumulatorSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.AccumulatorSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccumulatorsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.contrast.api.settings.Accumulator.serializeBinaryToWriter);
  }
};


/**
 * map<string, Accumulator> accumulators = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.contrast.api.settings.Accumulator>}
 */
proto.contrast.api.settings.AccumulatorSettings.prototype.getAccumulatorsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.contrast.api.settings.Accumulator>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.contrast.api.settings.Accumulator));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.contrast.api.settings.AccumulatorSettings} returns this
 */
proto.contrast.api.settings.AccumulatorSettings.prototype.clearAccumulatorsMap = function() {
  this.getAccumulatorsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.settings.InventoryFeatures.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.settings.InventoryFeatures.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.settings.InventoryFeatures} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.InventoryFeatures.toObject = function(includeInstance, msg) {
  var f, obj = {
    libraries: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    activity: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    monitorDb: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    monitorLdap: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    monitorWebCalls: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.settings.InventoryFeatures}
 */
proto.contrast.api.settings.InventoryFeatures.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.settings.InventoryFeatures;
  return proto.contrast.api.settings.InventoryFeatures.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.settings.InventoryFeatures} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.settings.InventoryFeatures}
 */
proto.contrast.api.settings.InventoryFeatures.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLibraries(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActivity(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMonitorDb(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMonitorLdap(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMonitorWebCalls(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.settings.InventoryFeatures.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.settings.InventoryFeatures.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.settings.InventoryFeatures} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.InventoryFeatures.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLibraries();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getActivity();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getMonitorDb();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getMonitorLdap();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getMonitorWebCalls();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional bool libraries = 1;
 * @return {boolean}
 */
proto.contrast.api.settings.InventoryFeatures.prototype.getLibraries = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.settings.InventoryFeatures} returns this
 */
proto.contrast.api.settings.InventoryFeatures.prototype.setLibraries = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool activity = 2;
 * @return {boolean}
 */
proto.contrast.api.settings.InventoryFeatures.prototype.getActivity = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.settings.InventoryFeatures} returns this
 */
proto.contrast.api.settings.InventoryFeatures.prototype.setActivity = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool monitor_db = 3;
 * @return {boolean}
 */
proto.contrast.api.settings.InventoryFeatures.prototype.getMonitorDb = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.settings.InventoryFeatures} returns this
 */
proto.contrast.api.settings.InventoryFeatures.prototype.setMonitorDb = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool monitor_ldap = 4;
 * @return {boolean}
 */
proto.contrast.api.settings.InventoryFeatures.prototype.getMonitorLdap = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.settings.InventoryFeatures} returns this
 */
proto.contrast.api.settings.InventoryFeatures.prototype.setMonitorLdap = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool monitor_web_calls = 5;
 * @return {boolean}
 */
proto.contrast.api.settings.InventoryFeatures.prototype.getMonitorWebCalls = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.settings.InventoryFeatures} returns this
 */
proto.contrast.api.settings.InventoryFeatures.prototype.setMonitorWebCalls = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contrast.api.settings.AssessFeatures.repeatedFields_ = [11,12,13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.settings.AssessFeatures.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.settings.AssessFeatures.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.settings.AssessFeatures} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.AssessFeatures.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    dynamicSources: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    sources: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    rules: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    propagators: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    taggers: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    responseScanning: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    stacktraces: jspb.Message.getFieldWithDefault(msg, 8, 0),
    validatorScopes: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    identityTagging: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    sanitizersList: jspb.Message.toObjectList(msg.getSanitizersList(),
    proto.contrast.api.settings.CustomRuleFeature.toObject, includeInstance),
    validatorsList: jspb.Message.toObjectList(msg.getValidatorsList(),
    proto.contrast.api.settings.CustomRuleFeature.toObject, includeInstance),
    disabledRulesList: (f = jspb.Message.getRepeatedField(msg, 13)) == null ? undefined : f,
    sampling: (f = msg.getSampling()) && proto.contrast.api.settings.Sampling.toObject(includeInstance, f),
    dynamicSourcesMapMap: (f = msg.getDynamicSourcesMapMap()) ? f.toObject(includeInstance, proto.contrast.api.settings.DynamicSource.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.settings.AssessFeatures}
 */
proto.contrast.api.settings.AssessFeatures.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.settings.AssessFeatures;
  return proto.contrast.api.settings.AssessFeatures.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.settings.AssessFeatures} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.settings.AssessFeatures}
 */
proto.contrast.api.settings.AssessFeatures.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDynamicSources(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSources(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRules(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPropagators(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTaggers(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResponseScanning(value);
      break;
    case 8:
      var value = /** @type {!proto.contrast.api.settings.AssessFeatures.SaveStacktrace} */ (reader.readEnum());
      msg.setStacktraces(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValidatorScopes(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIdentityTagging(value);
      break;
    case 11:
      var value = new proto.contrast.api.settings.CustomRuleFeature;
      reader.readMessage(value,proto.contrast.api.settings.CustomRuleFeature.deserializeBinaryFromReader);
      msg.addSanitizers(value);
      break;
    case 12:
      var value = new proto.contrast.api.settings.CustomRuleFeature;
      reader.readMessage(value,proto.contrast.api.settings.CustomRuleFeature.deserializeBinaryFromReader);
      msg.addValidators(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.addDisabledRules(value);
      break;
    case 14:
      var value = new proto.contrast.api.settings.Sampling;
      reader.readMessage(value,proto.contrast.api.settings.Sampling.deserializeBinaryFromReader);
      msg.setSampling(value);
      break;
    case 19:
      var value = msg.getDynamicSourcesMapMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.contrast.api.settings.DynamicSource.deserializeBinaryFromReader, "", new proto.contrast.api.settings.DynamicSource());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.settings.AssessFeatures.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.settings.AssessFeatures.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.settings.AssessFeatures} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.AssessFeatures.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getDynamicSources();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getSources();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getRules();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getPropagators();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getTaggers();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getResponseScanning();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getStacktraces();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getValidatorScopes();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getIdentityTagging();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getSanitizersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.contrast.api.settings.CustomRuleFeature.serializeBinaryToWriter
    );
  }
  f = message.getValidatorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.contrast.api.settings.CustomRuleFeature.serializeBinaryToWriter
    );
  }
  f = message.getDisabledRulesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      13,
      f
    );
  }
  f = message.getSampling();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.contrast.api.settings.Sampling.serializeBinaryToWriter
    );
  }
  f = message.getDynamicSourcesMapMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(19, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.contrast.api.settings.DynamicSource.serializeBinaryToWriter);
  }
};


/**
 * @enum {number}
 */
proto.contrast.api.settings.AssessFeatures.SaveStacktrace = {
  UNDEFINED: 0,
  ALL: 1,
  SOME: 2,
  NONE: 3
};

/**
 * optional bool enabled = 1;
 * @return {boolean}
 */
proto.contrast.api.settings.AssessFeatures.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.settings.AssessFeatures} returns this
 */
proto.contrast.api.settings.AssessFeatures.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool dynamic_sources = 2;
 * @return {boolean}
 */
proto.contrast.api.settings.AssessFeatures.prototype.getDynamicSources = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.settings.AssessFeatures} returns this
 */
proto.contrast.api.settings.AssessFeatures.prototype.setDynamicSources = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool sources = 3;
 * @return {boolean}
 */
proto.contrast.api.settings.AssessFeatures.prototype.getSources = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.settings.AssessFeatures} returns this
 */
proto.contrast.api.settings.AssessFeatures.prototype.setSources = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool rules = 4;
 * @return {boolean}
 */
proto.contrast.api.settings.AssessFeatures.prototype.getRules = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.settings.AssessFeatures} returns this
 */
proto.contrast.api.settings.AssessFeatures.prototype.setRules = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool propagators = 5;
 * @return {boolean}
 */
proto.contrast.api.settings.AssessFeatures.prototype.getPropagators = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.settings.AssessFeatures} returns this
 */
proto.contrast.api.settings.AssessFeatures.prototype.setPropagators = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool taggers = 6;
 * @return {boolean}
 */
proto.contrast.api.settings.AssessFeatures.prototype.getTaggers = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.settings.AssessFeatures} returns this
 */
proto.contrast.api.settings.AssessFeatures.prototype.setTaggers = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool response_scanning = 7;
 * @return {boolean}
 */
proto.contrast.api.settings.AssessFeatures.prototype.getResponseScanning = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.settings.AssessFeatures} returns this
 */
proto.contrast.api.settings.AssessFeatures.prototype.setResponseScanning = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional SaveStacktrace stacktraces = 8;
 * @return {!proto.contrast.api.settings.AssessFeatures.SaveStacktrace}
 */
proto.contrast.api.settings.AssessFeatures.prototype.getStacktraces = function() {
  return /** @type {!proto.contrast.api.settings.AssessFeatures.SaveStacktrace} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.contrast.api.settings.AssessFeatures.SaveStacktrace} value
 * @return {!proto.contrast.api.settings.AssessFeatures} returns this
 */
proto.contrast.api.settings.AssessFeatures.prototype.setStacktraces = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional bool validator_scopes = 9;
 * @return {boolean}
 */
proto.contrast.api.settings.AssessFeatures.prototype.getValidatorScopes = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.settings.AssessFeatures} returns this
 */
proto.contrast.api.settings.AssessFeatures.prototype.setValidatorScopes = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool identity_tagging = 10;
 * @return {boolean}
 */
proto.contrast.api.settings.AssessFeatures.prototype.getIdentityTagging = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.settings.AssessFeatures} returns this
 */
proto.contrast.api.settings.AssessFeatures.prototype.setIdentityTagging = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * repeated CustomRuleFeature sanitizers = 11;
 * @return {!Array<!proto.contrast.api.settings.CustomRuleFeature>}
 */
proto.contrast.api.settings.AssessFeatures.prototype.getSanitizersList = function() {
  return /** @type{!Array<!proto.contrast.api.settings.CustomRuleFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.settings.CustomRuleFeature, 11));
};


/**
 * @param {!Array<!proto.contrast.api.settings.CustomRuleFeature>} value
 * @return {!proto.contrast.api.settings.AssessFeatures} returns this
*/
proto.contrast.api.settings.AssessFeatures.prototype.setSanitizersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.contrast.api.settings.CustomRuleFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.settings.CustomRuleFeature}
 */
proto.contrast.api.settings.AssessFeatures.prototype.addSanitizers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.contrast.api.settings.CustomRuleFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.settings.AssessFeatures} returns this
 */
proto.contrast.api.settings.AssessFeatures.prototype.clearSanitizersList = function() {
  return this.setSanitizersList([]);
};


/**
 * repeated CustomRuleFeature validators = 12;
 * @return {!Array<!proto.contrast.api.settings.CustomRuleFeature>}
 */
proto.contrast.api.settings.AssessFeatures.prototype.getValidatorsList = function() {
  return /** @type{!Array<!proto.contrast.api.settings.CustomRuleFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.settings.CustomRuleFeature, 12));
};


/**
 * @param {!Array<!proto.contrast.api.settings.CustomRuleFeature>} value
 * @return {!proto.contrast.api.settings.AssessFeatures} returns this
*/
proto.contrast.api.settings.AssessFeatures.prototype.setValidatorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.contrast.api.settings.CustomRuleFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.settings.CustomRuleFeature}
 */
proto.contrast.api.settings.AssessFeatures.prototype.addValidators = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.contrast.api.settings.CustomRuleFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.settings.AssessFeatures} returns this
 */
proto.contrast.api.settings.AssessFeatures.prototype.clearValidatorsList = function() {
  return this.setValidatorsList([]);
};


/**
 * repeated string disabled_rules = 13;
 * @return {!Array<string>}
 */
proto.contrast.api.settings.AssessFeatures.prototype.getDisabledRulesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 13));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.contrast.api.settings.AssessFeatures} returns this
 */
proto.contrast.api.settings.AssessFeatures.prototype.setDisabledRulesList = function(value) {
  return jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.settings.AssessFeatures} returns this
 */
proto.contrast.api.settings.AssessFeatures.prototype.addDisabledRules = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.settings.AssessFeatures} returns this
 */
proto.contrast.api.settings.AssessFeatures.prototype.clearDisabledRulesList = function() {
  return this.setDisabledRulesList([]);
};


/**
 * optional Sampling sampling = 14;
 * @return {?proto.contrast.api.settings.Sampling}
 */
proto.contrast.api.settings.AssessFeatures.prototype.getSampling = function() {
  return /** @type{?proto.contrast.api.settings.Sampling} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.settings.Sampling, 14));
};


/**
 * @param {?proto.contrast.api.settings.Sampling|undefined} value
 * @return {!proto.contrast.api.settings.AssessFeatures} returns this
*/
proto.contrast.api.settings.AssessFeatures.prototype.setSampling = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.settings.AssessFeatures} returns this
 */
proto.contrast.api.settings.AssessFeatures.prototype.clearSampling = function() {
  return this.setSampling(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.settings.AssessFeatures.prototype.hasSampling = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * map<string, DynamicSource> dynamic_sources_map = 19;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.contrast.api.settings.DynamicSource>}
 */
proto.contrast.api.settings.AssessFeatures.prototype.getDynamicSourcesMapMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.contrast.api.settings.DynamicSource>} */ (
      jspb.Message.getMapField(this, 19, opt_noLazyCreate,
      proto.contrast.api.settings.DynamicSource));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.contrast.api.settings.AssessFeatures} returns this
 */
proto.contrast.api.settings.AssessFeatures.prototype.clearDynamicSourcesMapMap = function() {
  this.getDynamicSourcesMapMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contrast.api.settings.CustomRuleFeature.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.settings.CustomRuleFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.settings.CustomRuleFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.settings.CustomRuleFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.CustomRuleFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    api: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tagsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    rulesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.settings.CustomRuleFeature}
 */
proto.contrast.api.settings.CustomRuleFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.settings.CustomRuleFeature;
  return proto.contrast.api.settings.CustomRuleFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.settings.CustomRuleFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.settings.CustomRuleFeature}
 */
proto.contrast.api.settings.CustomRuleFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setApi(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addRules(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.settings.CustomRuleFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.settings.CustomRuleFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.settings.CustomRuleFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.CustomRuleFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApi();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getRulesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string api = 1;
 * @return {string}
 */
proto.contrast.api.settings.CustomRuleFeature.prototype.getApi = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.CustomRuleFeature} returns this
 */
proto.contrast.api.settings.CustomRuleFeature.prototype.setApi = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string tags = 2;
 * @return {!Array<string>}
 */
proto.contrast.api.settings.CustomRuleFeature.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.contrast.api.settings.CustomRuleFeature} returns this
 */
proto.contrast.api.settings.CustomRuleFeature.prototype.setTagsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.settings.CustomRuleFeature} returns this
 */
proto.contrast.api.settings.CustomRuleFeature.prototype.addTags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.settings.CustomRuleFeature} returns this
 */
proto.contrast.api.settings.CustomRuleFeature.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};


/**
 * repeated string rules = 3;
 * @return {!Array<string>}
 */
proto.contrast.api.settings.CustomRuleFeature.prototype.getRulesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.contrast.api.settings.CustomRuleFeature} returns this
 */
proto.contrast.api.settings.CustomRuleFeature.prototype.setRulesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.settings.CustomRuleFeature} returns this
 */
proto.contrast.api.settings.CustomRuleFeature.prototype.addRules = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.settings.CustomRuleFeature} returns this
 */
proto.contrast.api.settings.CustomRuleFeature.prototype.clearRulesList = function() {
  return this.setRulesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.settings.Sampling.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.settings.Sampling.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.settings.Sampling} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.Sampling.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    baseline: jspb.Message.getFieldWithDefault(msg, 2, 0),
    windowMs: jspb.Message.getFieldWithDefault(msg, 3, 0),
    requestFrequency: jspb.Message.getFieldWithDefault(msg, 4, 0),
    responseFrequency: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.settings.Sampling}
 */
proto.contrast.api.settings.Sampling.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.settings.Sampling;
  return proto.contrast.api.settings.Sampling.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.settings.Sampling} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.settings.Sampling}
 */
proto.contrast.api.settings.Sampling.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBaseline(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWindowMs(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRequestFrequency(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResponseFrequency(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.settings.Sampling.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.settings.Sampling.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.settings.Sampling} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.Sampling.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getBaseline();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getWindowMs();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getRequestFrequency();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getResponseFrequency();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * @return {boolean}
 */
proto.contrast.api.settings.Sampling.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.settings.Sampling} returns this
 */
proto.contrast.api.settings.Sampling.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int32 baseline = 2;
 * @return {number}
 */
proto.contrast.api.settings.Sampling.prototype.getBaseline = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.settings.Sampling} returns this
 */
proto.contrast.api.settings.Sampling.prototype.setBaseline = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 window_ms = 3;
 * @return {number}
 */
proto.contrast.api.settings.Sampling.prototype.getWindowMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.settings.Sampling} returns this
 */
proto.contrast.api.settings.Sampling.prototype.setWindowMs = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 request_frequency = 4;
 * @return {number}
 */
proto.contrast.api.settings.Sampling.prototype.getRequestFrequency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.settings.Sampling} returns this
 */
proto.contrast.api.settings.Sampling.prototype.setRequestFrequency = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 response_frequency = 5;
 * @return {number}
 */
proto.contrast.api.settings.Sampling.prototype.getResponseFrequency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.settings.Sampling} returns this
 */
proto.contrast.api.settings.Sampling.prototype.setResponseFrequency = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.settings.DynamicSource.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.settings.DynamicSource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.settings.DynamicSource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.DynamicSource.toObject = function(includeInstance, msg) {
  var f, obj = {
    className: jspb.Message.getFieldWithDefault(msg, 1, ""),
    methodName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    instanceMethod: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    target: jspb.Message.getFieldWithDefault(msg, 4, ""),
    propertiesMap: (f = msg.getPropertiesMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.settings.DynamicSource}
 */
proto.contrast.api.settings.DynamicSource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.settings.DynamicSource;
  return proto.contrast.api.settings.DynamicSource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.settings.DynamicSource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.settings.DynamicSource}
 */
proto.contrast.api.settings.DynamicSource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethodName(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInstanceMethod(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTarget(value);
      break;
    case 6:
      var value = msg.getPropertiesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.settings.DynamicSource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.settings.DynamicSource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.settings.DynamicSource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.DynamicSource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClassName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMethodName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInstanceMethod();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getTarget();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPropertiesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string class_name = 1;
 * @return {string}
 */
proto.contrast.api.settings.DynamicSource.prototype.getClassName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.DynamicSource} returns this
 */
proto.contrast.api.settings.DynamicSource.prototype.setClassName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string method_name = 2;
 * @return {string}
 */
proto.contrast.api.settings.DynamicSource.prototype.getMethodName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.DynamicSource} returns this
 */
proto.contrast.api.settings.DynamicSource.prototype.setMethodName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool instance_method = 3;
 * @return {boolean}
 */
proto.contrast.api.settings.DynamicSource.prototype.getInstanceMethod = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.settings.DynamicSource} returns this
 */
proto.contrast.api.settings.DynamicSource.prototype.setInstanceMethod = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string target = 4;
 * @return {string}
 */
proto.contrast.api.settings.DynamicSource.prototype.getTarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.DynamicSource} returns this
 */
proto.contrast.api.settings.DynamicSource.prototype.setTarget = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * map<string, string> properties = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.contrast.api.settings.DynamicSource.prototype.getPropertiesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.contrast.api.settings.DynamicSource} returns this
 */
proto.contrast.api.settings.DynamicSource.prototype.clearPropertiesMap = function() {
  this.getPropertiesMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contrast.api.settings.DefendFeatures.repeatedFields_ = [3,4,5,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.settings.DefendFeatures.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.settings.DefendFeatures.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.settings.DefendFeatures} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.DefendFeatures.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    botBlocker: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    botBlockersList: jspb.Message.toObjectList(msg.getBotBlockersList(),
    proto.contrast.api.settings.BotBlocker.toObject, includeInstance),
    ipBlacklistsList: jspb.Message.toObjectList(msg.getIpBlacklistsList(),
    proto.contrast.api.settings.IpFilter.toObject, includeInstance),
    ipWhitelistsList: jspb.Message.toObjectList(msg.getIpWhitelistsList(),
    proto.contrast.api.settings.IpFilter.toObject, includeInstance),
    logEnhancersList: jspb.Message.toObjectList(msg.getLogEnhancersList(),
    proto.contrast.api.settings.LogEnhancer.toObject, includeInstance),
    ruleDefinitionsList: jspb.Message.toObjectList(msg.getRuleDefinitionsList(),
    proto.contrast.api.settings.RuleDefinition.toObject, includeInstance),
    syslog: (f = msg.getSyslog()) && proto.contrast.api.settings.Syslog.toObject(includeInstance, f),
    auth: (f = msg.getAuth()) && proto.contrast.api.settings.Auth.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.settings.DefendFeatures}
 */
proto.contrast.api.settings.DefendFeatures.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.settings.DefendFeatures;
  return proto.contrast.api.settings.DefendFeatures.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.settings.DefendFeatures} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.settings.DefendFeatures}
 */
proto.contrast.api.settings.DefendFeatures.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBotBlocker(value);
      break;
    case 3:
      var value = new proto.contrast.api.settings.BotBlocker;
      reader.readMessage(value,proto.contrast.api.settings.BotBlocker.deserializeBinaryFromReader);
      msg.addBotBlockers(value);
      break;
    case 4:
      var value = new proto.contrast.api.settings.IpFilter;
      reader.readMessage(value,proto.contrast.api.settings.IpFilter.deserializeBinaryFromReader);
      msg.addIpBlacklists(value);
      break;
    case 5:
      var value = new proto.contrast.api.settings.IpFilter;
      reader.readMessage(value,proto.contrast.api.settings.IpFilter.deserializeBinaryFromReader);
      msg.addIpWhitelists(value);
      break;
    case 6:
      var value = new proto.contrast.api.settings.LogEnhancer;
      reader.readMessage(value,proto.contrast.api.settings.LogEnhancer.deserializeBinaryFromReader);
      msg.addLogEnhancers(value);
      break;
    case 7:
      var value = new proto.contrast.api.settings.RuleDefinition;
      reader.readMessage(value,proto.contrast.api.settings.RuleDefinition.deserializeBinaryFromReader);
      msg.addRuleDefinitions(value);
      break;
    case 8:
      var value = new proto.contrast.api.settings.Syslog;
      reader.readMessage(value,proto.contrast.api.settings.Syslog.deserializeBinaryFromReader);
      msg.setSyslog(value);
      break;
    case 9:
      var value = new proto.contrast.api.settings.Auth;
      reader.readMessage(value,proto.contrast.api.settings.Auth.deserializeBinaryFromReader);
      msg.setAuth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.settings.DefendFeatures.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.settings.DefendFeatures.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.settings.DefendFeatures} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.DefendFeatures.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getBotBlocker();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getBotBlockersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.contrast.api.settings.BotBlocker.serializeBinaryToWriter
    );
  }
  f = message.getIpBlacklistsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.contrast.api.settings.IpFilter.serializeBinaryToWriter
    );
  }
  f = message.getIpWhitelistsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.contrast.api.settings.IpFilter.serializeBinaryToWriter
    );
  }
  f = message.getLogEnhancersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.contrast.api.settings.LogEnhancer.serializeBinaryToWriter
    );
  }
  f = message.getRuleDefinitionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.contrast.api.settings.RuleDefinition.serializeBinaryToWriter
    );
  }
  f = message.getSyslog();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.contrast.api.settings.Syslog.serializeBinaryToWriter
    );
  }
  f = message.getAuth();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.contrast.api.settings.Auth.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool enabled = 1;
 * @return {boolean}
 */
proto.contrast.api.settings.DefendFeatures.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.settings.DefendFeatures} returns this
 */
proto.contrast.api.settings.DefendFeatures.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool bot_blocker = 2;
 * @return {boolean}
 */
proto.contrast.api.settings.DefendFeatures.prototype.getBotBlocker = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.settings.DefendFeatures} returns this
 */
proto.contrast.api.settings.DefendFeatures.prototype.setBotBlocker = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * repeated BotBlocker bot_blockers = 3;
 * @return {!Array<!proto.contrast.api.settings.BotBlocker>}
 */
proto.contrast.api.settings.DefendFeatures.prototype.getBotBlockersList = function() {
  return /** @type{!Array<!proto.contrast.api.settings.BotBlocker>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.settings.BotBlocker, 3));
};


/**
 * @param {!Array<!proto.contrast.api.settings.BotBlocker>} value
 * @return {!proto.contrast.api.settings.DefendFeatures} returns this
*/
proto.contrast.api.settings.DefendFeatures.prototype.setBotBlockersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.contrast.api.settings.BotBlocker=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.settings.BotBlocker}
 */
proto.contrast.api.settings.DefendFeatures.prototype.addBotBlockers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.contrast.api.settings.BotBlocker, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.settings.DefendFeatures} returns this
 */
proto.contrast.api.settings.DefendFeatures.prototype.clearBotBlockersList = function() {
  return this.setBotBlockersList([]);
};


/**
 * repeated IpFilter ip_blacklists = 4;
 * @return {!Array<!proto.contrast.api.settings.IpFilter>}
 */
proto.contrast.api.settings.DefendFeatures.prototype.getIpBlacklistsList = function() {
  return /** @type{!Array<!proto.contrast.api.settings.IpFilter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.settings.IpFilter, 4));
};


/**
 * @param {!Array<!proto.contrast.api.settings.IpFilter>} value
 * @return {!proto.contrast.api.settings.DefendFeatures} returns this
*/
proto.contrast.api.settings.DefendFeatures.prototype.setIpBlacklistsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.contrast.api.settings.IpFilter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.settings.IpFilter}
 */
proto.contrast.api.settings.DefendFeatures.prototype.addIpBlacklists = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.contrast.api.settings.IpFilter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.settings.DefendFeatures} returns this
 */
proto.contrast.api.settings.DefendFeatures.prototype.clearIpBlacklistsList = function() {
  return this.setIpBlacklistsList([]);
};


/**
 * repeated IpFilter ip_whitelists = 5;
 * @return {!Array<!proto.contrast.api.settings.IpFilter>}
 */
proto.contrast.api.settings.DefendFeatures.prototype.getIpWhitelistsList = function() {
  return /** @type{!Array<!proto.contrast.api.settings.IpFilter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.settings.IpFilter, 5));
};


/**
 * @param {!Array<!proto.contrast.api.settings.IpFilter>} value
 * @return {!proto.contrast.api.settings.DefendFeatures} returns this
*/
proto.contrast.api.settings.DefendFeatures.prototype.setIpWhitelistsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.contrast.api.settings.IpFilter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.settings.IpFilter}
 */
proto.contrast.api.settings.DefendFeatures.prototype.addIpWhitelists = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.contrast.api.settings.IpFilter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.settings.DefendFeatures} returns this
 */
proto.contrast.api.settings.DefendFeatures.prototype.clearIpWhitelistsList = function() {
  return this.setIpWhitelistsList([]);
};


/**
 * repeated LogEnhancer log_enhancers = 6;
 * @return {!Array<!proto.contrast.api.settings.LogEnhancer>}
 */
proto.contrast.api.settings.DefendFeatures.prototype.getLogEnhancersList = function() {
  return /** @type{!Array<!proto.contrast.api.settings.LogEnhancer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.settings.LogEnhancer, 6));
};


/**
 * @param {!Array<!proto.contrast.api.settings.LogEnhancer>} value
 * @return {!proto.contrast.api.settings.DefendFeatures} returns this
*/
proto.contrast.api.settings.DefendFeatures.prototype.setLogEnhancersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.contrast.api.settings.LogEnhancer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.settings.LogEnhancer}
 */
proto.contrast.api.settings.DefendFeatures.prototype.addLogEnhancers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.contrast.api.settings.LogEnhancer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.settings.DefendFeatures} returns this
 */
proto.contrast.api.settings.DefendFeatures.prototype.clearLogEnhancersList = function() {
  return this.setLogEnhancersList([]);
};


/**
 * repeated RuleDefinition rule_definitions = 7;
 * @return {!Array<!proto.contrast.api.settings.RuleDefinition>}
 */
proto.contrast.api.settings.DefendFeatures.prototype.getRuleDefinitionsList = function() {
  return /** @type{!Array<!proto.contrast.api.settings.RuleDefinition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.settings.RuleDefinition, 7));
};


/**
 * @param {!Array<!proto.contrast.api.settings.RuleDefinition>} value
 * @return {!proto.contrast.api.settings.DefendFeatures} returns this
*/
proto.contrast.api.settings.DefendFeatures.prototype.setRuleDefinitionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.contrast.api.settings.RuleDefinition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.settings.RuleDefinition}
 */
proto.contrast.api.settings.DefendFeatures.prototype.addRuleDefinitions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.contrast.api.settings.RuleDefinition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.settings.DefendFeatures} returns this
 */
proto.contrast.api.settings.DefendFeatures.prototype.clearRuleDefinitionsList = function() {
  return this.setRuleDefinitionsList([]);
};


/**
 * optional Syslog syslog = 8;
 * @return {?proto.contrast.api.settings.Syslog}
 */
proto.contrast.api.settings.DefendFeatures.prototype.getSyslog = function() {
  return /** @type{?proto.contrast.api.settings.Syslog} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.settings.Syslog, 8));
};


/**
 * @param {?proto.contrast.api.settings.Syslog|undefined} value
 * @return {!proto.contrast.api.settings.DefendFeatures} returns this
*/
proto.contrast.api.settings.DefendFeatures.prototype.setSyslog = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.settings.DefendFeatures} returns this
 */
proto.contrast.api.settings.DefendFeatures.prototype.clearSyslog = function() {
  return this.setSyslog(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.settings.DefendFeatures.prototype.hasSyslog = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Auth auth = 9;
 * @return {?proto.contrast.api.settings.Auth}
 */
proto.contrast.api.settings.DefendFeatures.prototype.getAuth = function() {
  return /** @type{?proto.contrast.api.settings.Auth} */ (
    jspb.Message.getWrapperField(this, proto.contrast.api.settings.Auth, 9));
};


/**
 * @param {?proto.contrast.api.settings.Auth|undefined} value
 * @return {!proto.contrast.api.settings.DefendFeatures} returns this
*/
proto.contrast.api.settings.DefendFeatures.prototype.setAuth = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.contrast.api.settings.DefendFeatures} returns this
 */
proto.contrast.api.settings.DefendFeatures.prototype.clearAuth = function() {
  return this.setAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.contrast.api.settings.DefendFeatures.prototype.hasAuth = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.settings.Syslog.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.settings.Syslog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.settings.Syslog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.Syslog.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    ipAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    port: jspb.Message.getFieldWithDefault(msg, 3, 0),
    facilityCode: jspb.Message.getFieldWithDefault(msg, 4, 0),
    connectionType: jspb.Message.getFieldWithDefault(msg, 5, 0),
    severityExploited: jspb.Message.getFieldWithDefault(msg, 6, 0),
    severityBlocked: jspb.Message.getFieldWithDefault(msg, 7, 0),
    severityProbed: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.settings.Syslog}
 */
proto.contrast.api.settings.Syslog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.settings.Syslog;
  return proto.contrast.api.settings.Syslog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.settings.Syslog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.settings.Syslog}
 */
proto.contrast.api.settings.Syslog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpAddress(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFacilityCode(value);
      break;
    case 5:
      var value = /** @type {!proto.contrast.api.settings.Syslog.ConnectionType} */ (reader.readEnum());
      msg.setConnectionType(value);
      break;
    case 6:
      var value = /** @type {!proto.contrast.api.settings.Syslog.Severity} */ (reader.readEnum());
      msg.setSeverityExploited(value);
      break;
    case 7:
      var value = /** @type {!proto.contrast.api.settings.Syslog.Severity} */ (reader.readEnum());
      msg.setSeverityBlocked(value);
      break;
    case 8:
      var value = /** @type {!proto.contrast.api.settings.Syslog.Severity} */ (reader.readEnum());
      msg.setSeverityProbed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.settings.Syslog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.settings.Syslog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.settings.Syslog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.Syslog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getIpAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getFacilityCode();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getConnectionType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getSeverityExploited();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getSeverityBlocked();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getSeverityProbed();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.contrast.api.settings.Syslog.ConnectionType = {
  UNENCRYPTED: 0,
  ENCRYOTED: 1
};

/**
 * @enum {number}
 */
proto.contrast.api.settings.Syslog.Severity = {
  UNDEFINED: 0,
  ALERT: 1,
  CRITICAL: 2,
  ERROR: 3,
  WARNING: 4,
  NOTICE: 5,
  INFO: 6,
  DEBUG: 7
};

/**
 * optional bool enabled = 1;
 * @return {boolean}
 */
proto.contrast.api.settings.Syslog.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.settings.Syslog} returns this
 */
proto.contrast.api.settings.Syslog.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string ip_address = 2;
 * @return {string}
 */
proto.contrast.api.settings.Syslog.prototype.getIpAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.Syslog} returns this
 */
proto.contrast.api.settings.Syslog.prototype.setIpAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 port = 3;
 * @return {number}
 */
proto.contrast.api.settings.Syslog.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.settings.Syslog} returns this
 */
proto.contrast.api.settings.Syslog.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 facility_code = 4;
 * @return {number}
 */
proto.contrast.api.settings.Syslog.prototype.getFacilityCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.settings.Syslog} returns this
 */
proto.contrast.api.settings.Syslog.prototype.setFacilityCode = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional ConnectionType connection_type = 5;
 * @return {!proto.contrast.api.settings.Syslog.ConnectionType}
 */
proto.contrast.api.settings.Syslog.prototype.getConnectionType = function() {
  return /** @type {!proto.contrast.api.settings.Syslog.ConnectionType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.contrast.api.settings.Syslog.ConnectionType} value
 * @return {!proto.contrast.api.settings.Syslog} returns this
 */
proto.contrast.api.settings.Syslog.prototype.setConnectionType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional Severity severity_exploited = 6;
 * @return {!proto.contrast.api.settings.Syslog.Severity}
 */
proto.contrast.api.settings.Syslog.prototype.getSeverityExploited = function() {
  return /** @type {!proto.contrast.api.settings.Syslog.Severity} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.contrast.api.settings.Syslog.Severity} value
 * @return {!proto.contrast.api.settings.Syslog} returns this
 */
proto.contrast.api.settings.Syslog.prototype.setSeverityExploited = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional Severity severity_blocked = 7;
 * @return {!proto.contrast.api.settings.Syslog.Severity}
 */
proto.contrast.api.settings.Syslog.prototype.getSeverityBlocked = function() {
  return /** @type {!proto.contrast.api.settings.Syslog.Severity} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.contrast.api.settings.Syslog.Severity} value
 * @return {!proto.contrast.api.settings.Syslog} returns this
 */
proto.contrast.api.settings.Syslog.prototype.setSeverityBlocked = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional Severity severity_probed = 8;
 * @return {!proto.contrast.api.settings.Syslog.Severity}
 */
proto.contrast.api.settings.Syslog.prototype.getSeverityProbed = function() {
  return /** @type {!proto.contrast.api.settings.Syslog.Severity} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.contrast.api.settings.Syslog.Severity} value
 * @return {!proto.contrast.api.settings.Syslog} returns this
 */
proto.contrast.api.settings.Syslog.prototype.setSeverityProbed = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.settings.BotBlocker.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.settings.BotBlocker.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.settings.BotBlocker} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.BotBlocker.toObject = function(includeInstance, msg) {
  var f, obj = {
    bot: jspb.Message.getFieldWithDefault(msg, 1, ""),
    caseSensitive: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    startAnchor: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.settings.BotBlocker}
 */
proto.contrast.api.settings.BotBlocker.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.settings.BotBlocker;
  return proto.contrast.api.settings.BotBlocker.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.settings.BotBlocker} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.settings.BotBlocker}
 */
proto.contrast.api.settings.BotBlocker.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBot(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCaseSensitive(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStartAnchor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.settings.BotBlocker.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.settings.BotBlocker.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.settings.BotBlocker} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.BotBlocker.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBot();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCaseSensitive();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getStartAnchor();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string bot = 1;
 * @return {string}
 */
proto.contrast.api.settings.BotBlocker.prototype.getBot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.BotBlocker} returns this
 */
proto.contrast.api.settings.BotBlocker.prototype.setBot = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool case_sensitive = 2;
 * @return {boolean}
 */
proto.contrast.api.settings.BotBlocker.prototype.getCaseSensitive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.settings.BotBlocker} returns this
 */
proto.contrast.api.settings.BotBlocker.prototype.setCaseSensitive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool start_anchor = 3;
 * @return {boolean}
 */
proto.contrast.api.settings.BotBlocker.prototype.getStartAnchor = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.settings.BotBlocker} returns this
 */
proto.contrast.api.settings.BotBlocker.prototype.setStartAnchor = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.settings.IpFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.settings.IpFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.settings.IpFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.IpFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    expires: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    expiresAtMs: jspb.Message.getFieldWithDefault(msg, 2, 0),
    ip: jspb.Message.getFieldWithDefault(msg, 3, ""),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    uuid: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.settings.IpFilter}
 */
proto.contrast.api.settings.IpFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.settings.IpFilter;
  return proto.contrast.api.settings.IpFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.settings.IpFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.settings.IpFilter}
 */
proto.contrast.api.settings.IpFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExpires(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExpiresAtMs(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.settings.IpFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.settings.IpFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.settings.IpFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.IpFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExpires();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getExpiresAtMs();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional bool expires = 1;
 * @return {boolean}
 */
proto.contrast.api.settings.IpFilter.prototype.getExpires = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.settings.IpFilter} returns this
 */
proto.contrast.api.settings.IpFilter.prototype.setExpires = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int64 expires_at_ms = 2;
 * @return {number}
 */
proto.contrast.api.settings.IpFilter.prototype.getExpiresAtMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.settings.IpFilter} returns this
 */
proto.contrast.api.settings.IpFilter.prototype.setExpiresAtMs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string ip = 3;
 * @return {string}
 */
proto.contrast.api.settings.IpFilter.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.IpFilter} returns this
 */
proto.contrast.api.settings.IpFilter.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.contrast.api.settings.IpFilter.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.IpFilter} returns this
 */
proto.contrast.api.settings.IpFilter.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string uuid = 5;
 * @return {string}
 */
proto.contrast.api.settings.IpFilter.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.IpFilter} returns this
 */
proto.contrast.api.settings.IpFilter.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.settings.LogEnhancer.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.settings.LogEnhancer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.settings.LogEnhancer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.LogEnhancer.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    api: jspb.Message.getFieldWithDefault(msg, 3, ""),
    format: jspb.Message.getFieldWithDefault(msg, 4, ""),
    logLevel: jspb.Message.getFieldWithDefault(msg, 5, 0),
    logType: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.settings.LogEnhancer}
 */
proto.contrast.api.settings.LogEnhancer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.settings.LogEnhancer;
  return proto.contrast.api.settings.LogEnhancer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.settings.LogEnhancer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.settings.LogEnhancer}
 */
proto.contrast.api.settings.LogEnhancer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setApi(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFormat(value);
      break;
    case 5:
      var value = /** @type {!proto.contrast.api.settings.LogEnhancer.LogLevel} */ (reader.readEnum());
      msg.setLogLevel(value);
      break;
    case 6:
      var value = /** @type {!proto.contrast.api.settings.LogEnhancer.LogType} */ (reader.readEnum());
      msg.setLogType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.settings.LogEnhancer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.settings.LogEnhancer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.settings.LogEnhancer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.LogEnhancer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getApi();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFormat();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLogLevel();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getLogType();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.contrast.api.settings.LogEnhancer.LogLevel = {
  TRACE: 0,
  DEBUG: 1,
  INFO: 2,
  WARN: 3,
  ERROR: 4
};

/**
 * @enum {number}
 */
proto.contrast.api.settings.LogEnhancer.LogType = {
  LOG_AUDIT: 0,
  LOG_ERROR: 1,
  LOG_SECURITY: 2
};

/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.contrast.api.settings.LogEnhancer.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.settings.LogEnhancer} returns this
 */
proto.contrast.api.settings.LogEnhancer.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.contrast.api.settings.LogEnhancer.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.LogEnhancer} returns this
 */
proto.contrast.api.settings.LogEnhancer.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string api = 3;
 * @return {string}
 */
proto.contrast.api.settings.LogEnhancer.prototype.getApi = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.LogEnhancer} returns this
 */
proto.contrast.api.settings.LogEnhancer.prototype.setApi = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string format = 4;
 * @return {string}
 */
proto.contrast.api.settings.LogEnhancer.prototype.getFormat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.LogEnhancer} returns this
 */
proto.contrast.api.settings.LogEnhancer.prototype.setFormat = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional LogLevel log_level = 5;
 * @return {!proto.contrast.api.settings.LogEnhancer.LogLevel}
 */
proto.contrast.api.settings.LogEnhancer.prototype.getLogLevel = function() {
  return /** @type {!proto.contrast.api.settings.LogEnhancer.LogLevel} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.contrast.api.settings.LogEnhancer.LogLevel} value
 * @return {!proto.contrast.api.settings.LogEnhancer} returns this
 */
proto.contrast.api.settings.LogEnhancer.prototype.setLogLevel = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional LogType log_type = 6;
 * @return {!proto.contrast.api.settings.LogEnhancer.LogType}
 */
proto.contrast.api.settings.LogEnhancer.prototype.getLogType = function() {
  return /** @type {!proto.contrast.api.settings.LogEnhancer.LogType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.contrast.api.settings.LogEnhancer.LogType} value
 * @return {!proto.contrast.api.settings.LogEnhancer} returns this
 */
proto.contrast.api.settings.LogEnhancer.prototype.setLogType = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contrast.api.settings.RuleDefinition.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.settings.RuleDefinition.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.settings.RuleDefinition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.settings.RuleDefinition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.RuleDefinition.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    keywordsList: jspb.Message.toObjectList(msg.getKeywordsList(),
    proto.contrast.api.settings.StringDefinition.toObject, includeInstance),
    patternsList: jspb.Message.toObjectList(msg.getPatternsList(),
    proto.contrast.api.settings.StringDefinition.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.settings.RuleDefinition}
 */
proto.contrast.api.settings.RuleDefinition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.settings.RuleDefinition;
  return proto.contrast.api.settings.RuleDefinition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.settings.RuleDefinition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.settings.RuleDefinition}
 */
proto.contrast.api.settings.RuleDefinition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.contrast.api.settings.StringDefinition;
      reader.readMessage(value,proto.contrast.api.settings.StringDefinition.deserializeBinaryFromReader);
      msg.addKeywords(value);
      break;
    case 3:
      var value = new proto.contrast.api.settings.StringDefinition;
      reader.readMessage(value,proto.contrast.api.settings.StringDefinition.deserializeBinaryFromReader);
      msg.addPatterns(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.settings.RuleDefinition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.settings.RuleDefinition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.settings.RuleDefinition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.RuleDefinition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKeywordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.contrast.api.settings.StringDefinition.serializeBinaryToWriter
    );
  }
  f = message.getPatternsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.contrast.api.settings.StringDefinition.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.contrast.api.settings.RuleDefinition.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.RuleDefinition} returns this
 */
proto.contrast.api.settings.RuleDefinition.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated StringDefinition keywords = 2;
 * @return {!Array<!proto.contrast.api.settings.StringDefinition>}
 */
proto.contrast.api.settings.RuleDefinition.prototype.getKeywordsList = function() {
  return /** @type{!Array<!proto.contrast.api.settings.StringDefinition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.settings.StringDefinition, 2));
};


/**
 * @param {!Array<!proto.contrast.api.settings.StringDefinition>} value
 * @return {!proto.contrast.api.settings.RuleDefinition} returns this
*/
proto.contrast.api.settings.RuleDefinition.prototype.setKeywordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.contrast.api.settings.StringDefinition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.settings.StringDefinition}
 */
proto.contrast.api.settings.RuleDefinition.prototype.addKeywords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.contrast.api.settings.StringDefinition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.settings.RuleDefinition} returns this
 */
proto.contrast.api.settings.RuleDefinition.prototype.clearKeywordsList = function() {
  return this.setKeywordsList([]);
};


/**
 * repeated StringDefinition patterns = 3;
 * @return {!Array<!proto.contrast.api.settings.StringDefinition>}
 */
proto.contrast.api.settings.RuleDefinition.prototype.getPatternsList = function() {
  return /** @type{!Array<!proto.contrast.api.settings.StringDefinition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.settings.StringDefinition, 3));
};


/**
 * @param {!Array<!proto.contrast.api.settings.StringDefinition>} value
 * @return {!proto.contrast.api.settings.RuleDefinition} returns this
*/
proto.contrast.api.settings.RuleDefinition.prototype.setPatternsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.contrast.api.settings.StringDefinition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.settings.StringDefinition}
 */
proto.contrast.api.settings.RuleDefinition.prototype.addPatterns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.contrast.api.settings.StringDefinition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.settings.RuleDefinition} returns this
 */
proto.contrast.api.settings.RuleDefinition.prototype.clearPatternsList = function() {
  return this.setPatternsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.settings.StringDefinition.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.settings.StringDefinition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.settings.StringDefinition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.StringDefinition.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    rule: jspb.Message.getFieldWithDefault(msg, 2, ""),
    id: jspb.Message.getFieldWithDefault(msg, 3, ""),
    value: jspb.Message.getFieldWithDefault(msg, 4, ""),
    downcase: jspb.Message.getFieldWithDefault(msg, 7, ""),
    caseSensitive: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    score: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.settings.StringDefinition}
 */
proto.contrast.api.settings.StringDefinition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.settings.StringDefinition;
  return proto.contrast.api.settings.StringDefinition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.settings.StringDefinition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.settings.StringDefinition}
 */
proto.contrast.api.settings.StringDefinition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.contrast.api.settings.StringDefinition.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRule(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDowncase(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCaseSensitive(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.settings.StringDefinition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.settings.StringDefinition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.settings.StringDefinition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.StringDefinition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getRule();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDowncase();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getCaseSensitive();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getScore();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.contrast.api.settings.StringDefinition.Type = {
  KEYWORD: 0,
  PATTERN: 1
};

/**
 * optional Type type = 1;
 * @return {!proto.contrast.api.settings.StringDefinition.Type}
 */
proto.contrast.api.settings.StringDefinition.prototype.getType = function() {
  return /** @type {!proto.contrast.api.settings.StringDefinition.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.contrast.api.settings.StringDefinition.Type} value
 * @return {!proto.contrast.api.settings.StringDefinition} returns this
 */
proto.contrast.api.settings.StringDefinition.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string rule = 2;
 * @return {string}
 */
proto.contrast.api.settings.StringDefinition.prototype.getRule = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.StringDefinition} returns this
 */
proto.contrast.api.settings.StringDefinition.prototype.setRule = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string id = 3;
 * @return {string}
 */
proto.contrast.api.settings.StringDefinition.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.StringDefinition} returns this
 */
proto.contrast.api.settings.StringDefinition.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string value = 4;
 * @return {string}
 */
proto.contrast.api.settings.StringDefinition.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.StringDefinition} returns this
 */
proto.contrast.api.settings.StringDefinition.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string downcase = 7;
 * @return {string}
 */
proto.contrast.api.settings.StringDefinition.prototype.getDowncase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.StringDefinition} returns this
 */
proto.contrast.api.settings.StringDefinition.prototype.setDowncase = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bool case_sensitive = 5;
 * @return {boolean}
 */
proto.contrast.api.settings.StringDefinition.prototype.getCaseSensitive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.settings.StringDefinition} returns this
 */
proto.contrast.api.settings.StringDefinition.prototype.setCaseSensitive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional int32 score = 6;
 * @return {number}
 */
proto.contrast.api.settings.StringDefinition.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.settings.StringDefinition} returns this
 */
proto.contrast.api.settings.StringDefinition.prototype.setScore = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contrast.api.settings.Exclusion.repeatedFields_ = [4,5,6,7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.settings.Exclusion.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.settings.Exclusion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.settings.Exclusion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.Exclusion.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    matchStrategy: jspb.Message.getFieldWithDefault(msg, 3, 0),
    modesList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    protectionRulesList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    assessmentRulesList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    urlsList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    blacklistList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
    inputType: jspb.Message.getFieldWithDefault(msg, 9, 0),
    inputName: jspb.Message.getFieldWithDefault(msg, 10, ""),
    assess: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    protect: jspb.Message.getBooleanFieldWithDefault(msg, 12, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.settings.Exclusion}
 */
proto.contrast.api.settings.Exclusion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.settings.Exclusion;
  return proto.contrast.api.settings.Exclusion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.settings.Exclusion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.settings.Exclusion}
 */
proto.contrast.api.settings.Exclusion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.contrast.api.settings.Exclusion.ExclusionType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {!proto.contrast.api.settings.Exclusion.MatchStrategy} */ (reader.readEnum());
      msg.setMatchStrategy(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addModes(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addProtectionRules(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addAssessmentRules(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addUrls(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addBlacklist(value);
      break;
    case 9:
      var value = /** @type {!proto.contrast.api.settings.Exclusion.InputType} */ (reader.readEnum());
      msg.setInputType(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setInputName(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAssess(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setProtect(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.settings.Exclusion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.settings.Exclusion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.settings.Exclusion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.Exclusion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMatchStrategy();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getModesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getProtectionRulesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getAssessmentRulesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getUrlsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getBlacklistList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = message.getInputType();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getInputName();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getAssess();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getProtect();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.contrast.api.settings.Exclusion.ExclusionType = {
  URL: 0,
  INPUT: 1,
  CODE: 2
};

/**
 * @enum {number}
 */
proto.contrast.api.settings.Exclusion.InputType = {
  UNDEFINED: 0,
  COOKIE: 1,
  PARAMETER: 2,
  HEADER: 3,
  BODY: 4,
  QUERYSTRING: 5
};

/**
 * @enum {number}
 */
proto.contrast.api.settings.Exclusion.MatchStrategy = {
  ALL: 0,
  ONLY: 1
};

/**
 * optional ExclusionType type = 1;
 * @return {!proto.contrast.api.settings.Exclusion.ExclusionType}
 */
proto.contrast.api.settings.Exclusion.prototype.getType = function() {
  return /** @type {!proto.contrast.api.settings.Exclusion.ExclusionType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.contrast.api.settings.Exclusion.ExclusionType} value
 * @return {!proto.contrast.api.settings.Exclusion} returns this
 */
proto.contrast.api.settings.Exclusion.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.contrast.api.settings.Exclusion.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.Exclusion} returns this
 */
proto.contrast.api.settings.Exclusion.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional MatchStrategy match_strategy = 3;
 * @return {!proto.contrast.api.settings.Exclusion.MatchStrategy}
 */
proto.contrast.api.settings.Exclusion.prototype.getMatchStrategy = function() {
  return /** @type {!proto.contrast.api.settings.Exclusion.MatchStrategy} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.contrast.api.settings.Exclusion.MatchStrategy} value
 * @return {!proto.contrast.api.settings.Exclusion} returns this
 */
proto.contrast.api.settings.Exclusion.prototype.setMatchStrategy = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * repeated string modes = 4;
 * @return {!Array<string>}
 */
proto.contrast.api.settings.Exclusion.prototype.getModesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.contrast.api.settings.Exclusion} returns this
 */
proto.contrast.api.settings.Exclusion.prototype.setModesList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.settings.Exclusion} returns this
 */
proto.contrast.api.settings.Exclusion.prototype.addModes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.settings.Exclusion} returns this
 */
proto.contrast.api.settings.Exclusion.prototype.clearModesList = function() {
  return this.setModesList([]);
};


/**
 * repeated string protection_rules = 5;
 * @return {!Array<string>}
 */
proto.contrast.api.settings.Exclusion.prototype.getProtectionRulesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.contrast.api.settings.Exclusion} returns this
 */
proto.contrast.api.settings.Exclusion.prototype.setProtectionRulesList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.settings.Exclusion} returns this
 */
proto.contrast.api.settings.Exclusion.prototype.addProtectionRules = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.settings.Exclusion} returns this
 */
proto.contrast.api.settings.Exclusion.prototype.clearProtectionRulesList = function() {
  return this.setProtectionRulesList([]);
};


/**
 * repeated string assessment_rules = 6;
 * @return {!Array<string>}
 */
proto.contrast.api.settings.Exclusion.prototype.getAssessmentRulesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.contrast.api.settings.Exclusion} returns this
 */
proto.contrast.api.settings.Exclusion.prototype.setAssessmentRulesList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.settings.Exclusion} returns this
 */
proto.contrast.api.settings.Exclusion.prototype.addAssessmentRules = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.settings.Exclusion} returns this
 */
proto.contrast.api.settings.Exclusion.prototype.clearAssessmentRulesList = function() {
  return this.setAssessmentRulesList([]);
};


/**
 * repeated string urls = 7;
 * @return {!Array<string>}
 */
proto.contrast.api.settings.Exclusion.prototype.getUrlsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.contrast.api.settings.Exclusion} returns this
 */
proto.contrast.api.settings.Exclusion.prototype.setUrlsList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.settings.Exclusion} returns this
 */
proto.contrast.api.settings.Exclusion.prototype.addUrls = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.settings.Exclusion} returns this
 */
proto.contrast.api.settings.Exclusion.prototype.clearUrlsList = function() {
  return this.setUrlsList([]);
};


/**
 * repeated string blacklist = 8;
 * @return {!Array<string>}
 */
proto.contrast.api.settings.Exclusion.prototype.getBlacklistList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.contrast.api.settings.Exclusion} returns this
 */
proto.contrast.api.settings.Exclusion.prototype.setBlacklistList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.settings.Exclusion} returns this
 */
proto.contrast.api.settings.Exclusion.prototype.addBlacklist = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.settings.Exclusion} returns this
 */
proto.contrast.api.settings.Exclusion.prototype.clearBlacklistList = function() {
  return this.setBlacklistList([]);
};


/**
 * optional InputType input_type = 9;
 * @return {!proto.contrast.api.settings.Exclusion.InputType}
 */
proto.contrast.api.settings.Exclusion.prototype.getInputType = function() {
  return /** @type {!proto.contrast.api.settings.Exclusion.InputType} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.contrast.api.settings.Exclusion.InputType} value
 * @return {!proto.contrast.api.settings.Exclusion} returns this
 */
proto.contrast.api.settings.Exclusion.prototype.setInputType = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional string input_name = 10;
 * @return {string}
 */
proto.contrast.api.settings.Exclusion.prototype.getInputName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.Exclusion} returns this
 */
proto.contrast.api.settings.Exclusion.prototype.setInputName = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional bool assess = 11;
 * @return {boolean}
 */
proto.contrast.api.settings.Exclusion.prototype.getAssess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.settings.Exclusion} returns this
 */
proto.contrast.api.settings.Exclusion.prototype.setAssess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional bool protect = 12;
 * @return {boolean}
 */
proto.contrast.api.settings.Exclusion.prototype.getProtect = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.settings.Exclusion} returns this
 */
proto.contrast.api.settings.Exclusion.prototype.setProtect = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contrast.api.settings.VirtualPatch.repeatedFields_ = [4,5,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.settings.VirtualPatch.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.settings.VirtualPatch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.settings.VirtualPatch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.VirtualPatch.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    uuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    key: jspb.Message.getFieldWithDefault(msg, 3, ""),
    headersList: jspb.Message.toObjectList(msg.getHeadersList(),
    proto.contrast.api.settings.VirtualPatchCondition.toObject, includeInstance),
    parametersList: jspb.Message.toObjectList(msg.getParametersList(),
    proto.contrast.api.settings.VirtualPatchCondition.toObject, includeInstance),
    urlsList: jspb.Message.toObjectList(msg.getUrlsList(),
    proto.contrast.api.settings.VirtualPatchCondition.toObject, includeInstance),
    conditionsList: jspb.Message.toObjectList(msg.getConditionsList(),
    proto.contrast.api.settings.VirtualPatchCondition.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.settings.VirtualPatch}
 */
proto.contrast.api.settings.VirtualPatch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.settings.VirtualPatch;
  return proto.contrast.api.settings.VirtualPatch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.settings.VirtualPatch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.settings.VirtualPatch}
 */
proto.contrast.api.settings.VirtualPatch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 4:
      var value = new proto.contrast.api.settings.VirtualPatchCondition;
      reader.readMessage(value,proto.contrast.api.settings.VirtualPatchCondition.deserializeBinaryFromReader);
      msg.addHeaders(value);
      break;
    case 5:
      var value = new proto.contrast.api.settings.VirtualPatchCondition;
      reader.readMessage(value,proto.contrast.api.settings.VirtualPatchCondition.deserializeBinaryFromReader);
      msg.addParameters(value);
      break;
    case 6:
      var value = new proto.contrast.api.settings.VirtualPatchCondition;
      reader.readMessage(value,proto.contrast.api.settings.VirtualPatchCondition.deserializeBinaryFromReader);
      msg.addUrls(value);
      break;
    case 7:
      var value = new proto.contrast.api.settings.VirtualPatchCondition;
      reader.readMessage(value,proto.contrast.api.settings.VirtualPatchCondition.deserializeBinaryFromReader);
      msg.addConditions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.settings.VirtualPatch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.settings.VirtualPatch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.settings.VirtualPatch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.VirtualPatch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.contrast.api.settings.VirtualPatchCondition.serializeBinaryToWriter
    );
  }
  f = message.getParametersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.contrast.api.settings.VirtualPatchCondition.serializeBinaryToWriter
    );
  }
  f = message.getUrlsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.contrast.api.settings.VirtualPatchCondition.serializeBinaryToWriter
    );
  }
  f = message.getConditionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.contrast.api.settings.VirtualPatchCondition.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.contrast.api.settings.VirtualPatch.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.VirtualPatch} returns this
 */
proto.contrast.api.settings.VirtualPatch.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.contrast.api.settings.VirtualPatch.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.VirtualPatch} returns this
 */
proto.contrast.api.settings.VirtualPatch.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string key = 3;
 * @return {string}
 */
proto.contrast.api.settings.VirtualPatch.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.VirtualPatch} returns this
 */
proto.contrast.api.settings.VirtualPatch.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated VirtualPatchCondition headers = 4;
 * @return {!Array<!proto.contrast.api.settings.VirtualPatchCondition>}
 */
proto.contrast.api.settings.VirtualPatch.prototype.getHeadersList = function() {
  return /** @type{!Array<!proto.contrast.api.settings.VirtualPatchCondition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.settings.VirtualPatchCondition, 4));
};


/**
 * @param {!Array<!proto.contrast.api.settings.VirtualPatchCondition>} value
 * @return {!proto.contrast.api.settings.VirtualPatch} returns this
*/
proto.contrast.api.settings.VirtualPatch.prototype.setHeadersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.contrast.api.settings.VirtualPatchCondition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.settings.VirtualPatchCondition}
 */
proto.contrast.api.settings.VirtualPatch.prototype.addHeaders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.contrast.api.settings.VirtualPatchCondition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.settings.VirtualPatch} returns this
 */
proto.contrast.api.settings.VirtualPatch.prototype.clearHeadersList = function() {
  return this.setHeadersList([]);
};


/**
 * repeated VirtualPatchCondition parameters = 5;
 * @return {!Array<!proto.contrast.api.settings.VirtualPatchCondition>}
 */
proto.contrast.api.settings.VirtualPatch.prototype.getParametersList = function() {
  return /** @type{!Array<!proto.contrast.api.settings.VirtualPatchCondition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.settings.VirtualPatchCondition, 5));
};


/**
 * @param {!Array<!proto.contrast.api.settings.VirtualPatchCondition>} value
 * @return {!proto.contrast.api.settings.VirtualPatch} returns this
*/
proto.contrast.api.settings.VirtualPatch.prototype.setParametersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.contrast.api.settings.VirtualPatchCondition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.settings.VirtualPatchCondition}
 */
proto.contrast.api.settings.VirtualPatch.prototype.addParameters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.contrast.api.settings.VirtualPatchCondition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.settings.VirtualPatch} returns this
 */
proto.contrast.api.settings.VirtualPatch.prototype.clearParametersList = function() {
  return this.setParametersList([]);
};


/**
 * repeated VirtualPatchCondition urls = 6;
 * @return {!Array<!proto.contrast.api.settings.VirtualPatchCondition>}
 */
proto.contrast.api.settings.VirtualPatch.prototype.getUrlsList = function() {
  return /** @type{!Array<!proto.contrast.api.settings.VirtualPatchCondition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.settings.VirtualPatchCondition, 6));
};


/**
 * @param {!Array<!proto.contrast.api.settings.VirtualPatchCondition>} value
 * @return {!proto.contrast.api.settings.VirtualPatch} returns this
*/
proto.contrast.api.settings.VirtualPatch.prototype.setUrlsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.contrast.api.settings.VirtualPatchCondition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.settings.VirtualPatchCondition}
 */
proto.contrast.api.settings.VirtualPatch.prototype.addUrls = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.contrast.api.settings.VirtualPatchCondition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.settings.VirtualPatch} returns this
 */
proto.contrast.api.settings.VirtualPatch.prototype.clearUrlsList = function() {
  return this.setUrlsList([]);
};


/**
 * repeated VirtualPatchCondition conditions = 7;
 * @return {!Array<!proto.contrast.api.settings.VirtualPatchCondition>}
 */
proto.contrast.api.settings.VirtualPatch.prototype.getConditionsList = function() {
  return /** @type{!Array<!proto.contrast.api.settings.VirtualPatchCondition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.settings.VirtualPatchCondition, 7));
};


/**
 * @param {!Array<!proto.contrast.api.settings.VirtualPatchCondition>} value
 * @return {!proto.contrast.api.settings.VirtualPatch} returns this
*/
proto.contrast.api.settings.VirtualPatch.prototype.setConditionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.contrast.api.settings.VirtualPatchCondition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.settings.VirtualPatchCondition}
 */
proto.contrast.api.settings.VirtualPatch.prototype.addConditions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.contrast.api.settings.VirtualPatchCondition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.settings.VirtualPatch} returns this
 */
proto.contrast.api.settings.VirtualPatch.prototype.clearConditionsList = function() {
  return this.setConditionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.settings.VirtualPatchCondition.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.settings.VirtualPatchCondition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.settings.VirtualPatchCondition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.VirtualPatchCondition.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    value: jspb.Message.getFieldWithDefault(msg, 3, ""),
    inputType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    evaluation: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.settings.VirtualPatchCondition}
 */
proto.contrast.api.settings.VirtualPatchCondition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.settings.VirtualPatchCondition;
  return proto.contrast.api.settings.VirtualPatchCondition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.settings.VirtualPatchCondition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.settings.VirtualPatchCondition}
 */
proto.contrast.api.settings.VirtualPatchCondition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 4:
      var value = /** @type {!proto.contrast.api.settings.VirtualPatchCondition.InputType} */ (reader.readEnum());
      msg.setInputType(value);
      break;
    case 5:
      var value = /** @type {!proto.contrast.api.settings.VirtualPatchCondition.Evaluation} */ (reader.readEnum());
      msg.setEvaluation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.settings.VirtualPatchCondition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.settings.VirtualPatchCondition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.settings.VirtualPatchCondition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.VirtualPatchCondition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInputType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getEvaluation();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.contrast.api.settings.VirtualPatchCondition.InputType = {
  UNKNOWN_INPUT: 0,
  USERAGENT: 1,
  REFERER: 2,
  URL: 3,
  PARAMETER: 4,
  HEADER: 5,
  CODE: 6
};

/**
 * @enum {number}
 */
proto.contrast.api.settings.VirtualPatchCondition.Evaluation = {
  UNKNOWN_EVALUATION: 0,
  MATCHES: 1,
  DOESNT_MATCH: 2,
  CONTAINS: 3,
  DOESNT_CONTAIN: 4,
  EQUALS: 5,
  DOESNT_EQUAL: 6
};

/**
 * optional string name = 2;
 * @return {string}
 */
proto.contrast.api.settings.VirtualPatchCondition.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.VirtualPatchCondition} returns this
 */
proto.contrast.api.settings.VirtualPatchCondition.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string value = 3;
 * @return {string}
 */
proto.contrast.api.settings.VirtualPatchCondition.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.VirtualPatchCondition} returns this
 */
proto.contrast.api.settings.VirtualPatchCondition.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional InputType input_type = 4;
 * @return {!proto.contrast.api.settings.VirtualPatchCondition.InputType}
 */
proto.contrast.api.settings.VirtualPatchCondition.prototype.getInputType = function() {
  return /** @type {!proto.contrast.api.settings.VirtualPatchCondition.InputType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.contrast.api.settings.VirtualPatchCondition.InputType} value
 * @return {!proto.contrast.api.settings.VirtualPatchCondition} returns this
 */
proto.contrast.api.settings.VirtualPatchCondition.prototype.setInputType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional Evaluation evaluation = 5;
 * @return {!proto.contrast.api.settings.VirtualPatchCondition.Evaluation}
 */
proto.contrast.api.settings.VirtualPatchCondition.prototype.getEvaluation = function() {
  return /** @type {!proto.contrast.api.settings.VirtualPatchCondition.Evaluation} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.contrast.api.settings.VirtualPatchCondition.Evaluation} value
 * @return {!proto.contrast.api.settings.VirtualPatchCondition} returns this
 */
proto.contrast.api.settings.VirtualPatchCondition.prototype.setEvaluation = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.settings.ProtectionRule.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.settings.ProtectionRule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.settings.ProtectionRule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.ProtectionRule.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    mode: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.settings.ProtectionRule}
 */
proto.contrast.api.settings.ProtectionRule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.settings.ProtectionRule;
  return proto.contrast.api.settings.ProtectionRule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.settings.ProtectionRule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.settings.ProtectionRule}
 */
proto.contrast.api.settings.ProtectionRule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {!proto.contrast.api.settings.ProtectionRule.Mode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.settings.ProtectionRule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.settings.ProtectionRule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.settings.ProtectionRule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.ProtectionRule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.contrast.api.settings.ProtectionRule.Mode = {
  NO_ACTION: 0,
  MONITOR: 1,
  BLOCK: 2,
  BLOCK_AT_PERIMETER: 3,
  PERMIT: 4
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.contrast.api.settings.ProtectionRule.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.ProtectionRule} returns this
 */
proto.contrast.api.settings.ProtectionRule.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.contrast.api.settings.ProtectionRule.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.ProtectionRule} returns this
 */
proto.contrast.api.settings.ProtectionRule.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Mode mode = 3;
 * @return {!proto.contrast.api.settings.ProtectionRule.Mode}
 */
proto.contrast.api.settings.ProtectionRule.prototype.getMode = function() {
  return /** @type {!proto.contrast.api.settings.ProtectionRule.Mode} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.contrast.api.settings.ProtectionRule.Mode} value
 * @return {!proto.contrast.api.settings.ProtectionRule} returns this
 */
proto.contrast.api.settings.ProtectionRule.prototype.setMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.settings.Accumulator.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.settings.Accumulator.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.settings.Accumulator} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.Accumulator.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0),
    count: jspb.Message.getFieldWithDefault(msg, 3, 0),
    windowMs: jspb.Message.getFieldWithDefault(msg, 4, 0),
    createdMs: jspb.Message.getFieldWithDefault(msg, 5, 0),
    lastUpdateMs: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.settings.Accumulator}
 */
proto.contrast.api.settings.Accumulator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.settings.Accumulator;
  return proto.contrast.api.settings.Accumulator.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.settings.Accumulator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.settings.Accumulator}
 */
proto.contrast.api.settings.Accumulator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setWindowMs(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedMs(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastUpdateMs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.settings.Accumulator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.settings.Accumulator.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.settings.Accumulator} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.Accumulator.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getWindowMs();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getCreatedMs();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getLastUpdateMs();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.contrast.api.settings.Accumulator.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.Accumulator} returns this
 */
proto.contrast.api.settings.Accumulator.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 limit = 2;
 * @return {number}
 */
proto.contrast.api.settings.Accumulator.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.settings.Accumulator} returns this
 */
proto.contrast.api.settings.Accumulator.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 count = 3;
 * @return {number}
 */
proto.contrast.api.settings.Accumulator.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.settings.Accumulator} returns this
 */
proto.contrast.api.settings.Accumulator.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 window_ms = 4;
 * @return {number}
 */
proto.contrast.api.settings.Accumulator.prototype.getWindowMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.settings.Accumulator} returns this
 */
proto.contrast.api.settings.Accumulator.prototype.setWindowMs = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 created_ms = 5;
 * @return {number}
 */
proto.contrast.api.settings.Accumulator.prototype.getCreatedMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.settings.Accumulator} returns this
 */
proto.contrast.api.settings.Accumulator.prototype.setCreatedMs = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 last_update_ms = 6;
 * @return {number}
 */
proto.contrast.api.settings.Accumulator.prototype.getLastUpdateMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.settings.Accumulator} returns this
 */
proto.contrast.api.settings.Accumulator.prototype.setLastUpdateMs = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.settings.Auth.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.settings.Auth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.settings.Auth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.Auth.toObject = function(includeInstance, msg) {
  var f, obj = {
    mode: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.settings.Auth}
 */
proto.contrast.api.settings.Auth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.settings.Auth;
  return proto.contrast.api.settings.Auth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.settings.Auth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.settings.Auth}
 */
proto.contrast.api.settings.Auth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.contrast.api.settings.Auth.Mode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.settings.Auth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.settings.Auth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.settings.Auth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.Auth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.contrast.api.settings.Auth.Mode = {
  OFF: 0,
  MONITOR: 1
};

/**
 * optional Mode mode = 1;
 * @return {!proto.contrast.api.settings.Auth.Mode}
 */
proto.contrast.api.settings.Auth.prototype.getMode = function() {
  return /** @type {!proto.contrast.api.settings.Auth.Mode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.contrast.api.settings.Auth.Mode} value
 * @return {!proto.contrast.api.settings.Auth} returns this
 */
proto.contrast.api.settings.Auth.prototype.setMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contrast.api.settings.InputAnalysis.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.settings.InputAnalysis.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.settings.InputAnalysis.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.settings.InputAnalysis} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.InputAnalysis.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.contrast.api.settings.InputAnalysisResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.settings.InputAnalysis}
 */
proto.contrast.api.settings.InputAnalysis.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.settings.InputAnalysis;
  return proto.contrast.api.settings.InputAnalysis.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.settings.InputAnalysis} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.settings.InputAnalysis}
 */
proto.contrast.api.settings.InputAnalysis.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.contrast.api.settings.InputAnalysisResult;
      reader.readMessage(value,proto.contrast.api.settings.InputAnalysisResult.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.settings.InputAnalysis.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.settings.InputAnalysis.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.settings.InputAnalysis} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.InputAnalysis.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.contrast.api.settings.InputAnalysisResult.serializeBinaryToWriter
    );
  }
};


/**
 * repeated InputAnalysisResult results = 1;
 * @return {!Array<!proto.contrast.api.settings.InputAnalysisResult>}
 */
proto.contrast.api.settings.InputAnalysis.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.contrast.api.settings.InputAnalysisResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.settings.InputAnalysisResult, 1));
};


/**
 * @param {!Array<!proto.contrast.api.settings.InputAnalysisResult>} value
 * @return {!proto.contrast.api.settings.InputAnalysis} returns this
*/
proto.contrast.api.settings.InputAnalysis.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.contrast.api.settings.InputAnalysisResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.settings.InputAnalysisResult}
 */
proto.contrast.api.settings.InputAnalysis.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.contrast.api.settings.InputAnalysisResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.settings.InputAnalysis} returns this
 */
proto.contrast.api.settings.InputAnalysis.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contrast.api.settings.InputAnalysisResult.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.settings.InputAnalysisResult.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.settings.InputAnalysisResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.settings.InputAnalysisResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.InputAnalysisResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    ruleId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    inputType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    path: jspb.Message.getFieldWithDefault(msg, 4, ""),
    key: jspb.Message.getFieldWithDefault(msg, 5, ""),
    value: jspb.Message.getFieldWithDefault(msg, 6, ""),
    scoreLevel: jspb.Message.getFieldWithDefault(msg, 9, 0),
    idsList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    attackCount: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.settings.InputAnalysisResult}
 */
proto.contrast.api.settings.InputAnalysisResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.settings.InputAnalysisResult;
  return proto.contrast.api.settings.InputAnalysisResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.settings.InputAnalysisResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.settings.InputAnalysisResult}
 */
proto.contrast.api.settings.InputAnalysisResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRuleId(value);
      break;
    case 3:
      var value = /** @type {!proto.contrast.api.settings.InputAnalysisResult.InputType} */ (reader.readEnum());
      msg.setInputType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 9:
      var value = /** @type {!proto.contrast.api.settings.InputAnalysisResult.ScoreLevel} */ (reader.readEnum());
      msg.setScoreLevel(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addIds(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAttackCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.settings.InputAnalysisResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.settings.InputAnalysisResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.settings.InputAnalysisResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.settings.InputAnalysisResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRuleId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInputType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getScoreLevel();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getAttackCount();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.contrast.api.settings.InputAnalysisResult.InputType = {
  UNDEFINED_TYPE: 0,
  BODY: 1,
  COOKIE_NAME: 2,
  COOKIE_VALUE: 3,
  HEADER: 4,
  PARAMETER_NAME: 5,
  PARAMETER_VALUE: 6,
  QUERYSTRING: 7,
  URI: 8,
  SOCKET: 9,
  JSON_VALUE: 10,
  JSON_ARRAYED_VALUE: 11,
  MULTIPART_CONTENT_TYPE: 16,
  MULTIPART_VALUE: 17,
  MULTIPART_FIELD_NAME: 18,
  MULTIPART_NAME: 19,
  XML_VALUE: 20,
  DWR_VALUE: 21,
  METHOD: 22,
  REQUEST: 23,
  UNKNOWN: 99
};

/**
 * @enum {number}
 */
proto.contrast.api.settings.InputAnalysisResult.ScoreLevel = {
  DONTCARE: 0,
  WORTHWATCHING: 1,
  DEFINITEATTACK: 2
};

/**
 * optional string rule_id = 1;
 * @return {string}
 */
proto.contrast.api.settings.InputAnalysisResult.prototype.getRuleId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.InputAnalysisResult} returns this
 */
proto.contrast.api.settings.InputAnalysisResult.prototype.setRuleId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional InputType input_type = 3;
 * @return {!proto.contrast.api.settings.InputAnalysisResult.InputType}
 */
proto.contrast.api.settings.InputAnalysisResult.prototype.getInputType = function() {
  return /** @type {!proto.contrast.api.settings.InputAnalysisResult.InputType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.contrast.api.settings.InputAnalysisResult.InputType} value
 * @return {!proto.contrast.api.settings.InputAnalysisResult} returns this
 */
proto.contrast.api.settings.InputAnalysisResult.prototype.setInputType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string path = 4;
 * @return {string}
 */
proto.contrast.api.settings.InputAnalysisResult.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.InputAnalysisResult} returns this
 */
proto.contrast.api.settings.InputAnalysisResult.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string key = 5;
 * @return {string}
 */
proto.contrast.api.settings.InputAnalysisResult.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.InputAnalysisResult} returns this
 */
proto.contrast.api.settings.InputAnalysisResult.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string value = 6;
 * @return {string}
 */
proto.contrast.api.settings.InputAnalysisResult.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.settings.InputAnalysisResult} returns this
 */
proto.contrast.api.settings.InputAnalysisResult.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional ScoreLevel score_level = 9;
 * @return {!proto.contrast.api.settings.InputAnalysisResult.ScoreLevel}
 */
proto.contrast.api.settings.InputAnalysisResult.prototype.getScoreLevel = function() {
  return /** @type {!proto.contrast.api.settings.InputAnalysisResult.ScoreLevel} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.contrast.api.settings.InputAnalysisResult.ScoreLevel} value
 * @return {!proto.contrast.api.settings.InputAnalysisResult} returns this
 */
proto.contrast.api.settings.InputAnalysisResult.prototype.setScoreLevel = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * repeated string ids = 7;
 * @return {!Array<string>}
 */
proto.contrast.api.settings.InputAnalysisResult.prototype.getIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.contrast.api.settings.InputAnalysisResult} returns this
 */
proto.contrast.api.settings.InputAnalysisResult.prototype.setIdsList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.settings.InputAnalysisResult} returns this
 */
proto.contrast.api.settings.InputAnalysisResult.prototype.addIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.settings.InputAnalysisResult} returns this
 */
proto.contrast.api.settings.InputAnalysisResult.prototype.clearIdsList = function() {
  return this.setIdsList([]);
};


/**
 * optional int32 attack_count = 8;
 * @return {number}
 */
proto.contrast.api.settings.InputAnalysisResult.prototype.getAttackCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.settings.InputAnalysisResult} returns this
 */
proto.contrast.api.settings.InputAnalysisResult.prototype.setAttackCount = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * @enum {number}
 */
proto.contrast.api.settings.LogLevel = {
  TRACE: 0,
  DEBUG: 1,
  INFO: 2,
  WARN: 3,
  ERROR: 4
};

goog.object.extend(exports, proto.contrast.api.settings);
