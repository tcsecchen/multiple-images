// source: connect.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.contrast.api.connect.Pair', null, global);
goog.exportSymbol('proto.contrast.api.connect.Request', null, global);
goog.exportSymbol('proto.contrast.api.connect.Response', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.connect.Pair = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.connect.Pair, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.connect.Pair.displayName = 'proto.contrast.api.connect.Pair';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.connect.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contrast.api.connect.Request.repeatedFields_, null);
};
goog.inherits(proto.contrast.api.connect.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.connect.Request.displayName = 'proto.contrast.api.connect.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contrast.api.connect.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contrast.api.connect.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.contrast.api.connect.Response.displayName = 'proto.contrast.api.connect.Response';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.connect.Pair.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.connect.Pair.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.connect.Pair} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.connect.Pair.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.connect.Pair}
 */
proto.contrast.api.connect.Pair.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.connect.Pair;
  return proto.contrast.api.connect.Pair.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.connect.Pair} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.connect.Pair}
 */
proto.contrast.api.connect.Pair.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.connect.Pair.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.connect.Pair.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.connect.Pair} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.connect.Pair.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.contrast.api.connect.Pair.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.connect.Pair} returns this
 */
proto.contrast.api.connect.Pair.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.contrast.api.connect.Pair.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.connect.Pair} returns this
 */
proto.contrast.api.connect.Pair.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contrast.api.connect.Request.repeatedFields_ = [20,26];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.connect.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.connect.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.connect.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.connect.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    connectorType: jspb.Message.getFieldWithDefault(msg, 30, ""),
    connectorVersion: jspb.Message.getFieldWithDefault(msg, 31, ""),
    pid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    messageCount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    timestampMs: jspb.Message.getFieldWithDefault(msg, 5, 0),
    appName: jspb.Message.getFieldWithDefault(msg, 6, ""),
    appLanguage: jspb.Message.getFieldWithDefault(msg, 7, ""),
    uuid: jspb.Message.getFieldWithDefault(msg, 8, ""),
    command: jspb.Message.getFieldWithDefault(msg, 9, 0),
    requestLine: jspb.Message.getFieldWithDefault(msg, 10, ""),
    normalizedUri: jspb.Message.getFieldWithDefault(msg, 11, ""),
    clientIp: jspb.Message.getFieldWithDefault(msg, 14, ""),
    clientIpVersion: jspb.Message.getFieldWithDefault(msg, 15, 0),
    clientPort: jspb.Message.getFieldWithDefault(msg, 16, 0),
    serverIp: jspb.Message.getFieldWithDefault(msg, 17, ""),
    serverIpVersion: jspb.Message.getFieldWithDefault(msg, 18, 0),
    serverPort: jspb.Message.getFieldWithDefault(msg, 19, 0),
    requestHeadersList: jspb.Message.toObjectList(msg.getRequestHeadersList(),
    proto.contrast.api.connect.Pair.toObject, includeInstance),
    requestBody: msg.getRequestBody_asB64(),
    responseCode: jspb.Message.getFieldWithDefault(msg, 24, 0),
    responseHeadersList: jspb.Message.toObjectList(msg.getResponseHeadersList(),
    proto.contrast.api.connect.Pair.toObject, includeInstance),
    responseBody: msg.getResponseBody_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.connect.Request}
 */
proto.contrast.api.connect.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.connect.Request;
  return proto.contrast.api.connect.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.connect.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.connect.Request}
 */
proto.contrast.api.connect.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 30:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectorType(value);
      break;
    case 31:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectorVersion(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMessageCount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestampMs(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppName(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppLanguage(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCommand(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestLine(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setNormalizedUri(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientIp(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setClientIpVersion(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setClientPort(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerIp(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServerIpVersion(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServerPort(value);
      break;
    case 20:
      var value = new proto.contrast.api.connect.Pair;
      reader.readMessage(value,proto.contrast.api.connect.Pair.deserializeBinaryFromReader);
      msg.addRequestHeaders(value);
      break;
    case 22:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestBody(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResponseCode(value);
      break;
    case 26:
      var value = new proto.contrast.api.connect.Pair;
      reader.readMessage(value,proto.contrast.api.connect.Pair.deserializeBinaryFromReader);
      msg.addResponseHeaders(value);
      break;
    case 28:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setResponseBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.connect.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.connect.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.connect.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.connect.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConnectorType();
  if (f.length > 0) {
    writer.writeString(
      30,
      f
    );
  }
  f = message.getConnectorVersion();
  if (f.length > 0) {
    writer.writeString(
      31,
      f
    );
  }
  f = message.getPid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getMessageCount();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getTimestampMs();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getAppName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getAppLanguage();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getCommand();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getRequestLine();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getNormalizedUri();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getClientIp();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getClientIpVersion();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getClientPort();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getServerIp();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getServerIpVersion();
  if (f !== 0) {
    writer.writeInt32(
      18,
      f
    );
  }
  f = message.getServerPort();
  if (f !== 0) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = message.getRequestHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      20,
      f,
      proto.contrast.api.connect.Pair.serializeBinaryToWriter
    );
  }
  f = message.getRequestBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      22,
      f
    );
  }
  f = message.getResponseCode();
  if (f !== 0) {
    writer.writeInt32(
      24,
      f
    );
  }
  f = message.getResponseHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      26,
      f,
      proto.contrast.api.connect.Pair.serializeBinaryToWriter
    );
  }
  f = message.getResponseBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      28,
      f
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.contrast.api.connect.Request.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.connect.Request} returns this
 */
proto.contrast.api.connect.Request.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string connector_type = 30;
 * @return {string}
 */
proto.contrast.api.connect.Request.prototype.getConnectorType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 30, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.connect.Request} returns this
 */
proto.contrast.api.connect.Request.prototype.setConnectorType = function(value) {
  return jspb.Message.setProto3StringField(this, 30, value);
};


/**
 * optional string connector_version = 31;
 * @return {string}
 */
proto.contrast.api.connect.Request.prototype.getConnectorVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 31, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.connect.Request} returns this
 */
proto.contrast.api.connect.Request.prototype.setConnectorVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 31, value);
};


/**
 * optional int64 pid = 2;
 * @return {number}
 */
proto.contrast.api.connect.Request.prototype.getPid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.connect.Request} returns this
 */
proto.contrast.api.connect.Request.prototype.setPid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 message_count = 4;
 * @return {number}
 */
proto.contrast.api.connect.Request.prototype.getMessageCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.connect.Request} returns this
 */
proto.contrast.api.connect.Request.prototype.setMessageCount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 timestamp_ms = 5;
 * @return {number}
 */
proto.contrast.api.connect.Request.prototype.getTimestampMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.connect.Request} returns this
 */
proto.contrast.api.connect.Request.prototype.setTimestampMs = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string app_name = 6;
 * @return {string}
 */
proto.contrast.api.connect.Request.prototype.getAppName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.connect.Request} returns this
 */
proto.contrast.api.connect.Request.prototype.setAppName = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string app_language = 7;
 * @return {string}
 */
proto.contrast.api.connect.Request.prototype.getAppLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.connect.Request} returns this
 */
proto.contrast.api.connect.Request.prototype.setAppLanguage = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string uuid = 8;
 * @return {string}
 */
proto.contrast.api.connect.Request.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.connect.Request} returns this
 */
proto.contrast.api.connect.Request.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int32 command = 9;
 * @return {number}
 */
proto.contrast.api.connect.Request.prototype.getCommand = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.connect.Request} returns this
 */
proto.contrast.api.connect.Request.prototype.setCommand = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string request_line = 10;
 * @return {string}
 */
proto.contrast.api.connect.Request.prototype.getRequestLine = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.connect.Request} returns this
 */
proto.contrast.api.connect.Request.prototype.setRequestLine = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string normalized_uri = 11;
 * @return {string}
 */
proto.contrast.api.connect.Request.prototype.getNormalizedUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.connect.Request} returns this
 */
proto.contrast.api.connect.Request.prototype.setNormalizedUri = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string client_ip = 14;
 * @return {string}
 */
proto.contrast.api.connect.Request.prototype.getClientIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.connect.Request} returns this
 */
proto.contrast.api.connect.Request.prototype.setClientIp = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional int32 client_ip_version = 15;
 * @return {number}
 */
proto.contrast.api.connect.Request.prototype.getClientIpVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.connect.Request} returns this
 */
proto.contrast.api.connect.Request.prototype.setClientIpVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int32 client_port = 16;
 * @return {number}
 */
proto.contrast.api.connect.Request.prototype.getClientPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.connect.Request} returns this
 */
proto.contrast.api.connect.Request.prototype.setClientPort = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional string server_ip = 17;
 * @return {string}
 */
proto.contrast.api.connect.Request.prototype.getServerIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.connect.Request} returns this
 */
proto.contrast.api.connect.Request.prototype.setServerIp = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional int32 server_ip_version = 18;
 * @return {number}
 */
proto.contrast.api.connect.Request.prototype.getServerIpVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.connect.Request} returns this
 */
proto.contrast.api.connect.Request.prototype.setServerIpVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional int32 server_port = 19;
 * @return {number}
 */
proto.contrast.api.connect.Request.prototype.getServerPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.connect.Request} returns this
 */
proto.contrast.api.connect.Request.prototype.setServerPort = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * repeated Pair request_headers = 20;
 * @return {!Array<!proto.contrast.api.connect.Pair>}
 */
proto.contrast.api.connect.Request.prototype.getRequestHeadersList = function() {
  return /** @type{!Array<!proto.contrast.api.connect.Pair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.connect.Pair, 20));
};


/**
 * @param {!Array<!proto.contrast.api.connect.Pair>} value
 * @return {!proto.contrast.api.connect.Request} returns this
*/
proto.contrast.api.connect.Request.prototype.setRequestHeadersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 20, value);
};


/**
 * @param {!proto.contrast.api.connect.Pair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.connect.Pair}
 */
proto.contrast.api.connect.Request.prototype.addRequestHeaders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 20, opt_value, proto.contrast.api.connect.Pair, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.connect.Request} returns this
 */
proto.contrast.api.connect.Request.prototype.clearRequestHeadersList = function() {
  return this.setRequestHeadersList([]);
};


/**
 * optional bytes request_body = 22;
 * @return {string}
 */
proto.contrast.api.connect.Request.prototype.getRequestBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/**
 * optional bytes request_body = 22;
 * This is a type-conversion wrapper around `getRequestBody()`
 * @return {string}
 */
proto.contrast.api.connect.Request.prototype.getRequestBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestBody()));
};


/**
 * optional bytes request_body = 22;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestBody()`
 * @return {!Uint8Array}
 */
proto.contrast.api.connect.Request.prototype.getRequestBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestBody()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.contrast.api.connect.Request} returns this
 */
proto.contrast.api.connect.Request.prototype.setRequestBody = function(value) {
  return jspb.Message.setProto3BytesField(this, 22, value);
};


/**
 * optional int32 response_code = 24;
 * @return {number}
 */
proto.contrast.api.connect.Request.prototype.getResponseCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.connect.Request} returns this
 */
proto.contrast.api.connect.Request.prototype.setResponseCode = function(value) {
  return jspb.Message.setProto3IntField(this, 24, value);
};


/**
 * repeated Pair response_headers = 26;
 * @return {!Array<!proto.contrast.api.connect.Pair>}
 */
proto.contrast.api.connect.Request.prototype.getResponseHeadersList = function() {
  return /** @type{!Array<!proto.contrast.api.connect.Pair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contrast.api.connect.Pair, 26));
};


/**
 * @param {!Array<!proto.contrast.api.connect.Pair>} value
 * @return {!proto.contrast.api.connect.Request} returns this
*/
proto.contrast.api.connect.Request.prototype.setResponseHeadersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 26, value);
};


/**
 * @param {!proto.contrast.api.connect.Pair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contrast.api.connect.Pair}
 */
proto.contrast.api.connect.Request.prototype.addResponseHeaders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 26, opt_value, proto.contrast.api.connect.Pair, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.contrast.api.connect.Request} returns this
 */
proto.contrast.api.connect.Request.prototype.clearResponseHeadersList = function() {
  return this.setResponseHeadersList([]);
};


/**
 * optional bytes response_body = 28;
 * @return {string}
 */
proto.contrast.api.connect.Request.prototype.getResponseBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 28, ""));
};


/**
 * optional bytes response_body = 28;
 * This is a type-conversion wrapper around `getResponseBody()`
 * @return {string}
 */
proto.contrast.api.connect.Request.prototype.getResponseBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getResponseBody()));
};


/**
 * optional bytes response_body = 28;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getResponseBody()`
 * @return {!Uint8Array}
 */
proto.contrast.api.connect.Request.prototype.getResponseBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getResponseBody()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.contrast.api.connect.Request} returns this
 */
proto.contrast.api.connect.Request.prototype.setResponseBody = function(value) {
  return jspb.Message.setProto3BytesField(this, 28, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contrast.api.connect.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.contrast.api.connect.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contrast.api.connect.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.connect.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestampMs: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    trackRequest: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    securityException: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    securityMessage: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contrast.api.connect.Response}
 */
proto.contrast.api.connect.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contrast.api.connect.Response;
  return proto.contrast.api.connect.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contrast.api.connect.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contrast.api.connect.Response}
 */
proto.contrast.api.connect.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestampMs(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTrackRequest(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSecurityException(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecurityMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contrast.api.connect.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.contrast.api.connect.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.contrast.api.connect.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.contrast.api.connect.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestampMs();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTrackRequest();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getSecurityException();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getSecurityMessage();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional int64 timestamp_ms = 1;
 * @return {number}
 */
proto.contrast.api.connect.Response.prototype.getTimestampMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.contrast.api.connect.Response} returns this
 */
proto.contrast.api.connect.Response.prototype.setTimestampMs = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.contrast.api.connect.Response.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.connect.Response} returns this
 */
proto.contrast.api.connect.Response.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool track_request = 3;
 * @return {boolean}
 */
proto.contrast.api.connect.Response.prototype.getTrackRequest = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.connect.Response} returns this
 */
proto.contrast.api.connect.Response.prototype.setTrackRequest = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool security_exception = 4;
 * @return {boolean}
 */
proto.contrast.api.connect.Response.prototype.getSecurityException = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.contrast.api.connect.Response} returns this
 */
proto.contrast.api.connect.Response.prototype.setSecurityException = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string security_message = 5;
 * @return {string}
 */
proto.contrast.api.connect.Response.prototype.getSecurityMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.contrast.api.connect.Response} returns this
 */
proto.contrast.api.connect.Response.prototype.setSecurityMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


goog.object.extend(exports, proto.contrast.api.connect);
